SELECT MAX(`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS MaxEligibleFreeRate FROM frpm WHERE `County Name` = 'Alameda';
SELECT frpm.CDSCode, frpm.`School Name`, (frpm.`Free Meal Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)`) AS EligibleFreeRate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.School LIKE '%Continuation%' ORDER BY EligibleFreeRate ASC LIMIT 3;
SELECT s.Zip FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Fresno' AND f.`Charter School (Y/N)` = 1;
SELECT sc.MailStreet, sc.MailCity, sc.MailState, sc.MailZip FROM frpm f JOIN schools sc ON f.CDSCode = sc.CDSCode ORDER BY f.`FRPM Count (K-12)` DESC LIMIT 1;
SELECT s.Phone FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND s.FundingType = 'Direct Charter' 
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE AvgScrMath < 400 AND Virtual = 'F';
SELECT s.School, s.District, s.County, sc.NumTstTakr FROM satscores sc JOIN schools s ON sc.cds = s.CDSCode WHERE sc.NumTstTakr > 500 AND s.Magnet = 1;
SELECT sc.Phone FROM satscores ss JOIN schools sc ON ss.cds = sc.CDSCode ORDER BY ss.NumGE1500 DESC LIMIT 1;
SELECT ss.NumTstTakr FROM satscores ss JOIN frpm fr ON ss.cds = fr.CDSCode WHERE fr.`FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm );
SELECT COUNT(DISTINCT sch.CDSCode) FROM satscores sat JOIN schools sch ON sat.cds = sch.CDSCode WHERE sat.AvgScrMath > 560 AND sch.FundingType = 'Direct Charter';
SELECT fr.`FRPM Count (Ages 5-17)` FROM satscores s JOIN schools sch ON s.cds = sch.CDSCode JOIN frpm fr ON sch.CDSCode = fr.CDSCode WHERE s.AvgScrRead = ( SELECT MAX(AvgScrRead) FROM satscores ) AND fr.`Enrollment (Ages 5-17)` IS NOT NULL;
SELECT CDSCode FROM frpm WHERE COALESCE(`Enrollment (K-12)`, 0) + COALESCE(`Enrollment (Ages 5-17)`, 0) > 500;
SELECT MAX(`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) AS MaxEligibleFreeRate FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE NumGE1500 / NumTstTakr > 0.3;
WITH RankedSchools AS ( SELECT satscores.cds, (CAST(satscores.NumGE1500 AS REAL) / satscores.NumTstTakr) AS ExcellenceRate FROM satscores ORDER BY ExcellenceRate DESC LIMIT 3 ) SELECT schools.Phone FROM RankedSchools JOIN schools ON RankedSchools.cds = schools.CDSCode;
SELECT s.NCESSchool, f.`Enrollment (Ages 5-17)` FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode ORDER BY f.`Enrollment (Ages 5-17)` DESC LIMIT 5;
SELECT sc.District, MAX(ss.AvgScrRead) AS MaxAvgScrRead FROM satscores AS ss JOIN schools AS sc ON ss.cds = sc.CDSCode WHERE sc.StatusType = 'Active' GROUP BY sc.District ORDER BY MaxAvgScrRead DESC LIMIT 1;
SELECT COUNT(*) FROM satscores AS s JOIN schools AS sc ON s.cds = sc.CDSCode WHERE sc.County = 'Alameda' AND s.NumTstTakr < 100;
SELECT s.CharterNum FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode WHERE ss.AvgScrWrite = 499;
SELECT COUNT(*) FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE sc.County = 'Contra Costa' AND sc.FundingType = 'Directly Funded' AND s.NumTstTakr <= 250;
SELECT sc.Phone FROM schools sc JOIN satscores ss ON sc.CDSCode = ss.cds WHERE ss.AvgScrMath = ( SELECT MAX(AvgScrMath) FROM satscores );
SELECT COUNT(*) FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Amador' AND f.`Low Grade` = '9' AND f.`High Grade` = '12';
SELECT COUNT(*) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.City = 'Los Angeles' AND frpm.`Free Meal Count (K-12)` > 500 AND frpm.`FRPM Count (K-12)` < 700;
SELECT sc.School, st.NumTstTakr FROM schools sc JOIN satscores st ON sc.CDSCode = st.cds WHERE sc.County = 'Contra Costa' ORDER BY st.NumTstTakr DESC LIMIT 1;
SELECT s.School AS SchoolName, s.Street AS FullStreetAddress FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE (f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > 30;
SELECT sc.School FROM schools sc JOIN frpm fr ON sc.CDSCode = fr.CDSCode JOIN satscores ss ON sc.CDSCode = ss.cds WHERE fr.`Percent (%) Eligible Free (K-12)` > 0.1 AND ss.NumGE1500 IS NOT NULL AND ss.NumGE1500 > 0;
SELECT s.School, s.FundingType FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode WHERE s.County = 'Riverside' AND ss.AvgScrMath > 400;
SELECT s.School AS SchoolName, s.Street || ', ' || s.City || ', ' || s.State || ', ' || s.Zip AS FullCommunicationAddress FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Monterey' AND f.`High Grade` = '12' 
SELECT s.School AS SchoolName, sc.AvgScrWrite AS AverageWritingScore, s.Phone AS CommunicationNumber FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds WHERE (s.OpenDate > '1991-12-31' OR s.ClosedDate < '2000-01-01') AND sc.AvgScrWrite IS NOT NULL;
WITH EnrollmentDifferences AS ( SELECT frpm.CDSCode, frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)` AS enrollment_diff FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.FundingType = 'Local' ), AverageDifference AS ( SELECT AVG(enrollment_diff) AS avg_diff FROM EnrollmentDifferences ) SELECT schools.School, schools.DOCType FROM EnrollmentDifferences JOIN schools ON EnrollmentDifferences.CDSCode = schools.CDSCode, AverageDifference WHERE EnrollmentDifferences.enrollment_diff > AverageDifference.avg_diff;
SELECT s.OpenDate FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode ORDER BY f.`Enrollment (K-12)` DESC LIMIT 1;
SELECT s.City, f.`Enrollment (K-12)` FROM frpm f INNER JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`Enrollment (K-12)` IS NOT NULL ORDER BY f.`Enrollment (K-12)` ASC LIMIT 5;
WITH RankedSchools AS ( SELECT `CDSCode`, `Enrollment (K-12)`, `Free Meal Count (K-12)`, RANK() OVER (ORDER BY `Enrollment (K-12)` DESC) as rank FROM frpm ) SELECT `CDSCode`, `Enrollment (K-12)`, `Free Meal Count (K-12)`, (`Free Meal Count (K-12)` / `Enrollment (K-12)`) as EligibleFreeRate FROM RankedSchools WHERE rank IN (10, 11);
SELECT frpm.`CDSCode`, frpm.`FRPM Count (K-12)`, frpm.`Enrollment (K-12)`, frpm.`FRPM Count (K-12)` / frpm.`Enrollment (K-12)` AS EligibleMealRate FROM frpm JOIN schools ON frpm.`CDSCode` = schools.`CDSCode` WHERE schools.`DOC` = '66' ORDER BY frpm.`FRPM Count (K-12)` DESC LIMIT 5;
SELECT sch.School AS SchoolName, sch.Website FROM frpm f JOIN schools sch ON f.CDSCode = sch.CDSCode WHERE f.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000;
SELECT (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) AS Free_Rate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Kacey' AND schools.AdmLName1 = 'Gibson';
SELECT sc.AdmEmail1, sc.AdmEmail2, sc.AdmEmail3 FROM frpm JOIN schools sc ON frpm.CDSCode = sc.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 ORDER BY frpm.`Enrollment (K-12)` ASC LIMIT 1;
SELECT AdmFName1 || ' ' || AdmLName1 AS FullName FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores);
SELECT s.School, sc.Street, sc.City, sc.Zip, sc.State FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE s.NumGE1500 / s.NumTstTakr = ( SELECT MIN(s1.NumGE1500 / s1.NumTstTakr) FROM satscores s1 WHERE s1.NumTstTakr > 0 );
SELECT DISTINCT schools.Website FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Los Angeles' AND satscores.NumTstTakr BETWEEN 2000 AND 3000;
SELECT AVG(s.NumTstTakr) as AverageNumberOfTestTakers FROM schools sc JOIN satscores s ON sc.CDSCode = s.cds WHERE sc.County = 'Fresno' AND sc.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';
SELECT s.Phone FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode WHERE s.District = 'Fresno Unified' ORDER BY ss.AvgScrRead ASC LIMIT 1;
SELECT sc.School, sc.CDSCode, ss.AvgScrRead FROM schools sc JOIN satscores ss ON sc.CDSCode = ss.cds WHERE sc.Virtual = 'F' AND ss.AvgScrRead IS NOT NULL ORDER BY ss.AvgScrRead DESC LIMIT 5;
SELECT schools.EdOpsName FROM satscores JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.AvgScrMath DESC LIMIT 1;
WITH AvgScores AS ( SELECT cds, AvgScrMath, (AvgScrRead + AvgScrMath + AvgScrWrite) AS TotalAvgScore FROM satscores ), LowestAvg AS ( SELECT cds, AvgScrMath FROM AvgScores ORDER BY TotalAvgScore ASC LIMIT 1 ) SELECT LowestAvg.AvgScrMath, schools.County FROM LowestAvg JOIN schools ON LowestAvg.cds = schools.CDSCode;
WITH HighScoreSchools AS ( SELECT cds, NumTstTakr FROM satscores WHERE NumGE1500 IS NOT NULL AND NumGE1500 > 0 ), MaxTestTakersSchool AS ( SELECT cds, MAX(NumTstTakr) AS MaxNumTstTakr FROM HighScoreSchools GROUP BY cds ) SELECT ss.AvgScrWrite, sc.City FROM satscores ss JOIN MaxTestTakersSchool mts ON ss.cds = mts.cds JOIN schools sc ON ss.cds = sc.CDSCode WHERE ss.NumTstTakr = mts.MaxNumTstTakr
SELECT s.School AS SchoolName, sc.AvgScrWrite AS AverageWritingScore FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds WHERE (s.AdmFName1 = 'Ricci' AND s.AdmLName1 = 'Ulrich') OR (s.AdmFName2 = 'Ricci' AND s.AdmLName2 = 'Ulrich') OR (s.AdmFName3 = 'Ricci' AND s.AdmLName3 = 'Ulrich');
SELECT schools.School AS SchoolName, schools.County AS CountyName, frpm.`Enrollment (K-12)` AS EnrollmentK12 FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.DOC = "31" AND frpm.`Enrollment (K-12)` IS NOT NULL ORDER BY frpm.`Enrollment (K-12)` DESC LIMIT 1;
SELECT COUNT(*) / 12.0 AS monthly_average_openings FROM schools WHERE County = 'Alameda' AND DOC = '52' AND strftime('%Y', OpenDate) = '1980';
SELECT COUNT(*) AS elementary_count FROM schools WHERE DOC = '52' AND County = 'Orange'; 
WITH ClosedSchools AS ( SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' AND ClosedDate IS NOT NULL ) , CountyClosedCount AS ( SELECT County, COUNT(*) AS NumClosedSchools FROM ClosedSchools GROUP BY County ORDER BY NumClosedSchools DESC LIMIT 1 ) SELECT c.County, cs.School, cs.ClosedDate FROM CountyClosedCount c JOIN ClosedSchools cs ON c.County = cs.County ORDER BY cs.ClosedDate;
SELECT School, Street FROM schools JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY AvgScrMath DESC LIMIT 1 OFFSET 5;
SELECT sch.MailStreet, sch.School FROM satscores sat JOIN schools sch ON sat.cds = sch.CDSCode WHERE sat.AvgScrRead = ( SELECT MIN(AvgScrRead) FROM satscores );
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE (AvgScrRead + AvgScrMath + AvgScrWrite) >= 1500 AND MailCity = 'Lakeport';
SELECT SUM(s.NumTstTakr) AS TotalTestTakers FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE sc.MailCity = 'Fresno';
SELECT School, MailZip FROM schools WHERE (AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian') OR (AdmFName2 = 'Avetik' AND AdmLName2 = 'Atoian') OR (AdmFName3 = 'Avetik' AND AdmLName3 = 'Atoian');
WITH county_counts AS ( SELECT County, COUNT(*) AS school_count FROM schools WHERE MailState = 'CA' AND (County = 'Colusa' OR County = 'Humboldt') GROUP BY County ) SELECT (SELECT school_count FROM county_counts WHERE County = 'Colusa') * 1.0 / (SELECT school_count FROM county_counts WHERE County = 'Humboldt') AS colusa_humboldt_ratio;
SELECT COUNT(*) FROM schools WHERE MailState = 'California' AND County = 'San Joaquin' AND StatusType = 'Active';
WITH RankedSchools AS ( SELECT cds, AvgScrWrite, ROW_NUMBER() OVER (ORDER BY AvgScrWrite DESC) AS rank FROM satscores ) SELECT s.Phone, s.Ext FROM schools s JOIN RankedSchools rs ON s.CDSCode = rs.cds WHERE rs.rank = 333;
SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704';
SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez') OR (AdmFName2 = 'Mike' AND AdmLName2 = 'Larson') OR (AdmFName2 = 'Dante' AND AdmLName2 = 'Alvarez') OR (AdmFName3 = 'Mike' AND AdmLName3 = 'Larson') OR (AdmFName3 = 'Dante' AND AdmLName3 = 'Alvarez');
SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1;
SELECT COUNT(*) FROM schools WHERE Charter = 1 AND City = 'Hickman' AND DOC = 52;
SELECT COUNT(*) FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'Los Angeles' AND schools.Charter = 0 AND (frpm.`Free Meal Count (K-12)` * 100.0 / frpm.`Enrollment (K-12)`) < 0.18;
SELECT School AS School_Name, City AS School_City, AdmFName1 || ' ' || AdmLName1 AS Admin_Name1, AdmFName2 || ' ' || AdmLName2 AS Admin_Name2, AdmFName3 || ' ' || AdmLName3 AS Admin_Name3 FROM schools WHERE Charter = 1 AND CharterNum = '00D2';
SELECT COUNT(*) AS TotalSchools FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4';
WITH SantaClaraSchools AS ( SELECT * FROM schools WHERE County = 'Santa Clara' AND Charter IS NOT NULL ) SELECT (COUNT(CASE WHEN FundingType = 'Local' THEN 1 END) * 100.0 / COUNT(*)) AS LocalFundingPercentage FROM SantaClaraSchools;
SELECT COUNT(*) FROM schools WHERE County = 'Stanislaus' AND FundingType = 'Directly Funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';
SELECT COUNT(*) FROM schools WHERE DOCType = 'Community College District'
SELECT County, COUNT(*) AS closure_count FROM schools WHERE SOC = 11 AND ClosedDate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY County ORDER BY closure_count DESC LIMIT 1;
SELECT NCESDist FROM schools WHERE SOC = '31';
SELECT COUNT(*) FROM schools WHERE County = 'Alpine' AND (StatusType = 'Active' OR StatusType = 'Closed') AND DOCType = 'District Community Day School';
SELECT District FROM schools WHERE Magnet = 0 AND City = 'Fresno';
SELECT SUM(`Enrollment (Ages 5-17)`) AS TotalEnrollment FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.City = 'Fremont' AND schools.EdOpsCode = 'SSS' AND frpm.`Academic Year` = '2014-2015';
SELECT f.`FRPM Count (Ages 5-17)` FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.MailStreet = 'PO Box 1040' AND s.School LIKE '%Youth Authority School%';
SELECT frpm.`Low Grade` FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.NCESDist = '613360' AND schools.EdOpsCode = 'SPECON';
SELECT s.School, s.EdOpsName FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`NSLP Provision Status` = 'Breakfast Provision 2' AND s.County = '37';
SELECT s.City FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`NSLP Provision Status` = '2' AND f.`Low Grade` = '9' AND f.`High Grade` = '12' AND s.County = 'Merced' AND s.EILCode = 'HS';
SELECT s.School AS SchoolName, 100 * (f."Free Meal Count (Ages 5-17)" / f."Enrollment (Ages 5-17)") AS PercentEligibleFRPM FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Los Angeles' AND f."Low Grade" = 'K' AND f."High Grade" = '9';
SELECT GSserved, COUNT(*) AS count FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY count DESC LIMIT 1;
SELECT County, COUNT(*) AS SchoolCount FROM schools WHERE Virtual = 'F' AND County IN ('San Diego', 'Santa Barbara') GROUP BY County ORDER BY SchoolCount DESC LIMIT 1;
SELECT School, Latitude, DOCType FROM schools ORDER BY Latitude DESC LIMIT 1;
SELECT City, School, GSoffered FROM schools WHERE State = 'CA' ORDER BY Latitude ASC LIMIT 1;
SELECT GSoffered FROM schools WHERE Longitude = (SELECT MAX(Longitude) FROM schools);
SELECT COUNT(*) FROM schools WHERE Magnet = 1 AND GSoffered LIKE '%K%' AND GSoffered LIKE '%8%';
WITH all_names AS ( SELECT AdmFName1 AS FirstName, District FROM schools WHERE AdmFName1 IS NOT NULL UNION ALL SELECT AdmFName2 AS FirstName, District FROM schools WHERE AdmFName2 IS NOT NULL UNION ALL SELECT AdmFName3 AS FirstName, District FROM schools WHERE AdmFName3 IS NOT NULL ) SELECT FirstName, District, COUNT(*) AS NameCount FROM all_names GROUP BY FirstName, District ORDER BY NameCount DESC LIMIT 2;
SELECT frpm.`District Code` FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.AdmFName1 = 'Alusine';
SELECT AdmLName1 AS AdministratorLastName, District, County, School FROM schools WHERE CharterNum = '40';
SELECT AdmEmail1 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (SOC = '62' OR DOC = '54');
SELECT schools.School, schools.AdmEmail1 FROM satscores JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.NumGE1500 DESC LIMIT 1;
SELECT COUNT(DISTINCT o.account_id) FROM `order` o JOIN account a ON o.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE o.k_symbol = 'POPLATEK PO OBRATU' AND d.A3 = 'East Bohemia';
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id JOIN loan l ON a.account_id = l.account_id WHERE d.A3 = 'Prague';
SELECT AVG(A12) AS avg_unemployment_1995, AVG(A13) AS avg_unemployment_1996 FROM district;
SELECT COUNT(*) FROM district WHERE A11 > 6000 AND A11 < 10000;
SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.A3 = 'North Bohemia' AND district.A11 > 8000;
WITH oldest_female_clients AS ( SELECT c.client_id, d.A11 AS average_salary FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' ORDER BY c.birth_date ASC 
WITH YoungestClients AS ( SELECT client_id, birth_date, district_id FROM client WHERE birth_date = (SELECT MAX(birth_date) FROM client) ), HighestSalaryDistricts AS ( SELECT district_id FROM district WHERE A11 = (SELECT MAX(A11) FROM district) ) SELECT account.account_id FROM disp JOIN account ON disp.account_id = account.account_id WHERE disp.client_id IN ( SELECT client_id FROM YoungestClients WHERE district_id IN (SELECT district_id FROM HighestSalaryDistricts) );
SELECT COUNT(DISTINCT disp.client_id) AS owner_count FROM account JOIN disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'Owner';
SELECT DISTINCT c.client_id, c.gender, c.birth_date, c.district_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.k_symbol = 'POPLATEK PO OBRATU' AND d.type = 'DISPONENT';
SELECT a.account_id FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.status = 'approved' AND strftime('%Y', l.date) = '1997' AND l.amount = ( SELECT MIN(amount) FROM loan WHERE status = 'approved' AND strftime('%Y', date) = '1997' ) AND a.frequency = 'POPLATEK TYDNE';
SELECT a.account_id, l.amount FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.duration > 12 AND strftime('%Y', a.date) = '1993' ORDER BY l.amount DESC LIMIT 1;
SELECT COUNT(DISTINCT client.client_id) AS female_customers FROM client JOIN district ON client.district_id = district.district_id JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND district.A2 = 'Slokolov';
SELECT t.account_id FROM trans t WHERE strftime('%Y', t.date) = '1995'
SELECT DISTINCT account.account_id FROM account JOIN trans ON account.account_id = trans.account_id WHERE account.date < '1997-01-01' AND trans.balance > 3000;
SELECT client_id FROM disp WHERE disp_id = ( SELECT disp_id FROM card WHERE issued = '1994-03-03' );
SELECT a.date AS account_opened_date FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.amount = 840 AND t.date = '1998-10-14';
SELECT a.district_id FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.date = '1994-08-25';
SELECT MAX(t.amount) AS biggest_transaction FROM card c JOIN disp d ON c.disp_id = d.disp_id JOIN trans t ON d.account_id = t.account_id WHERE c.issued = '1996-10-21';
SELECT gender FROM OldestClientInDistrict;
WITH BiggestLoanAccount AS ( SELECT l.account_id FROM loan l WHERE l.amount = (SELECT MAX(amount) FROM loan) ), FirstTransaction AS ( SELECT t.account_id, MIN(t.date) AS first_trans_date FROM trans t WHERE t.account_id IN (SELECT account_id FROM BiggestLoanAccount) GROUP BY t.account_id ) SELECT t.amount FROM trans t JOIN FirstTransaction ft ON t.account_id = ft.account_id AND t.date = ft.first_trans_date;
SELECT COUNT(*) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN district dist ON c.district_id = dist.district_id WHERE dist.A2 = 'Jesenik' AND c.gender = 'F';
SELECT disp.disp_id FROM trans JOIN disp ON trans.account_id = disp.account_id WHERE trans.amount = 5100 AND trans.date = '1998-09-02';
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Litomerice' AND strftime('%Y', account.date) = '1996';
SELECT d.A2 AS district_name FROM client c JOIN disp di ON c.client_id = di.client_id JOIN account a ON di.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date = '1976-01-29';
SELECT c.birth_date FROM loan l JOIN disp d ON l.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE l.amount = 98832 AND l.date = '1996-01-03';
SELECT account.account_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'Prague' ORDER BY account.date LIMIT 1;
WITH biggest_district AS ( SELECT district_id FROM district WHERE A3 = 'South Bohemia' ORDER BY A4 DESC LIMIT 1 ) SELECT ( (SELECT COUNT(*) FROM client WHERE gender = 'M' AND district_id = (SELECT district_id FROM biggest_district)) * 1.0 / (SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM biggest_district)) ) * 100 AS male_percentage
WITH loan_account AS ( SELECT account_id FROM loan WHERE date = '1993-07-05' LIMIT 1 
SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) * 100.0 / SUM(amount)) AS percentage_paid_no_issue FROM loan;
SELECT (SELECT COUNT(*) FROM running_loans) * 100.0 / (SELECT COUNT(*) FROM all_loans_under_100000) AS percentage_of_running_loans
SELECT acc.account_id, dist.A2 AS district_name, dist.A3 AS district_region FROM account acc JOIN trans t ON acc.account_id = t.account_id JOIN district dist ON acc.district_id = dist.district_id WHERE strftime('%Y', acc.date) = '1993' AND t.k_symbol = 'POPLATEK PO OBRATU';
SELECT a.account_id, a.frequency FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN district di ON c.district_id = di.district_id WHERE di.A5 = 'east Bohemia' AND strftime('%Y', a.date) BETWEEN '1995' AND '2000' AND d.type = 'OWNER';
SELECT account.account_id, account.date FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Prachatice';
SELECT d.A2 AS district, d.A3 AS region FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.loan_id = 4990;
SELECT l.account_id, d.A2 AS district, d.A3 AS region FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.amount > 300000;
SELECT loan.loan_id, district.A3 AS district, district.A11 AS average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE loan.duration = 60;
SELECT d.A5 AS district_name, ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_rate_increment_percentage FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp dp ON a.account_id = dp.account_id JOIN client c ON dp.client_id = c.client_id JOIN district d ON c.district_id = d.district_id WHERE l.status = 'D';
SELECT 100.0 * COUNT(CASE WHEN acc.district_id = d.district_id THEN 1 END) / COUNT(*) AS decin_percentage FROM account acc JOIN district d ON acc.district_id = d.district_id WHERE strftime('%Y', acc.date) = '1993' AND d.A2 = 'Decin';
SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE';
SELECT d.A2 AS district_name, COUNT(*) AS female_count FROM client c JOIN district d ON c.district_id = d.district_id JOIN disp dp ON c.client_id = dp.client_id WHERE c.gender = 'F' GROUP BY d.district_id ORDER BY female_count DESC LIMIT 10;
SELECT d.A2 AS district_name, t.amount FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' ORDER BY t.amount DESC LIMIT 10;
SELECT COUNT(account_id) AS accounts_without_credit_card FROM temp_accounts WHERE account_id NOT IN (SELECT account_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id);
SELECT district.A3 AS district_name, COUNT(*) AS active_loan_count FROM loan JOIN account ON loan.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE loan.status IN ('C', 'D') GROUP BY district.district_id ORDER BY active_loan_count DESC LIMIT 1;
SELECT AVG(l.amount) AS average_loan_amount FROM client c JOIN disp d ON c.client_id = d.client_id JOIN loan l ON d.account_id = l.account_id WHERE c.gender = 'M';
SELECT A2 AS district_name, A5 AS branch_location FROM district WHERE A13 = (SELECT MAX(A13) FROM district);
SELECT COUNT(*) AS num_accounts FROM account WHERE district_id = (SELECT district_id FROM MaxCrimesDistrict);
SELECT COUNT(DISTINCT t.account_id) FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.operation = 'VYBER KARTOU' AND t.balance < 0 AND a.frequency = 'POPLATEK MESICNE';
SELECT COUNT(*) FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.amount >= 250000 AND loan.status = 'A' AND loan.date BETWEEN '1995-01-01' AND '1997-12-31' AND account.frequency = 'POPLATEK MESICNE';
SELECT COUNT(DISTINCT account.account_id) AS running_account_count FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.status IN ('C', 'D') AND district.A2 = '1';
WITH RankedDistricts AS ( SELECT district_id, A15, DENSE_RANK() OVER (ORDER BY A15 DESC) as rank FROM district ), SecondHighestCrimeDistrict AS ( SELECT district_id FROM RankedDistricts WHERE rank = 2 ) SELECT COUNT(*) AS male_clients_count FROM client WHERE gender = 'M' AND district_id IN (SELECT district_id FROM SecondHighestCrimeDistrict);
SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'disponent';
SELECT COUNT(*) FROM account WHERE district_id = ( SELECT district_id FROM district WHERE A2 = 'Pisek' );
SELECT DISTINCT d.A2 AS district_name FROM trans t JOIN account a ON t.account_id = a.account_id JOIN disp d2 ON a.account_id = d2.account_id JOIN client c ON d2.client_id = c.client_id JOIN district d ON c.district_id = d.district_id WHERE t.amount > 10000 AND CAST(strftime('%Y', t.date) AS INTEGER) = 1997;
SELECT DISTINCT o.account_id FROM `order` o JOIN account a ON o.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE o.k_symbol = 'SIPO' AND d.A2 = 'Pisek';
SELECT disp.account_id FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE card.type IN ('gold', 'junior') GROUP BY disp.account_id HAVING COUNT(DISTINCT card.type) = 2;
SELECT strftime('%Y-%m', date) as month, AVG(amount) as average_amount_per_month FROM trans WHERE operation = 'VYBER KARTOU' AND strftime('%Y', date) = '2021' GROUP BY month;
SELECT DISTINCT a.account_id FROM monthly_expenditure me JOIN average_monthly_expenditure ame ON me.month = ame.month JOIN disp d ON d.account_id = me.account_id JOIN client c ON c.client_id = d.client_id WHERE me.total_spent < ame.avg_spent;
SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN card cr ON d.disp_id = cr.disp_id JOIN loan l ON a.account_id = l.account_id WHERE c.gender = 'F' AND d.type = 'OWNER';
SELECT COUNT(DISTINCT disp.account_id) AS female_clients_in_south_bohemia FROM client JOIN district ON client.district_id = district.district_id JOIN disp ON client.client_id = disp.client_id WHERE client.gender = 'F' AND district.A3 = 'south Bohemia';
SELECT account.account_id FROM account JOIN district ON account.district_id = district.district_id JOIN disp ON account.account_id = disp.account_id WHERE district.A2 = 'Tabor' AND disp.type = 'OWNER';
SELECT DISTINCT d.type FROM disp AS d JOIN account AS a ON d.account_id = a.account_id JOIN district AS dis ON a.district_id = dis.district_id WHERE d.type != 'OWNER' AND dis.A11 > 8000 AND dis.A11 <= 9000;
SELECT COUNT(DISTINCT trans.account_id) AS account_count FROM trans JOIN account ON trans.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'North Bohemia' AND trans.bank = 'AB';
SELECT DISTINCT district.A2 FROM trans JOIN account ON trans.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE trans.type = 'VYDAJ';
SELECT AVG(d.A15) as avg_crimes_in_1995 FROM district d JOIN account a ON d.district_id = a.district_id WHERE d.A15 > 4000 AND strftime('%Y', a.date) >= '1997';
SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic' AND disp.type = 'OWNER';
SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE district.A2 = 'Hl.m. Praha' AND client.gender = 'M';
SELECT (CAST(SUM(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 ELSE 0 END) AS REAL) / CAST(COUNT(*) AS REAL)) * 100 AS percent_of_gold_issued_before_1998 FROM card;
WITH LargestLoan AS ( SELECT account_id, MAX(amount) AS max_amount FROM loan ) SELECT c.client_id, c.gender, c.birth_date FROM disp d JOIN client c ON d.client_id = c.client_id JOIN LargestLoan ll ON d.account_id = ll.account_id WHERE d.type = 'OWNER';
SELECT d.A15 FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.account_id = 532;
SELECT a.district_id FROM `order` o JOIN account a ON o.account_id = a.account_id WHERE o.order_id = 33333;
SELECT t.* FROM trans t JOIN disp d ON t.account_id = d.account_id WHERE d.client_id = 3356 AND t.operation = 'VYBER';
SELECT COUNT(*) FROM account JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;
SELECT card.type FROM disp JOIN card ON disp.disp_id = card.disp_id WHERE disp.client_id = 13539;
SELECT district.A3 AS region FROM client JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541;
SELECT d.district_id, COUNT(l.loan_id) AS loan_count FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY loan_count DESC LIMIT 1;
SELECT c.client_id, c.gender, c.birth_date, c.district_id FROM `order` o JOIN disp d ON o.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE o.order_id = 32423;
SELECT t.* FROM trans t JOIN account a ON t.account_id = a.account_id WHERE a.district_id = 5;
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Jesenik';
SELECT DISTINCT disp.client_id FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'junior' AND card.issued >= '1997-01-01';
WITH high_salary_districts AS ( SELECT district_id FROM district WHERE A11 > 10000 ), clients_in_high_salary_districts AS ( SELECT c.client_id, c.gender FROM client c JOIN high_salary_districts d ON c.district_id = d.district_id ) SELECT (SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_of_women FROM clients_in_high_salary_districts;
WITH male_loans AS ( SELECT l.amount, strftime('%Y', l.date) as year FROM client c INNER JOIN disp d ON c.client_id = d.client_id INNER JOIN account a ON d.account_id = a.account_id INNER JOIN loan l ON a.account_id = l.account_id WHERE c.gender = 'M' ), amounts_by_year AS ( SELECT year, SUM(amount) as total_amount FROM male_loans WHERE year IN ('1996', '1997') GROUP BY year ) SELECT (j97.total_amount - j96.total_amount) / CAST(j96.total_amount AS REAL) * 100 AS growth_rate FROM (SELECT * FROM amounts_by_year WHERE year = '1997') j97, (SELECT * FROM amounts_by_year WHERE year = '1996') j96;
SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';
SELECT (SELECT A16 FROM district WHERE A3 = 'North Bohemia') - (SELECT A16 FROM district WHERE A3 = 'East Bohemia') AS crime_difference;
SELECT COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type IN ('owner', 'disponent');
SELECT COUNT(*) FROM trans WHERE account_id = 3 AND k_symbol = 'ACCOUNT_STATEMENT_SYMBOL';
SELECT strftime('%Y', birth_date) AS birth_year FROM client JOIN disp ON client.client_id = disp.client_id WHERE disp.account_id = 130;
SELECT COUNT(DISTINCT account.account_id) AS account_count FROM account JOIN disp ON account.account_id = disp.account_id WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK PO OBRATU';
SELECT SUM(l.amount) AS total_debt_amount, GROUP_CONCAT(l.status) AS payment_statuses FROM client c JOIN disp d ON c.client_id = d.client_id JOIN loan l ON d.account_id = l.account_id WHERE c.client_id = 992;
SELECT account_id FROM disp WHERE client_id = 4;
SELECT c.type FROM client cl JOIN disp d ON cl.client_id = d.client_id JOIN card c ON d.disp_id = c.disp_id WHERE cl.client_id = 9;
SELECT SUM(t.amount) AS total_paid FROM disp d JOIN trans t ON d.account_id = t.account_id WHERE d.client_id = 617 AND strftime('%Y', t.date) = '1998' AND t.type = 'debit';
SELECT c.client_id, c.birth_date FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN district dis ON c.district_id = dis.district_id WHERE strftime('%Y', c.birth_date) BETWEEN '1983' AND '1987' AND dis.A5 = 'East Bohemia';
SELECT c.client_id FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE c.gender = 'F' ORDER BY l.amount DESC LIMIT 3;
SELECT COUNT(DISTINCT client.client_id) AS male_customers_count FROM client JOIN disp ON client.client_id = disp.client_id JOIN trans ON disp.account_id = trans.account_id WHERE client.gender = 'M' AND strftime('%Y', client.birth_date) BETWEEN '1974' AND '1976' AND trans.k_symbol = 'SIPO' AND trans.amount > 4000;
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Beroun' AND date > '1996-12-31';
SELECT COUNT(DISTINCT client.client_id) FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior';
WITH prague_districts AS ( SELECT district_id FROM district WHERE A3 LIKE '%Prague%' ), prague_accounts AS ( SELECT a.account_id FROM account a JOIN prague_districts pd ON a.district_id = pd.district_id ), prague_clients AS ( SELECT DISTINCT c.client_id, c.gender FROM client c JOIN disp d ON c.client_id = d.client_id JOIN prague_accounts pa ON d.account_id = pa.account_id ) SELECT (COUNT(CASE WHEN pc.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage FROM prague_clients pc;
SELECT (COUNT(CASE WHEN gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_male FROM weekly_clients;
SELECT COUNT(DISTINCT client.client_id) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'User';
SELECT l.account_id, MIN(l.amount) AS min_approved_amount FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.duration > 24 AND l.status = 'approved' AND a.date < '1997-01-01' GROUP BY l.account_id HAVING l.amount = min_approved_amount;
SELECT a.account_id FROM account a JOIN disp d ON a.account_id = d.account_id JOIN OldestClients oc ON d.client_id = oc.client_id JOIN LowestSalaryDistrict lsd ON oc.district_id = lsd.district_id WHERE d.type = 'OWNER';
SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'East Bohemia' AND strftime('%Y', client.birth_date) = '1920';
SELECT COUNT(*) FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.duration = 24 AND account.frequency = 'POPLATEK TYDNE';
SELECT AVG(l.amount) AS average_loan_amount FROM loan l JOIN account a ON l.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE l.status = 'C' AND t.k_symbol = 'POPLATEK PO OBRATU';
SELECT c.client_id, c.district_id FROM client c JOIN disp d ON c.client_id = d.client_id WHERE d.type = 'owner';
SELECT c.client_id, (2023 - CAST(SUBSTR(c.birth_date, 1, 4) AS INTEGER)) AS age FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id JOIN loan l ON d.account_id = l.account_id WHERE ca.type = 'gold';
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1;
SELECT COUNT(DISTINCT m.molecule_id) AS num_non_carcinogenic_molecules_with_cl FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '-' AND a.element = 'cl';
WITH SingleBondedMolecules AS ( SELECT molecule_id FROM bond WHERE bond_type = '-' GROUP BY molecule_id HAVING COUNT(*) = (SELECT COUNT(*) FROM bond WHERE molecule_id = SingleBondedMolecules.molecule_id) ), OxygenAtomCounts AS ( SELECT a.molecule_id, COUNT(*) AS oxygen_count FROM atom a JOIN SingleBondedMolecules sbm ON a.molecule_id = sbm.molecule_id WHERE a.element = 'o' GROUP BY a.molecule_id ) SELECT AVG(oxygen_count) AS average_oxygen_atoms FROM OxygenAtomCounts;
SELECT AVG(single_bond_count) AS average_single_bonds FROM ( SELECT m.molecule_id, COUNT(b.bond_id) AS single_bond_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+' AND b.bond_type = '-' GROUP BY m.molecule_id ) AS carcinogenic_single_bonds;
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'na' AND m.label = '-';
SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '+';
WITH DoubleBondMolecules AS ( SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '=' ), CarbonAtomCounts AS ( SELECT a.molecule_id, COUNT(*) AS num_carbon_atoms FROM atom a JOIN DoubleBondMolecules dbm ON a.molecule_id = dbm.molecule_id WHERE a.element = 'c' GROUP BY a.molecule_id ), TotalAtomCounts AS ( SELECT a.molecule_id, COUNT(*) AS total_atoms FROM atom a JOIN DoubleBondMolecules dbm ON a.molecule_id = dbm.molecule_id GROUP BY a.molecule_id ) SELECT (CAST(SUM(cac.num_carbon_atoms) AS REAL) / SUM(tac.total_atoms)) * 100 AS carbon_percentage FROM CarbonAtomCounts cac JOIN TotalAtomCounts tac ON cac.molecule_id = tac.molecule_id;
SELECT COUNT(*) FROM bond WHERE bond_type = '#';
SELECT COUNT(*) FROM atom WHERE element IS NOT NULL AND element != 'br';
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';
SELECT DISTINCT molecule_id FROM atom WHERE element = 'si';
SELECT DISTINCT a.element FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE c.bond_id = 'TR004_8_9';
SELECT DISTINCT a.element FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE b.bond_type = ' = ';
SELECT m.label, COUNT(a.atom_id) AS hydrogen_count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'h' GROUP BY m.label ORDER BY hydrogen_count DESC LIMIT 1;
SELECT DISTINCT b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'te';
SELECT a1.atom_id AS atom1, a2.atom_id AS atom2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '-';
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '-';
SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;
SELECT bond.bond_type FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20';
SELECT DISTINCT molecule_id FROM atom WHERE element = 'sn';
SELECT COUNT(DISTINCT a.atom_id) AS atom_count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN bond b ON b.molecule_id = m.molecule_id WHERE a.element IN ('i', 's') AND b.bond_type = '-';
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';
SELECT DISTINCT c.atom_id2 FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE a.molecule_id = 'TR181';
WITH CarcinogenicMolecules AS ( SELECT molecule_id FROM molecule WHERE label = '+' ), FluorineMolecules AS ( SELECT DISTINCT atom.molecule_id FROM atom JOIN CarcinogenicMolecules ON atom.molecule_id = CarcinogenicMolecules.molecule_id WHERE atom.element = 'f' ) SELECT (1.0 - CAST(COUNT(DISTINCT FluorineMolecules.molecule_id) AS REAL) / COUNT(DISTINCT CarcinogenicMolecules.molecule_id)) * 100 AS percent_non_fluorine FROM CarcinogenicMolecules LEFT JOIN FluorineMolecules ON CarcinogenicMolecules.molecule_id = FluorineMolecules.molecule_id;
WITH CarcinogenicMolecules AS ( SELECT m.molecule_id FROM molecule m WHERE m.label = '+' ), TripleBondsInCarcinogenicMolecules AS ( SELECT b.bond_id FROM bond b JOIN CarcinogenicMolecules cm ON b.molecule_id = cm.molecule_id WHERE b.bond_type = '#' ), TotalBondsInCarcinogenicMolecules AS ( SELECT b.bond_id FROM bond b JOIN CarcinogenicMolecules cm ON b.molecule_id = cm.molecule_id ) SELECT 100.0 * COUNT(DISTINCT tb.bond_id) / COUNT(DISTINCT tbonds.bond_id) AS percentage FROM TripleBondsInCarcinogenicMolecules tb, TotalBondsInCarcinogenicMolecules tbonds;
SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element LIMIT 3;
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE c.bond_id = 'TR001_2_6' AND b.molecule_id = 'TR001';
SELECT (SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END)) AS difference FROM molecule
SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR_000_2_5';
SELECT DISTINCT c2.bond_id FROM connected AS c1 JOIN connected AS c2 ON c1.atom_id2 = c2.atom_id2 WHERE c1.atom_id2 = 'TR000_2' AND c1.atom_id != c2.atom_id;
SELECT DISTINCT m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = ' = ' ORDER BY m.label LIMIT 5;
SELECT (SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) * 1.0 / COUNT(bond_id)) * 100 AS percent_double_bonds FROM bond WHERE molecule_id = 'TR008';
SELECT (CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(molecule_id)) * 100 AS percent FROM molecule;
SELECT (SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) * 100.0 / COUNT(atom_id)) AS hydrogen_percentage FROM atom WHERE molecule_id = 'TR206';
SELECT DISTINCT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON (c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id) WHERE a.molecule_id = 'TR000';
SELECT m.label, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.molecule_id = 'TR060';
SELECT bond_type, COUNT(*) as bond_count FROM bond WHERE molecule_id = 'TR018' GROUP BY bond_type ORDER BY bond_count DESC LIMIT 1;
SELECT DISTINCT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE m.label = '-' AND b.bond_type = '-' ORDER BY m.label LIMIT 3;
SELECT bond_type FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_type ASC LIMIT 2;
SELECT COUNT(*) FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE (connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12') AND bond.bond_id LIKE 'TR009_%';
SELECT COUNT(DISTINCT molecule.molecule_id) AS count_of_carcinogenic_bromine_molecules FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'br';
SELECT b.bond_type, c.atom_id, c.atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_id = 'TR001_6_9';
SELECT m.molecule_id, m.label, CASE WHEN m.label = '+' THEN 'Carcinogenic' ELSE 'Not Carcinogenic' END AS carcinogenic_status FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_10';
SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#';
SELECT COUNT(*) FROM connected WHERE atom_id LIKE '%_19' OR atom_id2 LIKE '%_19';
SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR004';
SELECT COUNT(*) FROM molecule WHERE label = '-';
SELECT DISTINCT mo.molecule_id FROM atom a JOIN molecule mo ON a.molecule_id = mo.molecule_id WHERE SUBSTRING(a.atom_id, 7, 2) BETWEEN '21' AND '25' AND mo.label = '+';
SELECT DISTINCT b.bond_id FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE (a1.element = 'p' AND a2.element = 'n') OR (a1.element = 'n' AND a2.element = 'p');
SELECT m.molecule_id, m.label, CASE WHEN m.label = '+' THEN 'Carcinogenic' ELSE 'Not Carcinogenic' END AS status FROM molecule m JOIN MoleculeWithMaxDoubleBonds mwmdb ON m.molecule_id = mwmdb.molecule_id;
WITH iodine_atoms AS ( SELECT atom_id FROM atom WHERE element = 'i' ), iodine_bonds AS ( SELECT c.atom_id, COUNT(c.bond_id) AS bond_count FROM connected c JOIN iodine_atoms ia ON c.atom_id = ia.atom_id GROUP BY c.atom_id ) SELECT AVG(bond_count) AS average_bonds_per_iodine_atom FROM iodine_bonds;
SELECT b.bond_type, c.bond_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON b.bond_id = c.bond_id WHERE CAST(SUBSTR(a.atom_id, 7, 2) AS INTEGER) = 45;
SELECT DISTINCT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected) AND atom_id NOT IN (SELECT atom_id2 FROM connected);
SELECT DISTINCT c.atom_id, c.atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '#' AND b.molecule_id = 'TR447';
SELECT DISTINCT a.element FROM connected c JOIN atom a ON (c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id) WHERE c.bond_id = 'TR144_8_19';
SELECT m.molecule_id, m.label, COUNT(b.bond_id) AS double_bond_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+' AND b.bond_type = '=' GROUP BY m.molecule_id, m.label ORDER BY double_bond_count DESC LIMIT 1;
SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' ) GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;
SELECT DISTINCT c.atom_id2 FROM connected c JOIN lead_atoms la ON c.atom_id = la.atom_id;
SELECT DISTINCT atom.element FROM connected JOIN atom ON (connected.atom_id = atom.atom_id OR connected.atom_id2 = atom.atom_id) WHERE connected.bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '#' );
WITH ElementCombinations AS ( SELECT a1.element AS element1, a2.element AS element2, COUNT(*) AS combination_count FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id GROUP BY a1.element, a2.element ) SELECT 100.0 * MAX(ec.combination_count) / t.total_bonds AS percentage FROM ElementCombinations ec, (SELECT COUNT(*) AS total_bonds FROM bond) t;
WITH SingleBonds AS ( SELECT b.bond_id, b.molecule_id FROM bond b WHERE b.bond_type = '-' ), CarcinogenicSingleBonds AS ( SELECT sb.bond_id FROM SingleBonds sb INNER JOIN molecule m ON sb.molecule_id = m.molecule_id WHERE m.label = '+' ) SELECT CAST(COUNT(csb.bond_id) AS REAL) / CAST(COUNT(sb.bond_id) AS REAL) AS carcinogenic_proportion FROM SingleBonds sb LEFT JOIN CarcinogenicSingleBonds csb ON sb.bond_id = csb.bond_id;
SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h');
SELECT c.atom_id2 FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 's';
SELECT DISTINCT b.bond_type FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a1.element = 'sn' OR a2.element = 'sn';
SELECT COUNT(DISTINCT a.element) FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '-';
SELECT COUNT(DISTINCT a.atom_id) AS total_atoms FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND (a.element = 'p' OR a.element = 'br');
SELECT bond.bond_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+';
SELECT DISTINCT m.molecule_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-' AND m.label = '-';
WITH SingleBondAtoms AS ( SELECT a.atom_id, a.element FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE b.bond_type = '-' ), ChlorineCount AS ( SELECT COUNT(*) AS chlorine_atoms FROM SingleBondAtoms WHERE element = 'cl' ), TotalAtomCount AS ( SELECT COUNT(*) AS total_atoms FROM SingleBondAtoms ) SELECT (SELECT chlorine_atoms FROM ChlorineCount) * 1.0 / (SELECT total_atoms FROM TotalAtomCount) * 100 AS chlorine_percentage
SELECT molecule_id, label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');
SELECT molecule_id FROM molecule WHERE label = '-';
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+';
SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR050';
SELECT a1.element AS element1, a2.element AS element2 FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR001_10_11';
SELECT COUNT(DISTINCT c.bond_id) FROM connected c JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element = 'i';
SELECT m.label, COUNT(*) AS molecule_count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'ca' GROUP BY m.label ORDER BY COUNT(*) DESC;
SELECT a.atom_id, a.element FROM connected c JOIN atom a ON (c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id) WHERE c.bond_id = 'TR001_1_8';
SELECT DISTINCT b.molecule_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id JOIN atom a ON b.molecule_id = a.molecule_id WHERE b.bond_type = '#' AND a.element = 'c' AND m.label = '-' LIMIT 2;
SELECT (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) * 1.0 / COUNT(a.atom_id)) * 100 AS percentage_cl_chlorine FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+';
SELECT element FROM atom WHERE molecule_id = 'TR001';
SELECT molecule_id FROM bond WHERE bond_type = ' = ';
SELECT c.atom_id AS first_atom_id, c.atom_id2 AS second_atom_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';
SELECT DISTINCT a.element FROM connected c JOIN atom a ON (c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id) WHERE c.bond_id = 'TR005_16_26' AND a.element IN ('cl', 'br', 'pb', 'sn', 'te', 'i');
SELECT COUNT(DISTINCT b.molecule_id) AS non_carcinogenic_single_bonds FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-' AND m.label = '-';
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_10_11';
SELECT bond.bond_id, CASE WHEN molecule.label = '+' THEN 'Carcinogenic' WHEN molecule.label = '-' THEN 'Non-carcinogenic' ELSE 'Unknown' END AS carcinogenic_status FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#';
SELECT a.element, COUNT(*) AS tally FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND substr(a.atom_id, 7, 1) = '4' GROUP BY a.element;
SELECT CAST(hydrogen_atoms AS REAL) / total_atoms AS hydrogen_ratio, label FROM MoleculeAtoms, molecule WHERE molecule.molecule_id = 'TR006';
SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca' AND m.label = '+';
SELECT DISTINCT bond.bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'te';
SELECT DISTINCT a1.element, a2.element FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR001_10_11';
WITH TripleBondMolecules AS ( SELECT DISTINCT b.molecule_id FROM bond b WHERE b.bond_type = '#' ) SELECT (COUNT(tb.molecule_id) * 100.0 / (SELECT COUNT(*) FROM molecule)) AS percentage_of_triple_bond FROM TripleBondMolecules tb;
WITH all_bonds AS ( SELECT bond_id FROM bond WHERE molecule_id = 'TR047' ), double_bonds AS ( SELECT bond_id FROM bond WHERE molecule_id = 'TR047' AND bond_type = ' = ' ) SELECT (CAST(COUNT(double_bonds.bond_id) AS FLOAT) / COUNT(all_bonds.bond_id)) * 100 AS percent FROM all_bonds LEFT JOIN double_bonds ON all_bonds.bond_id = double_bonds.bond_id;
SELECT m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_1';
SELECT label FROM molecule WHERE molecule_id = 'TR151';
SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR151' AND element IN ('pb', 'sn', 'hg', 'as', 'cd');
SELECT COUNT(*) FROM molecule WHERE label = '+';
SELECT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND CAST(SUBSTR(m.molecule_id, 3, 3) AS INTEGER) > 10 AND CAST(SUBSTR(m.molecule_id, 3, 3) AS INTEGER) < 50;
SELECT COUNT(*) AS num_atoms FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';
SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = ' = ' AND m.label = '+';
SELECT COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'h';
SELECT DISTINCT a.molecule_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'TR00_1' AND b.bond_id = 'TR00_1_2';
SELECT DISTINCT molecule_id FROM atom WHERE element = 'c';
WITH CarcinogenicMolecules AS ( SELECT DISTINCT molecule_id FROM molecule WHERE label = '+' ), HydrogenInCarcinogenic AS ( SELECT DISTINCT a.molecule_id FROM atom a JOIN CarcinogenicMolecules cm ON a.molecule_id = cm.molecule_id WHERE a.element = 'h' ) SELECT (COUNT(h.molecule_id) * 100.0 / COUNT(cm.molecule_id)) AS percentage FROM CarcinogenicMolecules cm LEFT JOIN HydrogenInCarcinogenic h ON cm.molecule_id = h.molecule_id;
SELECT label FROM molecule WHERE molecule_id = 'TR124';
SELECT atom_id FROM atom WHERE molecule_id = 'TR186';
SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19';
SELECT atom_id FROM connected WHERE bond_id = 'TR001_2_4' UNION SELECT atom_id2 FROM connected WHERE bond_id = 'TR001_2_4' );
SELECT m.label
SELECT m.molecule_id, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+';
SELECT b.bond_id, a1.atom_id AS atom1, a2.atom_id AS atom2, m.label AS molecule_label FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-';
SELECT DISTINCT m.molecule_id, a.element FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a ON m.molecule_id = a.molecule_id WHERE b.bond_type = '#' ORDER BY m.molecule_id, a.element;
SELECT DISTINCT a.element FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE c.bond_id = 'TR000_2_3' UNION SELECT DISTINCT a2.element FROM connected c JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR000_2_3';
SELECT COUNT(DISTINCT bond_id) AS bond_count FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'cl') OR atom_id2 IN (SELECT atom_id FROM atom WHERE element = 'cl');
SELECT atom.atom_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR346';
SELECT COUNT(*) AS total_molecules_with_double_bonds
SELECT molecule_id FROM bond WHERE molecule_id NOT IN ( SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '=' );
SELECT m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_2_4';
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005';
SELECT COUNT(*) FROM bond WHERE bond_type = '-';
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' AND m.label = '+';
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'c' AND m.label = '-';
WITH carcinogenic_molecules AS ( SELECT m.molecule_id FROM molecule m WHERE m.label = '+' ), chlorine_containing_molecules AS ( SELECT DISTINCT a.molecule_id FROM atom a WHERE a.element = 'cl' ) SELECT ( COUNT(DISTINCT cm.molecule_id) * 100.0 / ( SELECT COUNT(DISTINCT molecule_id) FROM carcinogenic_molecules ) ) AS percentage FROM carcinogenic_molecules cm JOIN chlorine_containing_molecules ccm ON cm.molecule_id = ccm.molecule_id;
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';
SELECT COUNT(DISTINCT a.element) AS element_count FROM connected c JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE c.bond_id = 'TR001_3_4';
SELECT b.bond_type FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE c.atom_id = 'TR000_1' AND c.atom_id2 = 'TR000_2';
SELECT a1.molecule_id FROM atom a1 JOIN atom a2 ON a1.molecule_id = a2.molecule_id WHERE a1.atom_id = 'TR000_2' AND a2.atom_id = 'TR000_4';
SELECT element FROM atom WHERE atom_id = 'TR000_1';
SELECT label FROM molecule WHERE molecule_id = 'TR000';
SELECT (CAST(SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(b.bond_id)) * 100 AS percentage_single_bonds FROM bond b;
SELECT COUNT(DISTINCT molecule.molecule_id) FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'n';
SELECT DISTINCT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 's' AND b.bond_type = ' = ';
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '-' GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5;
SELECT DISTINCT a.element FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON (c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id) WHERE b.bond_type = '=' AND b.molecule_id = 'TR024';
SELECT m.molecule_id, m.label, COUNT(a.atom_id) AS atom_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' GROUP BY m.molecule_id, m.label ORDER BY atom_count DESC LIMIT 1;
WITH HydrogenTripleBonds AS ( SELECT DISTINCT mol.molecule_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule mol ON b.molecule_id = mol.molecule_id WHERE a.element = 'h' AND b.bond_type = '#' ), CarcinogenicMolecules AS ( SELECT molecule_id FROM molecule WHERE label = '+' ) SELECT (COUNT(m.molecule_id) * 100.0) / (SELECT COUNT(*) FROM molecule) AS Percentage FROM HydrogenTripleBonds htb JOIN CarcinogenicMolecules cm ON htb.molecule_id = cm.molecule_id;
SELECT COUNT(*) FROM molecule WHERE label = '+';
SELECT COUNT(DISTINCT b.molecule_id) FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-' AND b.molecule_id BETWEEN 'TR004' AND 'TR010';
SELECT molecule_id FROM molecule WHERE label = 'TR008';
SELECT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR004_7' AND m.label = '-';
SELECT COUNT(DISTINCT a.molecule_id) AS total_double_bonded_oxygen_molecules FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'o' AND b.bond_type = ' = ';
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule AS m JOIN bond AS b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '-';
SELECT DISTINCT bond_type FROM bond WHERE molecule_id = 'TR016';
SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND b.bond_type = '=' AND m.label = 'TR012';
SELECT a.atom_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND a.element = 'o';
SELECT name FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT name FROM cards WHERE borderColor = 'borderless' AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL);
SELECT name FROM cards WHERE faceConvertedManaCost = ( SELECT MAX(faceConvertedManaCost) FROM cards );
SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100;
SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator';
SELECT c.name, l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';
SELECT c.id, c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE (c.power = '*' OR c.power IS NULL) AND l.format = 'commander' AND l.status = 'Legal';
SELECT c.name AS card_name, r.text AS ruling_text, CASE WHEN c.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS has_missing_or_degraded_properties FROM cards c LEFT JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniele';
SELECT r.date, r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';
WITH RulingCounts AS ( SELECT c.name AS card_name, c.artist, c.isPromo, COUNT(r.uuid) AS ruling_count FROM cards c JOIN rulings r ON c.uuid = r.uuid GROUP BY c.uuid ) SELECT card_name, artist, isPromo FROM RulingCounts ORDER BY ruling_count DESC LIMIT 1;
SELECT fd.language FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.name = 'Annul' AND c.number = '29';
SELECT DISTINCT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Japanese';
SELECT (COUNT(CASE WHEN language = 'Chinese Simplified' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM foreign_data;
SELECT s.name AS set_name, s.totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian';
SELECT COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd';
SELECT keywords FROM cards WHERE name = 'Angel of Mercy';
SELECT COUNT(*) FROM cards WHERE power = '*';
SELECT promoTypes FROM cards WHERE name = 'Duress';
SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen';
SELECT originalType FROM cards WHERE name = "Ancestor's Chosen";
SELECT language FROM set_translations WHERE setCode = 'SET123';
SELECT COUNT(*) FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'restricted' AND cards.isTextless = 0;
SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Condemn';
SELECT COUNT(*) FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1;
SELECT status FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Cloudchaser Eagle');
SELECT type FROM cards WHERE name = 'Benalish Knight';
SELECT l.format, l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.name = 'Benalish Knight';
SELECT DISTINCT c.artist FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE fd.language = 'Phyrexian';
SELECT (CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) / COUNT(id)) * 100 AS percentage_borderless FROM cards;
SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1;
SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.borderColor = 'borderless' AND foreign_data.language = 'Russian';
WITH story_spotlight_cards AS ( SELECT c.uuid FROM cards c WHERE c.isStorySpotlight = 1 ), french_story_spotlight_cards AS ( SELECT fd.uuid FROM foreign_data fd JOIN story_spotlight_cards ssc ON fd.uuid = ssc.uuid WHERE fd.language = 'French' ) SELECT (CAST(COUNT(fssc.uuid) AS REAL) / (SELECT COUNT(uuid) FROM story_spotlight_cards) * 100) AS percentage_of_french FROM french_story_spotlight_cards fssc;
SELECT COUNT(*) FROM cards WHERE toughness = '99';
SELECT name FROM cards WHERE artist = 'Aaron Boyd';
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';
SELECT id FROM cards WHERE convertedManaCost = 0;
SELECT DISTINCT layout FROM cards WHERE keywords LIKE '%flying%';
SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND (subtypes IS NULL OR subtypes != 'Angel');
SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
SELECT id FROM cards WHERE duelDeck = 'a';
SELECT edhrecRank FROM cards WHERE frameVersion = '2015';
SELECT DISTINCT c.artist FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE f.language = 'Chinese Simplified';
SELECT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.availability = 'paper' AND fd.language = 'Japanese' AND NOT EXISTS ( SELECT 1 FROM foreign_data fd2 WHERE c.uuid = fd2.uuid AND fd2.language != 'Japanese' );
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.borderColor = 'white';
SELECT l.uuid, fd.language FROM legalities l JOIN foreign_data fd ON l.uuid = fd.uuid WHERE l.format = 'legacy';
SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Beacon of Immortality';
SELECT COUNT(DISTINCT c.uuid) AS num_future_frame_cards, l.status AS legality_status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = 'future' GROUP BY l.status;
SELECT cards.name, cards.colors FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.code = 'OGW';
SELECT c.name AS card_name, f.language FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.setCode = '10E' AND c.convertedManaCost = 5;
SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType LIKE '%Creature - Elf%';
SELECT c.colors, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.id BETWEEN 1 AND 20;
SELECT c.id, c.name, c.colors, c.originalType, fd.language FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.originalType = 'Artifact' AND c.colors = 'B';
SELECT c.name FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'uncommon' ORDER BY r.date ASC LIMIT 3;
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NULL;
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability LIKE '%mtgo%' AND hand = '-1';
SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;
SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND (availability LIKE '%paper%' AND availability LIKE '%mtgo%');
SELECT SUM(convertedManaCost) AS total_mana_cost FROM cards WHERE artist = 'Rob Alexander';
SELECT DISTINCT types FROM cards WHERE availability = 'arena';
SELECT DISTINCT s.code FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid JOIN sets s ON c.setCode = s.code WHERE fd.language = 'Spanish';
SELECT 100.0 * COUNT(CASE WHEN hand = '+3' THEN 1 END) / COUNT(*) AS percentage FROM cards WHERE frameEffects = 'legendary';
WITH StorySpotlightWithText AS ( SELECT id FROM cards WHERE isStorySpotlight = 1 AND isTextless = 0 ), TotalStorySpotlight AS ( SELECT id FROM cards WHERE isStorySpotlight = 1 ) SELECT CAST(COUNT(StorySpotlightWithText.id) AS REAL) / COUNT(TotalStorySpotlight.id) * 100 AS percentage, StorySpotlightWithText.id AS card_id FROM StorySpotlightWithText JOIN TotalStorySpotlight ON StorySpotlightWithText.id = TotalStorySpotlight.id GROUP BY StorySpotlightWithText.id;
WITH SpanishCards AS ( SELECT DISTINCT fd.uuid, c.name FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE fd.language = 'Spanish' ), TotalCards AS ( SELECT COUNT(DISTINCT uuid) AS TotalCount FROM foreign_data ) SELECT sc.name, (COUNT(sc.uuid) * 100.0 / tc.TotalCount) AS Percentage FROM SpanishCards sc, TotalCards tc GROUP BY sc.name;
SELECT st.language FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.baseSetSize = 309;
SELECT COUNT(DISTINCT st.setCode) FROM set_translations AS st JOIN sets AS s ON st.setCode = s.code WHERE s.block = 'Commander' AND st.language = 'Portuguese (Brasil)';
SELECT cards.id FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types LIKE '%Creature%' AND legalities.status = 'legal';
SELECT DISTINCT CASE WHEN c.subtypes IS NOT NULL AND c.supertypes IS NOT NULL THEN c.supertypes || ' ' || c.subtypes WHEN c.subtypes IS NOT NULL THEN c.subtypes WHEN c.supertypes IS NOT NULL THEN c.supertypes ELSE NULL END AS types FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE fd.language = 'German' AND (c.subtypes IS NOT NULL OR c.supertypes IS NOT NULL);
SELECT COUNT(*) FROM cards WHERE power IS NULL AND (text LIKE '%when%' OR text LIKE '%whenever%' OR text LIKE '%at%');
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid JOIN rulings ON cards.uuid = rulings.uuid WHERE legalities.format = 'pre-modern' AND rulings.text = 'This is a triggered mana ability' AND cards.side IS NULL;
SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Erica Yang' AND c.availability = 'paper' AND l.format = 'pauper' AND l.status = 'legal';
SELECT artist FROM cards WHERE uuid = ( SELECT uuid FROM foreign_data WHERE text = "Das perfekte Gegenmittel zu einer dichten Formation" );
SELECT fd.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.type LIKE '%Creature%' AND c.layout = 'normal' AND c.borderColor = 'black' AND c.artist = 'Matthew D. Wilson' AND fd.language = 'French';
SELECT COUNT(DISTINCT cards.uuid) AS card_count FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'rare' AND rulings.date = '2009-01-10';
SELECT st.language FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.baseSetSize = 180 AND s.block = 'Ravnica';
WITH CommanderLegalCards AS ( SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'commander' AND l.status = 'legal' ) SELECT (COUNT(cl.id) FILTER (WHERE c.hasContentWarning = 0) * 100.0 / COUNT(cl.id)) AS percentage_without_content_warning FROM CommanderLegalCards cl JOIN cards c ON cl.id = c.id;
WITH cards_without_power AS ( SELECT c.uuid FROM cards c WHERE c.power IS NULL OR c.power = '*' ) SELECT (COUNT(f.id) * 100.0 / (SELECT COUNT(*) FROM cards_without_power)) AS percentage_french_cards_without_power FROM foreign_data f JOIN cards_without_power cwp ON f.uuid = cwp.uuid WHERE f.language = 'French';
WITH japanese_translated_sets AS ( SELECT setCode FROM set_translations WHERE language = 'Japanese' ), expansion_sets AS ( SELECT code FROM sets WHERE type = 'expansion' ), japanese_expansion_sets AS ( SELECT jts.setCode FROM japanese_translated_sets jts INNER JOIN expansion_sets es ON jts.setCode = es.code ) SELECT (COUNT(DISTINCT jes.setCode) * 100.0) / COUNT(DISTINCT jts.setCode) AS percentage_japanese_expansion FROM japanese_translated_sets jts LEFT JOIN japanese_expansion_sets jes ON jts.setCode = jes.setCode;
SELECT availability FROM cards WHERE artist = 'Daren Bader';
SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000 AND colors IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;
SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY name ASC LIMIT 3;
SELECT language FROM foreign_data WHERE multiverseid = 149934;
SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3;
SELECT (CAST(COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) AS REAL) / CAST(COUNT(*) AS REAL)) * 100 AS proportion_textless_normal FROM cards;
SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%';
SELECT name, code FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name LIMIT 3;
SELECT DISTINCT language FROM set_translations WHERE setCode = 'ARC';
SELECT s.name AS set_name, st.translation AS set_translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.id = 5;
SELECT st.language, s.type AS expansion_type FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.id = 206;
SELECT DISTINCT sets.name, sets.code FROM sets JOIN cards ON cards.setCode = sets.code JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY sets.name LIMIT 2;
SELECT DISTINCT s.id, s.code FROM sets s JOIN cards c ON s.code = c.setCode JOIN foreign_data fd ON c.uuid = fd.uuid WHERE s.isForeignOnly = 0 AND s.isFoilOnly = 1 AND fd.language = 'Japanese';
SELECT s.name AS set_name, s.baseSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Russian' ORDER BY s.baseSetSize DESC LIMIT 1;
WITH FilteredCards AS ( SELECT COUNT(*) AS filtered_count FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified' AND cards.isOnlineOnly = 1 ), TotalCards AS ( SELECT COUNT(*) AS total_count FROM cards ) SELECT (FilteredCards.filtered_count * 100.0) / TotalCards.total_count AS percentage FROM FilteredCards, TotalCards;
SELECT COUNT(DISTINCT s.code) AS count_of_japanese_only_sets FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Japanese' AND s.mtgoCode IS NULL AND NOT EXISTS ( SELECT 1 FROM set_translations st2 WHERE st2.setCode = s.code AND st2.language != 'Japanese' );
SELECT id FROM cards WHERE borderColor = 'black';
SELECT id FROM cards WHERE frameEffects = 'extendedart';
SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1;
SELECT st.language FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.id = 174;
SELECT name FROM sets WHERE code = 'ALL';
SELECT language FROM foreign_data WHERE uuid = (SELECT uuid FROM cards WHERE name = 'A Pedra Fellwar');
SELECT code FROM sets WHERE releaseDate = '2007-07-13';
SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage');
SELECT code FROM sets WHERE type = 'expansion';
SELECT foreign_data.name AS foreign_name, foreign_data.type FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'boros';
SELECT foreign_data.language, foreign_data.flavorText, foreign_data.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie';
SELECT (COUNT(CASE WHEN convertedManaCost = 10 THEN 1 END) * 1.0 / COUNT(*)) * 100 AS percentage FROM cards WHERE asciiName = 'Abyssal Horror';
SELECT code FROM sets WHERE type LIKE '%commander%';
SELECT fd.name AS foreign_name, fd.type AS card_type FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.watermark = 'abzan';
SELECT fd.language, fd.type FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.watermark = 'azorius';
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%';
SELECT name FROM cards WHERE isTextless = 0;
SELECT convertedManaCost FROM cards WHERE name = 'Ancestor\'s Chosen';
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL);
SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;
SELECT subtypes, supertypes, type FROM cards WHERE name = 'Molimo, Maro-Sorcerer';
SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle';
SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena%' AND availability LIKE '%mtgo%';
SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1;
SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;
SELECT st.translation FROM set_translations st JOIN cards c ON c.setCode = st.setCode WHERE c.name = "Ancestor's Chosen" AND st.language = 'Italian';
SELECT COUNT(DISTINCT st.translation) AS num_translations FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE c.name = 'Angel of Mercy';
SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition';
SELECT COUNT(*) as KoreanVersionExists FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = "Ancestor's Chosen" AND foreign_data.language = "Korean";
SELECT COUNT(*) FROM cards as c JOIN set_translations as st ON c.setCode = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition' AND c.artist = 'Adam Rex';
SELECT sets.baseSetSize FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition';
SELECT st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.name = 'Eighth Edition' AND st.language = 'Simplified Chinese';
SELECT COUNT(*) > 0 AS appeared_on_mtgo FROM cards JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Angel of Mercy' AND sets.mtgoCode IS NOT NULL;
SELECT s.releaseDate FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.name = 'Ancestor''s Chosen';
SELECT type FROM sets WHERE code = ( SELECT setCode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition' );
SELECT COUNT(DISTINCT sets.code) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian';
SELECT s.code, s.isForeignOnly FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.name = 'Adarkar Valkyrie';
SELECT COUNT(DISTINCT sets.code) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND sets.baseSetSize < 10;
SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.borderColor = 'black';
SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND c.convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards WHERE setCode = ( SELECT code FROM sets WHERE name = 'Coldsnap' ) );
SELECT DISTINCT c.artist FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND c.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');
SELECT c.* FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND c.number = '4';
SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.convertedManaCost > 5 AND (cards.power = '*' OR cards.power IS NULL);
SELECT fd.flavorText FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Italian';
SELECT DISTINCT fd.language FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.flavorText IS NOT NULL;
SELECT fd.type FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'German';
SELECT fd.text AS italian_text_ruling FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND fd.language = 'Italian';
SELECT c.uuid, c.convertedManaCost FROM cards c WHERE c.setCode = (SELECT code FROM ColdsnapSet), MaxCMC AS ( SELECT MAX(convertedManaCost) AS maxCMC FROM MaxCMCColdsnapCards ) 
SELECT uuid FROM cards WHERE name = 'Reminisce';
SELECT (SUM(CASE WHEN c.convertedManaCost = 7 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap';
SELECT (SUM(is_incredibly_powerful) * 1.0 / COUNT(*)) * 100 AS percentage_incredibly_powerful FROM coldsnap_cards;
SELECT code FROM sets WHERE releaseDate = '2017-07-14';
SELECT keyruneCode FROM sets WHERE code = 'PKHC';
SELECT mcmId FROM sets WHERE code = 'SS2';
SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09';
SELECT type FROM sets WHERE name = 'From the Vault: Lore';
SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';
SELECT c.name, r.text AS ruling_text, CASE WHEN c.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS has_missing_or_degraded_properties FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Jim Pavelec';
SELECT sets.releaseDate FROM cards JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Evacuation';
SELECT s.baseSetSize FROM sets AS s JOIN set_translations AS st ON s.code = st.setCode WHERE st.translation = 'Rinascita di Alara';
SELECT sets.type FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Huitième édition';
SELECT st.translation AS french_set_name FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE c.name = 'Tendo Ice Bridge' AND st.language = 'French';
SELECT code FROM sets WHERE name = 'Salvat 2011';
SELECT translation FROM set_translations WHERE setCode = (SELECT setCode FROM cards WHERE name = 'Fellwar Stone') AND language = 'Japanese';
SELECT cards.name, cards.convertedManaCost FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cards.convertedManaCost DESC LIMIT 1;
SELECT s.releaseDate FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Ola de frío';
SELECT type FROM sets WHERE code = ( SELECT setCode FROM cards WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Samite Pilgrim') );
SELECT COUNT(*) FROM cards WHERE setCode = ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3;
SELECT st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.name = 'Mirrodin' AND st.language = 'Chinese Simplified';
WITH japanese_cards AS ( SELECT DISTINCT set_translations.setCode FROM set_translations WHERE language = 'Japanese' ), non_foil_japanese_sets AS ( SELECT COUNT(*) AS non_foil_count FROM sets WHERE code IN (SELECT setCode FROM japanese_cards) AND isNonFoilOnly = 1 ), total_japanese_sets AS ( SELECT COUNT(*) AS total_count FROM sets WHERE code IN (SELECT setCode FROM japanese_cards) ) SELECT (non_foil_count * 1.0 / total_count) * 100 AS percentage_non_foil_only FROM non_foil_japanese_sets, total_japanese_sets;
SELECT (CAST(SUM(c.isOnlineOnly) AS REAL) / COUNT(fd.id)) * 100 AS online_only_percentage FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE fd.language = 'Portuguese (Brazil)';
SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1;
SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets);
SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1;
SELECT frameEffects, COUNT(*) as effect_count FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY effect_count DESC LIMIT 1;
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a';
SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1;
SELECT c.name, c.convertedManaCost FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'duel' ORDER BY c.convertedManaCost DESC LIMIT 10;
WITH oldest_mythic_card AS ( SELECT uuid, originalReleaseDate FROM cards WHERE rarity = 'mythic' ORDER BY originalReleaseDate LIMIT 1 )
SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'Volkan Baga' AND foreign_data.language = 'French';
SELECT COUNT(DISTINCT c.uuid) AS num_of_cards FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.name = 'Abundance' AND c.rarity = 'rare' AND c.types LIKE '%Enchantment%' AND l.status = 'Legal' GROUP BY c.uuid HAVING COUNT(*) = (SELECT COUNT(*) FROM legalities WHERE uuid = c.uuid);
WITH BannedCounts AS ( SELECT format, COUNT(*) AS banned_count FROM legalities WHERE status = 'banned' GROUP BY format ) SELECT l.format, c.name AS card_name, bc.banned_count FROM legalities l JOIN cards c ON l.uuid = c.uuid JOIN BannedCounts bc ON l.format = bc.format WHERE l.status = 'banned' AND bc.banned_count = ( SELECT MAX(banned_count) FROM BannedCounts );
SELECT st.language FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.name = 'Battlebond';
SELECT l.format FROM IllustratorCardCounts icc JOIN cards c ON icc.artist = c.artist JOIN legalities l ON c.uuid = l.uuid;
SELECT l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = '1997' AND c.artist = 'D. Alexander Gregory' AND l.format = 'legacy' AND (c.hasContentWarning = 1);
SELECT c.name, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.edhrecRank = 1 AND l.status = 'banned';
SELECT AVG(set_count) as annual_average FROM ( SELECT COUNT(*) as set_count FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY strftime('%Y', releaseDate) );
SELECT DISTINCT artist FROM cards WHERE borderColor = 'black' AND availability = 'arena';
SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'banned' OR status = 'restricted');
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';
SELECT rulings.text FROM rulings JOIN cards ON rulings.uuid = cards.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC;
SELECT c.name AS card_name, l.format AS legal_format FROM sets s JOIN cards c ON s.code = c.setCode JOIN legalities l ON c.uuid = l.uuid WHERE s.name = 'Hour of Devastation' AND l.status = 'legal';
SELECT s.name FROM sets s JOIN set_translations st_korean ON s.code = st_korean.setCode AND st_korean.language = 'Korean' LEFT JOIN set_translations st_japanese ON s.code = st_japanese.setCode AND st_japanese.language LIKE '%Japanese%' WHERE st_japanese.setCode IS NULL;
SELECT DISTINCT frameVersion FROM cards WHERE frameVersion IS NOT NULL;
SELECT DisplayName, Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC;
SELECT DisplayName FROM users WHERE strftime('%Y', CreationDate) = '2014';
SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';
SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);
SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1;
SELECT COUNT(*) FROM users WHERE Views > 10 AND strftime('%Y', CreationDate) > '2013';
SELECT COUNT(*) FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' );
SELECT p.Title FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.DisplayName = 'csgillespie';
SELECT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Eliciting priors from experts';
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1;
SELECT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);
SELECT SUM(p.CommentCount) AS TotalComments FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';
SELECT AnswerCount FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' ) ORDER BY AnswerCount DESC LIMIT 1;
SELECT u.DisplayName FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Title = 'Examples for teaching: Correlation does not mean causation';
SELECT COUNT(*) AS root_post_count FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie' AND posts.ParentId IS NULL;
SELECT DISTINCT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ClosedDate IS NOT NULL;
SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age > 65) AND Score >= 20;
SELECT u.Location FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Eliciting priors from experts';
SELECT p.Body FROM tags t JOIN posts p ON t.ExcerptPostId = p.Id WHERE t.TagName = 'bayesian';
SELECT posts.Body FROM tags JOIN posts ON tags.ExcerptPostId = posts.Id WHERE tags.Count = (SELECT MAX(Count) FROM tags);
SELECT COUNT(*) AS badge_count FROM badges WHERE UserId = ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' );
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND strftime('%Y', Date) = '2011';
WITH BadgeCounts AS ( SELECT UserId, COUNT(*) AS BadgeCount FROM badges GROUP BY UserId ) SELECT users.DisplayName FROM BadgeCounts JOIN users ON BadgeCounts.UserId = users.Id WHERE BadgeCounts.BadgeCount = ( SELECT MAX(BadgeCount) FROM BadgeCounts );
SELECT AVG(Score) AS average_post_score FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' );
WITH UsersWithOver200Views AS ( SELECT Id FROM users WHERE Views > 200 ), BadgesCount AS ( SELECT UserId, COUNT(Id) AS BadgeCount FROM badges WHERE UserId IN (SELECT Id FROM UsersWithOver200Views) GROUP BY UserId ) SELECT AVG(BadgeCount) AS AverageBadges FROM BadgesCount;
SELECT Id, OwnerUserId FROM posts WHERE Score > 20;
SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';
SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1;
SELECT COUNT(*) FROM badges WHERE Name = 'Revival';
SELECT p.Title FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score = (SELECT MAX(Score) FROM comments);
SELECT COUNT(c.Id) AS CommentCount FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.ViewCount = 1910;
SELECT p.FavoriteCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.UserId = 3025 AND c.CreationDate = '2014-04-23 20:29:39.0';
SELECT c.Text FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.ParentId = 107829 AND p.CommentCount = 1;
SELECT p.ClosedDate FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0';
SELECT u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Id = 65041;
SELECT COUNT(*) FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini' );
SELECT users.DisplayName FROM votes JOIN users ON votes.UserId = users.Id WHERE votes.Id = 6347;
SELECT COUNT(v.Id) FROM votes v JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%data visualization%';
SELECT b.Name FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';
WITH UserPosts AS ( SELECT COUNT(*) AS PostCount FROM posts WHERE OwnerUserId = 24 ), UserVotes AS ( SELECT COUNT(*) AS VoteCount FROM votes WHERE UserId = 24 ) SELECT PostCount * 1.0 / NULLIF(VoteCount, 0) AS PostToVoteRatio FROM UserPosts, UserVotes;
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';
SELECT Text FROM comments WHERE Score = 17;
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';
SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'SilentGhost';
SELECT u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text = 'thank you user93!';
SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion';
SELECT u.DisplayName, u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Understanding what Dassault iSight is doing?';
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?';
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Necromancer' LIMIT 10;
SELECT DisplayName FROM users WHERE Id = ( SELECT LastEditorUserId FROM posts WHERE Title = 'Open source tools for visualizing multi-dimensional data' );
SELECT p.Title FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Vebjorn Ljosa';
WITH YevgenyUserId AS ( SELECT Id, WebsiteUrl FROM users WHERE DisplayName = 'Yevgeny' ) SELECT y.WebsiteUrl, SUM(p.Score) AS TotalScore FROM posts p JOIN YevgenyUserId y ON p.LastEditorUserId = y.Id GROUP BY y.WebsiteUrl;
SELECT c.Text AS CommentText FROM comments c JOIN UserIdCTE u ON c.UserId = u.UserId;
SELECT SUM(v.BountyAmount) AS TotalBountyAmount FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.Title LIKE '%data%' AND v.VoteTypeId = 8; 
SELECT u.DisplayName FROM votes v JOIN posts p ON v.PostId = p.Id JOIN users u ON v.UserId = u.Id WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%';
WITH humor_posts AS ( SELECT p.Id, p.Title, p.ViewCount FROM posts p INNER JOIN tags t ON p.Id = t.WikiPostId WHERE t.TagName = 'humor' ), average_views AS ( SELECT AVG(ViewCount) AS avg_view_count FROM humor_posts ) SELECT hp.Title, c.Text AS CommentText, c.Score AS CommentScore, av.avg_view_count FROM humor_posts hp LEFT JOIN comments c ON hp.Id = c.PostId CROSS JOIN average_views av;
SELECT COUNT(*) AS TotalComments FROM comments WHERE UserId = 13;
SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);
SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users);
SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011';
SELECT COUNT(*) FROM ( SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Name) > 5 ) AS users_with_badges;
SELECT COUNT(DISTINCT u.Id) as NewYorkUsersWithBadges FROM users u JOIN badges b1 ON u.Id = b1.UserId JOIN badges b2 ON u.Id = b2.UserId WHERE u.Location = 'New York' AND b1.Name = 'Teacher' AND b2.Name = 'Supporter';
SELECT u.Id, u.DisplayName, u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Id = 1;
SELECT u.Id, u.DisplayName FROM users u JOIN ( SELECT ph.UserId, ph.PostId FROM postHistory ph GROUP BY ph.UserId, ph.PostId HAVING COUNT(ph.Id) = 1 ) as history ON u.Id = history.UserId JOIN posts p ON p.Id = history.PostId WHERE p.ViewCount >= 1000;
SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId ORDER BY CommentCount DESC LIMIT 1;
SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'India' AND b.Name = 'Teacher';
WITH BadgeCounts AS ( SELECT SUM(CASE WHEN strftime('%Y', Date) = '2010' THEN 1 ELSE 0 END) AS Count2010, SUM(CASE WHEN strftime('%Y', Date) = '2011' THEN 1 ELSE 0 END) AS Count2011, COUNT(*) AS TotalCount FROM badges WHERE Name = 'Students' ) SELECT ABS((Count2010 * 100.0 / TotalCount) - (Count2011 * 100.0 / TotalCount)) AS PercentageDifference FROM BadgeCounts;
SELECT DISTINCT PostHistoryTypeId FROM postHistory WHERE PostId = 3720;
SELECT p.ViewCount FROM posts p WHERE p.Id = 61217;
SELECT posts.Score, postLinks.LinkTypeId FROM posts JOIN postLinks ON postLinks.PostId = posts.Id WHERE posts.Id = 395;
SELECT Id AS PostID, OwnerUserId FROM posts WHERE Score > 60;
SELECT SUM(FavoriteCount) FROM posts WHERE OwnerUserId = 686 AND strftime('%Y', CreaionDate) = '2011';
WITH user_post_counts AS ( SELECT OwnerUserId, COUNT(*) as post_count FROM posts GROUP BY OwnerUserId ), qualified_users AS ( SELECT u.Id, u.UpVotes, u.Age FROM users u JOIN user_post_counts upc ON u.Id = upc.OwnerUserId WHERE upc.post_count > 10 ) SELECT AVG(UpVotes) AS avg_up_votes, AVG(Age) AS avg_age FROM qualified_users;
SELECT COUNT(*) FROM badges WHERE Name = 'Announcer';
SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08';
SELECT COUNT(*) FROM comments WHERE Score > 60;
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47.0';
SELECT COUNT(*) FROM posts WHERE Score = 10;
SELECT MAX(Reputation) FROM users;
SELECT u.Reputation FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Date = '2010-07-19 19:39:08.0';
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Pierre';
SELECT badges.Date FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Location = 'Rochester, NY';
WITH teacher_badge_count AS ( SELECT COUNT(DISTINCT UserId) AS teacher_count FROM badges WHERE Name = 'Teacher' ), total_user_count AS ( SELECT COUNT(DISTINCT Id) AS total_users FROM users ) SELECT (tb.teacher_count * 100.0 / tu.total_users) AS percentage FROM teacher_badge_count tb, total_user_count tu;
WITH OrganizerUsers AS ( SELECT u.Id, u.Age FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer' ), TeenageOrganizerUsers AS ( SELECT Id FROM OrganizerUsers WHERE Age BETWEEN 13 AND 18 ) SELECT (CAST((SELECT COUNT(*) FROM TeenageOrganizerUsers) AS REAL) / CAST((SELECT COUNT(*) FROM OrganizerUsers) AS REAL)) * 100 AS TeenagerPercentage
SELECT SUM(c.Score) AS TotalCommentScore FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.CreaionDate = '2010-07-19 19:19:56.0';
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreaionDate = '2010-07-19 19:37:33';
SELECT DISTINCT users.Age FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'Vienna, Austria';
SELECT COUNT(DISTINCT u.Id) AS NumberOfAdultsWithSupporterBadge FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65;
SELECT SUM(u.Views) AS total_views FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0';
SELECT b.Name FROM users u JOIN MinReputation mr ON u.Reputation = mr.min_rep JOIN badges b ON u.Id = b.UserId;
SELECT b.Name FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.DisplayName = 'Sharpie';
SELECT COUNT(DISTINCT b.UserId) FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age > 65;
SELECT DisplayName FROM users WHERE Id = 30;
SELECT COUNT(*) FROM users WHERE Location = 'New York';
SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2010';
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65;
SELECT DisplayName, Views FROM users WHERE Views = (SELECT MAX(Views) FROM users);
SELECT (CAST((SELECT COUNT(Id) FROM votes WHERE strftime('%Y', CreationDate) = '2010') AS FLOAT) / CAST((SELECT COUNT(Id) FROM votes WHERE strftime('%Y', CreationDate) = '2011') AS FLOAT)) AS ratio_of_votes
SELECT Id FROM users WHERE DisplayName = 'John Stauffer';
SELECT COUNT(*) FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo' );
SELECT COUNT(*) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan');
SELECT p.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'slashnick' ORDER BY p.AnswerCount DESC LIMIT 1;
SELECT u.DisplayName, SUM(p.ViewCount) AS TotalViews FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY u.DisplayName ORDER BY TotalViews DESC;
SELECT COUNT(DISTINCT p.Id) AS post_count FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN votes v ON p.Id = v.PostId WHERE u.DisplayName = 'Matt Parker' GROUP BY p.Id HAVING COUNT(v.Id) > 4;
SELECT COUNT(*) AS NegativeCommentsCount FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Neil McGuigan' AND c.Score < 60;
SELECT DISTINCT p.Tags FROM posts p JOIN users u ON p.OwnerUserId = u.Id LEFT JOIN comments c ON p.Id = c.PostId WHERE u.DisplayName = 'Mark Meckes' AND c.PostId IS NULL;
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer';
WITH CommunityPosts AS ( SELECT p.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Community' ), RLanguagePosts AS ( SELECT DISTINCT p.Id FROM CommunityPosts cp JOIN posts p ON cp.Id = p.Id JOIN tags t ON ',' || p.Tags || ',' LIKE '%,' || t.TagName || ',%' WHERE t.TagName = 'r' ) SELECT (COUNT(RLanguagePosts.Id) * 1.0 / COUNT(CommunityPosts.Id)) * 100 AS RLanguagePercentage FROM CommunityPosts LEFT JOIN RLanguagePosts ON CommunityPosts.Id = RLanguagePosts.Id;
SELECT (SUM(CASE WHEN u.DisplayName = 'Mornington' THEN p.ViewCount ELSE 0 END) - SUM(CASE WHEN u.DisplayName = 'Amos' THEN p.ViewCount ELSE 0 END)) AS ViewCountDifference FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName IN ('Mornington', 'Amos');
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'commentator' AND strftime('%Y', Date) = '2014';
SELECT COUNT(*) FROM posts WHERE CreaionDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';
SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users);
SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images';
SELECT COUNT(*) FROM comments WHERE Score < 60 AND UserId = 13;
SELECT DISTINCT p.Title AS PostTitle, c.UserDisplayName AS CommenterDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score > 60;
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'North Pole' AND strftime('%Y', b.Date) = '2011';
SELECT u.DisplayName, u.WebsiteUrl FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.FavoriteCount > 150;
SELECT ( SELECT COUNT(*) FROM postHistory WHERE PostId = posts.Id ) AS PostHistoryCount, posts.LastEditDate FROM posts WHERE Title = "What is the best introductory Bayesian statistics textbook?";
SELECT u.LastAccessDate, u.Location FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Outliers';
SELECT p.Title FROM postLinks pl JOIN PostIdCTE cte ON pl.PostId = cte.Id OR pl.RelatedPostId = cte.Id JOIN posts p ON (p.Id = pl.PostId AND pl.PostId != cte.Id) OR (p.Id = pl.RelatedPostId AND pl.RelatedPostId != cte.Id);
WITH SamuelUserId AS ( SELECT Id FROM users WHERE DisplayName = 'Samuel' ), SamuelBadges AS ( SELECT Name FROM badges WHERE UserId = (SELECT Id FROM SamuelUserId) AND strftime('%Y', Date) = '2013' ), SamuelPosts AS ( SELECT Id AS PostId FROM posts WHERE OwnerUserId = (SELECT Id FROM SamuelUserId) AND strftime('%Y', CreaionDate) = '2013' ) SELECT sp.PostId, sb.Name AS BadgeName FROM SamuelPosts sp JOIN SamuelBadges sb ON sp.PostId = sp.PostId;
SELECT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ViewCount = (SELECT MAX(ViewCount) FROM posts);
SELECT ExcerptPostId FROM tags WHERE TagName = 'hypothesis-testing';
WITH target_post AS ( SELECT Id FROM posts WHERE Title = 'What are principal component scores?' ) SELECT p.Title, pl.LinkTypeId FROM postLinks pl JOIN posts p ON p.Id = pl.RelatedPostId WHERE pl.PostId = (SELECT Id FROM target_post) UNION SELECT p.Title, pl.LinkTypeId FROM postLinks pl JOIN posts p ON p.Id = pl.PostId WHERE pl.RelatedPostId = (SELECT Id FROM target_post);
SELECT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Id = ( SELECT ParentId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 );
WITH MaxBounty AS ( SELECT MAX(BountyAmount) AS MaxBountyAmount FROM votes WHERE VoteTypeId = 8 ) SELECT u.DisplayName, u.WebsiteUrl FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.VoteTypeId = 8 AND v.BountyAmount = (SELECT MaxBountyAmount FROM MaxBounty);
SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5;
SELECT COUNT(*) AS numTags FROM tags WHERE Count BETWEEN 5000 AND 7000;
SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts );
SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);
SELECT COUNT(*) FROM posts JOIN votes ON posts.Id = votes.PostId WHERE strftime('%Y', votes.CreationDate) = '2011' AND votes.BountyAmount = 50;
SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users);
WITH MostPopularTag AS ( SELECT TagName FROM tags WHERE Count = (SELECT MAX(Count) FROM tags) 
WITH FilteredPosts AS ( SELECT Id FROM posts WHERE AnswerCount <= 2 ), LinksIn2010 AS ( SELECT * FROM postLinks WHERE strftime('%Y', CreationDate) = '2010' ) SELECT COUNT(pl.Id) / 12.0 AS AverageMonthlyLinks FROM LinksIn2010 pl JOIN FilteredPosts fp ON pl.PostId = fp.Id;
SELECT p.Id FROM votes v JOIN posts p ON v.PostId = p.Id WHERE v.UserId = 1465 ORDER BY p.FavoriteCount DESC LIMIT 1;
SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.CreationDate = (SELECT MIN(CreationDate) FROM postLinks);
SELECT u.DisplayName FROM users u JOIN ( SELECT UserId, COUNT(Name) AS BadgeCount FROM badges GROUP BY UserId ORDER BY BadgeCount DESC LIMIT 1 ) b ON u.Id = b.UserId;
SELECT MIN(v.CreationDate) AS FirstVoteDate FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl';
SELECT MIN(p.CreaionDate) AS FirstPostDate FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Age = (SELECT MIN(Age) FROM users);
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Autobiographer' ORDER BY b.Date ASC LIMIT 1;
SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4;
WITH OldestUsers AS ( SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users) ) SELECT AVG(vote_counts) AS AvgPostsVoted FROM ( SELECT COUNT(PostId) AS vote_counts FROM votes WHERE UserId IN (SELECT Id FROM OldestUsers) GROUP BY UserId );
SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);
SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;
SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65;
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Jay Stevens') AND strftime('%Y', CreaionDate) = '2010';
SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky' ORDER BY p.ViewCount DESC LIMIT 1;
SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts);
SELECT AVG(p.Score) AS average_score FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.DisplayName = 'Stephen Turner';
SELECT DISTINCT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ViewCount > 20000 AND strftime('%Y', p.CreaionDate) = '2011';
SELECT p.Id, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE strftime('%Y', p.CreaionDate) = '2010' ORDER BY p.FavoriteCount DESC LIMIT 1;
WITH HighReputationUsers AS ( SELECT Id FROM users WHERE Reputation > 1000 ), PostsByHighRepUsers AS ( SELECT p.Id FROM posts p JOIN HighReputationUsers u ON p.OwnerUserId = u.Id WHERE strftime('%Y', p.CreaionDate) = '2011' ), AllPostsIn2011 AS ( SELECT Id FROM posts WHERE strftime('%Y', CreaionDate) = '2011' ) SELECT (COUNT(p1.Id) * 100.0 / NULLIF(COUNT(p2.Id), 0)) AS Percentage FROM PostsByHighRepUsers p1, AllPostsIn2011 p2;
SELECT (CAST(COUNT(Id) FILTER (WHERE Age BETWEEN 13 AND 18) AS REAL) / COUNT(Id)) * 100 AS percentage_of_teenage_users FROM users;
SELECT p.ViewCount, u.DisplayName FROM posts p JOIN users u ON u.Id = COALESCE(p.LastEditorUserId, p.OwnerUserId) WHERE p.Title = 'Computer Game Datasets';
SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);
SELECT COUNT(*) AS NumberOfComments FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE Score = (SELECT HighestScore FROM MaxScore) );
SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;
SELECT u.DisplayName, u.Location FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Id = 183;
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Emmett' ORDER BY b.Date DESC LIMIT 1;
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;
SELECT badges.Date, users.CreationDate, (julianday(badges.Date) - julianday(users.CreationDate)) AS DaysToBadge FROM users JOIN badges ON users.Id = badges.UserId WHERE users.DisplayName = 'Zolomon';
SELECT Id FROM users WHERE CreationDate = (SELECT MAX(CreationDate) FROM users);
SELECT c.Text, c.UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Analysing wind data with R' ORDER BY c.CreationDate DESC LIMIT 1;
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol';
ite SELECT COUNT(*) FROM posts WHERE ',' || Tags || ',' LIKE '%,careers,%';
SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon';
SELECT (SELECT COUNT(*) FROM comments WHERE PostId = @postId) AS CommentCount, (SELECT COUNT(*) FROM posts WHERE ParentId = @postId) AS AnswerCount;
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';
SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount > 30;
SELECT Id, MAX(Reputation) FROM users;
SELECT COUNT(*) FROM posts WHERE Score < 20;
SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';
SELECT u.Reputation, u.UpVotes FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text = 'fine, you win :)';
SELECT Text FROM comments WHERE PostId = ( SELECT Id FROM posts WHERE Title = 'How can I adapt ANOVA for binary data?' );
SELECT c.Text FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;
SELECT u.CreationDate, u.Age FROM users u JOIN comments c ON u.Id = c.UserId WHERE u.WebsiteUrl LIKE '%http://%';
SELECT COUNT(DISTINCT p.Id) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.ViewCount < 5;
SELECT COUNT(c.Id) FROM posts AS p JOIN comments AS c ON p.Id = c.PostId WHERE p.CommentCount = 1 AND c.Score = 0;
SELECT COUNT(DISTINCT u.Id) AS TotalUsersAge40 FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score = 0 AND u.Age = 40;
SELECT p.Id AS PostId, c.Text AS CommentText FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item';
SELECT COUNT(*) AS upvote_count FROM votes WHERE UserId = ( SELECT UserId FROM comments WHERE Text = "R is also lazy evaluated." ) AND VoteTypeId = 2; 
SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';
SELECT DISTINCT u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 1 AND 5 AND u.DownVotes = 0;
WITH FilteredComments AS ( SELECT DISTINCT UserId FROM comments WHERE Score BETWEEN 5 AND 10 ), ZeroUpvotesUsers AS ( SELECT DISTINCT u.Id FROM users u JOIN FilteredComments fc ON u.Id = fc.UserId WHERE u.UpVotes = 0 ) SELECT 100.0 * (COUNT(zu.Id) * 1.0) / COUNT(fc.UserId) AS Percentage FROM FilteredComments fc LEFT JOIN ZeroUpvotesUsers zu ON fc.UserId = zu.Id;
SELECT sp.power_name FROM superhero AS sh JOIN hero_power AS hp ON sh.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sh.superhero_name = '3-D Man';
SELECT COUNT(DISTINCT hero_id) FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';
SELECT COUNT(*) FROM superhero WHERE id IN ( SELECT hero_id FROM hero_power WHERE power_id = ( SELECT id FROM superpower WHERE power_name = 'Super Strength' ) ) AND height_cm > 200;
SELECT s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.id HAVING COUNT(hp.hero_id) > 15;
SELECT COUNT(*) FROM superhero WHERE eye_colour_id = ( SELECT id FROM colour WHERE colour = 'Blue' );
SELECT colour.colour FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse';
SELECT COUNT(DISTINCT s.id) FROM superhero s JOIN colour c ON s.eye_colour_id = c.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE c.colour = 'Blue' AND sp.power_name = 'Agility';
SELECT s.superhero_name FROM superhero s JOIN colour e ON s.eye_colour_id = e.id JOIN colour h ON s.hair_colour_id = h.id WHERE e.colour = 'Blue' AND h.colour = 'Blond';
SELECT COUNT(*) FROM superhero WHERE publisher_id = ( SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics' );
SELECT s.full_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' ORDER BY s.height_cm DESC LIMIT 1;
SELECT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.superhero_name = 'Sauron';
SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue';
SELECT AVG(s.height_cm) AS average_height FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics';
SELECT CAST(COUNT(ms.hero_id) AS FLOAT) / (SELECT COUNT(*) FROM marvel_superheroes) * 100 AS super_strength_percentage FROM marvel_super_strength ms;
SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics';
SELECT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.id IN (SELECT hero_id FROM SlowestHeroId);
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics';
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II';
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';
WITH IntelligenceAttribute AS ( SELECT id AS intelligence_id FROM attribute WHERE attribute_name = 'Intelligence' ), DumbestHero AS ( SELECT hero_id FROM hero_attribute WHERE attribute_id = (SELECT intelligence_id FROM IntelligenceAttribute) ORDER BY attribute_value LIMIT 1 ) SELECT superhero_name FROM superhero WHERE id = (SELECT hero_id FROM DumbestHero);
SELECT r.race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.superhero_name = 'Copycat';
SELECT COUNT(DISTINCT ha.hero_id) FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50;
SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';
SELECT COUNT(DISTINCT s.id) FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100;
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.id ORDER BY COUNT(hp.power_id) DESC LIMIT 1;
SELECT COUNT(*) FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';
SELECT (CAST(@bad_superheroes_count AS REAL) / @total_superheroes) * 100 AS percentage_bad_superheroes, @bad_marvel_superheroes_count AS bad_superheroes_published_by_marvel;
WITH publisher_counts AS ( SELECT p.publisher_name, COUNT(*) AS superhero_count FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name IN ('DC Comics', 'Marvel Comics') GROUP BY p.publisher_name ) SELECT (SELECT superhero_count FROM publisher_counts WHERE publisher_name = 'Marvel Comics') - (SELECT superhero_count FROM publisher_counts WHERE publisher_name = 'DC Comics') AS difference ;
SELECT id FROM publisher WHERE publisher_name = 'Star Trek';
SELECT AVG(attribute_value) AS average_attribute_value FROM hero_attribute;
SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;
SELECT c.colour AS eye_colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.id = 75;
SELECT sp.power_name FROM superhero AS s JOIN hero_power AS hp ON s.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Deathlok';
SELECT AVG(weight_kg) AS average_weight FROM superhero WHERE gender_id = 2;
SELECT DISTINCT sp.power_name FROM superhero sh JOIN gender g ON sh.gender_id = g.id JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE g.gender = 'Male' LIMIT 5;
SELECT superhero.superhero_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';
SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1;
SELECT sp.power_name FROM hero_power hp INNER JOIN superpower sp ON hp.power_id = sp.id WHERE hp.hero_id = 56;
SELECT s.full_name FROM superhero s JOIN race r ON s.race_id = r.id WHERE r.race = 'Demi-God' LIMIT 5;
SELECT COUNT(*) FROM superhero WHERE alignment_id = ( SELECT id FROM alignment WHERE alignment = 'Bad' );
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;
SELECT c.colour FROM superhero s JOIN race r ON s.race_id = r.id JOIN colour c ON s.hair_colour_id = c.id WHERE r.race = 'human' AND s.height_cm = 185;
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = ( SELECT MAX(weight_kg) FROM superhero );
WITH heroes_in_height_range AS ( SELECT * FROM superhero WHERE height_cm BETWEEN 150 AND 180 ), marvel_heroes AS ( SELECT * FROM heroes_in_height_range WHERE publisher_id = 13 ) SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM heroes_in_height_range)) AS percentage_marvel FROM marvel_heroes;
WITH AverageWeight AS ( SELECT AVG(weight_kg) AS avg_weight FROM superhero ) SELECT s.full_name FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Male' AND s.weight_kg > (SELECT avg_weight * 0.79 FROM AverageWeight);
SELECT sp.power_name FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id GROUP BY sp.power_name ORDER BY COUNT(sp.power_name) DESC LIMIT 1;
SELECT id FROM superhero WHERE superhero_name = 'Abomination';
SELECT sp.power_name FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE hp.hero_id = 1;
SELECT COUNT(DISTINCT hero_id) FROM hero_power WHERE power_id = ( SELECT id FROM superpower WHERE power_name = 'stealth' );
SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'strength' ORDER BY ha.attribute_value DESC LIMIT 1;
SELECT CAST(COUNT(s.id) AS REAL) / NULLIF(CAST(SUM(s.skin_colour_id = 1) AS REAL), 0) AS average_no_skin_colour FROM superhero s;
SELECT COUNT(*) FROM superhero WHERE publisher_id = ( SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics' );
SELECT sh.superhero_name FROM superhero sh JOIN hero_attribute ha ON sh.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN publisher p ON sh.publisher_id = p.id WHERE a.attribute_name = 'durability' AND p.publisher_name = 'Dark Horse Comics' ORDER BY ha.attribute_value DESC LIMIT 1;
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien';
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Flight';
SELECT eye_colour.colour AS eye_colour, hair_colour.colour AS hair_colour, skin_colour.colour AS skin_colour FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN publisher ON superhero.publisher_id = publisher.id LEFT JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id LEFT JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id LEFT JOIN colour AS skin_colour ON superhero.skin_colour_id = skin_colour.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Dark Horse Comics';
SELECT s.superhero_name, p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.eye_colour_id = s.hair_colour_id AND s.hair_colour_id = s.skin_colour_id;
SELECT r.race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.superhero_name = 'A-Bomb';
SELECT (COUNT(s.id) * 100.0) / (SELECT COUNT(*) FROM superhero s JOIN FemaleGender f ON s.gender_id = f.id) AS blue_female_percentage FROM superhero s JOIN FemaleGender f ON s.gender_id = f.id JOIN BlueEyeColour b ON s.eye_colour_id = b.id;
SELECT s.superhero_name, r.race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.full_name = 'Charles Chandler';
SELECT g.gender FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE s.superhero_name = 'Agent 13';
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Adaptation';
SELECT COUNT(DISTINCT hp.power_id) AS number_of_powers FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id WHERE s.superhero_name = 'Amazo';
SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.full_name = 'Hunter Zolomon';
SELECT superhero.height_cm FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';
SELECT superhero.superhero_name FROM superhero JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Black' AND hair_colour.colour = 'Black';
SELECT DISTINCT c.colour AS eye_colour FROM superhero s JOIN colour sc ON s.skin_colour_id = sc.id JOIN colour c ON s.eye_colour_id = c.id WHERE sc.colour = 'Gold';
SELECT s.full_name FROM superhero s JOIN race r ON s.race_id = r.id WHERE r.race = 'Vampire';
SELECT s.superhero_name FROM superhero s JOIN alignment a ON s.alignment_id = a.id WHERE a.alignment = 'Neutral';
SELECT COUNT(DISTINCT hero_id) FROM hero_attribute WHERE attribute_id = @strength_id AND attribute_value = @max_strength;
SELECT r.race AS race, a.alignment AS alignment FROM superhero s LEFT JOIN race r ON s.race_id = r.id LEFT JOIN alignment a ON s.alignment_id = a.id WHERE s.superhero_name = 'Cameron Hicks';
SELECT (100.0 * COUNT(CASE WHEN gender.gender = 'Female' THEN 1 END)) / COUNT(*) AS female_percent FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT AVG(s.weight_kg) AS average_alien_weight FROM superhero s JOIN race r ON s.race_id = r.id WHERE r.race = 'Alien';
SELECT (SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') - (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler') AS weight_difference;
SELECT AVG(height_cm) AS average_height FROM superhero;
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Abomination';
SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' AND ha.attribute_value = ( SELECT MAX(ha2.attribute_value) FROM hero_attribute ha2 JOIN attribute a2 ON ha2.attribute_id = a2.id WHERE a2.attribute_name = 'Speed' );
SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;
SELECT a.attribute_name, ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = '3-D Man';
SELECT superhero_name FROM superhero WHERE eye_colour_id = 7 AND hair_colour_id = 9;
SELECT s.superhero_name, p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');
SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL OR publisher_id = 1;
SELECT (CAST(COUNT(*) AS REAL) / (SELECT COUNT(*) FROM superhero)) * 100.0 AS blue_eyes_percentage FROM superhero WHERE eye_colour_id = 7;
SELECT (CAST(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END)) AS male_to_female_ratio FROM superhero;
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT id FROM superpower WHERE power_name = 'cryokinesis';
SELECT superhero_name FROM superhero WHERE id = 294;
SELECT full_name FROM superhero WHERE weight_kg IS NULL OR weight_kg = 0;
SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.full_name = 'Karen Beecher-Duncan';
SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.full_name = 'Helen Parr';
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;
SELECT MAX(attribute_value) FROM hero_attribute;
SELECT a.alignment, sp.power_name FROM superhero s JOIN alignment a ON s.alignment_id = a.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Atom IV';
SELECT s.full_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE c.colour = 'Blue' LIMIT 5;
SELECT AVG(ha.attribute_value) AS average_attribute_value FROM superhero AS s JOIN hero_attribute AS ha ON s.id = ha.hero_id WHERE s.alignment_id = 3;
SELECT DISTINCT c.colour FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id JOIN colour c ON s.skin_colour_id = c.id WHERE ha.attribute_value = 100;
SELECT COUNT(*) FROM superhero WHERE alignment_id = 1 AND gender_id = 2;
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_value BETWEEN 75 AND 80;
SELECT race.race FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id JOIN gender ON superhero.gender_id = gender.id JOIN race ON superhero.race_id = race.id WHERE colour.colour = 'blue' AND gender.gender = 'male';
WITH bad_superheroes AS ( SELECT s.id FROM superhero s WHERE s.alignment_id = 2 ), female_bad_superheroes AS ( SELECT s.id FROM superhero s WHERE s.alignment_id = 2 AND s.gender_id = 2 ) SELECT (CAST(COUNT(fbs.id) AS FLOAT) / COUNT(bs.id)) * 100.0 AS female_percentage FROM bad_superheroes bs LEFT JOIN female_bad_superheroes fbs ON bs.id = fbs.id;
WITH MissingWeightSuperheroes AS ( SELECT id, eye_colour_id FROM superhero WHERE weight_kg IS NULL OR weight_kg = 0 ), BlueEyesCount AS ( SELECT COUNT(*) AS blue_eyes_count FROM MissingWeightSuperheroes WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'blue') ), NoEyeColorCount AS ( SELECT COUNT(*) AS no_eye_color_count FROM MissingWeightSuperheroes WHERE eye_colour_id = (SELECT id FROM colour WHERE colour IS NULL) ) SELECT (BlueEyesCount.blue_eyes_count - NoEyeColorCount.no_eye_color_count) AS difference FROM BlueEyesCount, NoEyeColorCount;
SELECT ha.attribute_value FROM superhero AS s JOIN hero_attribute AS ha ON s.id = ha.hero_id JOIN attribute AS a ON ha.attribute_id = a.id WHERE s.superhero_name = 'Hulk' AND a.attribute_name = 'Strength';
SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Ajax';
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE colour.colour = 'Green' AND alignment.alignment = 'Bad';
SELECT COUNT(*) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name ASC;
SELECT g.gender FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN gender g ON s.gender_id = g.id WHERE sp.power_name = 'Phoenix Force';
SELECT superhero.superhero_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1;
SELECT AVG(s.height_cm) AS average_height FROM superhero s JOIN race r ON s.race_id = r.id JOIN publisher p ON s.publisher_id = p.id WHERE r.race <> 'Human' AND p.publisher_name = 'Dark Horse Comics';
SELECT COUNT(DISTINCT hero_id) AS fastest_superheroes_count FROM hero_attribute WHERE attribute_id = (SELECT id FROM speed_attribute) AND attribute_value = 100;
SELECT ABS(SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)) AS difference FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id;
SELECT a.attribute_name FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = 'Black Panther' ORDER BY ha.attribute_value ASC LIMIT 1;
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination';
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';
WITH george_lucas_superheroes AS ( SELECT sh.id FROM superhero sh JOIN publisher p ON sh.publisher_id = p.id WHERE p.publisher_name = 'George Lucas' ), female_superheroes AS ( SELECT sh.id FROM superhero sh JOIN gender g ON sh.gender_id = g.id WHERE g.gender = 'Female' ) SELECT (COUNT(fsh.id) * 100.0 / COUNT(glsh.id)) AS female_percentage FROM george_lucas_superheroes glsh LEFT JOIN female_superheroes fsh ON glsh.id = fsh.id;
WITH MarvelSuperheroes AS ( SELECT s.id FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' ), GoodMarvelSuperheroes AS ( SELECT ms.id FROM MarvelSuperheroes ms JOIN alignment a ON ms.alignment_id = a.id WHERE a.alignment = 'Good' ) SELECT (COUNT(gms.id) * 100.0 / COUNT(ms.id)) AS percentage_of_good_superheroes FROM MarvelSuperheroes ms LEFT JOIN GoodMarvelSuperheroes gms ON ms.id = gms.id;
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';
SELECT hero_id FROM hero_attribute ORDER BY attribute_value ASC LIMIT 1;
SELECT full_name FROM superhero WHERE superhero_name = 'Alien';
SELECT s.full_name FROM superhero AS s JOIN colour AS c ON s.eye_colour_id = c.id WHERE s.weight_kg < 100 AND c.colour = 'Brown';
SELECT ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE s.superhero_name = 'Aquababy';
SELECT s.weight_kg, r.race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.id = 40;
SELECT AVG(height_cm) AS average_height FROM superhero WHERE alignment_id = ( SELECT id FROM alignment WHERE alignment = 'neutral' );
SELECT hero_id FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Intelligence');
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf';
SELECT DISTINCT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero);
WITH EliminatedDrivers AS ( SELECT driverId FROM qualifying WHERE raceId = 18 ORDER BY q1 DESC LIMIT 5 ) SELECT drivers.driverRef FROM drivers JOIN EliminatedDrivers ON drivers.driverId = EliminatedDrivers.driverId;
SELECT d.surname FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 19 ORDER BY CAST(q.q2 AS TIME) ASC LIMIT 1;
SELECT DISTINCT r.year FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE c.location = 'Shanghai';
SELECT r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Circuit de Barcelona-Catalunya';
SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Germany';
SELECT DISTINCT r.position, c.circuitId, c.name AS circuit_name FROM constructors co JOIN results r ON co.constructorId = r.constructorId JOIN races ra ON ra.raceId = r.raceId JOIN circuits c ON c.circuitId = ra.circuitId WHERE co.name = 'Renault' ORDER BY c.circuitId, r.position;
SELECT COUNT(*) FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2010 AND c.country NOT IN ('Japan', 'China', 'India', 'Malaysia', 'Singapore', 'South Korea', 'United Arab Emirates'
SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Spain';
SELECT c.lat, c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.name LIKE '%Australian Grand Prix%';
SELECT r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit';
SELECT r.date, r.time FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit';
SELECT circuits.lat, circuits.lng FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Abu Dhabi Grand Prix';
SELECT constructors.country FROM results JOIN constructors ON results.constructorId = constructors.constructorId WHERE results.raceId = 24 AND results.points = 1;
SELECT q.q1 FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE d.forename = 'Bruno' AND d.surname = 'Senna' AND q.raceId = 354;
SELECT d.nationality FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 355 AND q.q2 = '0:01:40';
SELECT number FROM qualifying WHERE raceId = 903 AND q3 = '0:01:54';
SELECT COUNT(*) FROM results WHERE raceId = ( SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007 ) AND time IS NULL;
SELECT s.url FROM races r JOIN seasons s ON r.year = s.year WHERE r.raceId = 901;
SELECT COUNT(*) FROM results WHERE raceId = ( SELECT raceId FROM races WHERE date = '2015-11-29' ) AND time IS NOT NULL;
SELECT d.driverId, d.forename, d.surname, d.dob FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = 592 AND r.time IS NOT NULL ORDER BY d.dob ASC LIMIT 1;
SELECT d.url FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.raceId = 161 AND lt.time = '0:01:27';
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 933 ORDER BY CAST(r.fastestLapSpeed AS REAL) DESC LIMIT 1;
SELECT c.location, c.lat, c.lng FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.name = 'Malaysian Grand Prix';
SELECT c.url FROM constructorResults cr JOIN constructors c ON cr.constructorId = c.constructorId WHERE cr.raceId = 9 ORDER BY cr.points DESC LIMIT 1;
SELECT q.q1 FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE d.forename = 'Lucas' AND d.surname = 'di Grassi' AND q.raceId = 345;
SELECT d.nationality FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.q2 = '0:01:15' AND q.raceId = 347;
SELECT d.code FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 45 AND q.q3 = '0:01:33';
SELECT driverId FROM drivers WHERE forename = 'Bruce' AND surname = 'McLaren';
SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = x AND r.position = 2;
SELECT s.url FROM races r JOIN seasons s ON r.year = s.year WHERE r.raceId = 901;
SELECT COUNT(*) FROM results r JOIN races rc ON r.raceId = rc.raceId WHERE rc.date = '2015-11-29' AND r.position IS NOT NULL;
SELECT d.forename, d.surname, d.dob FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = 872 AND r.time IS NOT NULL ORDER BY d.dob DESC LIMIT 1;
SELECT d.forename, d.surname FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.raceId = 348 ORDER BY lt.milliseconds ASC LIMIT 1;
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.fastestLapSpeed = ( SELECT MAX(fastestLapSpeed) FROM results );
SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta';
WITH RaceDetails AS ( SELECT raceId FROM races WHERE date = '1983-07-16' ), ParticipatingDrivers AS ( SELECT COUNT(DISTINCT driverId) AS total_drivers FROM results WHERE raceId = (SELECT raceId FROM RaceDetails) ), CompletedDrivers AS ( SELECT COUNT(DISTINCT driverId) AS completed_drivers FROM results WHERE raceId = (SELECT raceId FROM RaceDetails) AND time IS NOT NULL ) SELECT (completed_drivers * 100.0) / total_drivers AS completion_rate FROM ParticipatingDrivers, CompletedDrivers;
SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix';
SELECT COUNT(*) AS number_of_races, name FROM races WHERE year = 2005 ORDER BY name DESC;
SELECT name, date FROM races WHERE date = (SELECT MIN(date) FROM races);
SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT MAX(round) FROM races WHERE year = 1999);
SELECT year FROM races GROUP BY year ORDER BY COUNT(raceId) DESC LIMIT 1;
SELECT r2017.name FROM races AS r2017 WHERE r2017.year = 2017 AND r2017.name NOT IN ( SELECT r2000.name FROM races AS r2000 WHERE r2000.year = 2000 );
SELECT c.country, c.name AS circuit_name, c.location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.name = "European Grand Prix" AND r.year = (SELECT MIN(year) FROM races WHERE name = "European Grand Prix");
SELECT MAX(r.year) AS last_season FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Brands Hatch' AND r.name = 'British Grand Prix';
SELECT COUNT(DISTINCT r.year) AS seasons_count FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone Circuit' AND r.name = 'British Grand Prix';
SELECT d.forename, d.surname FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE r.year = 2010 AND r.name = 'Singapore Grand Prix' ORDER BY res.positionOrder;
WITH MaxPoints AS ( SELECT driverId, MAX(points) as maxPoints FROM driverStandings GROUP BY driverId ORDER BY maxPoints DESC LIMIT 1 ) SELECT d.forename || ' ' || d.surname AS fullName, mp.maxPoints FROM MaxPoints mp JOIN drivers d ON mp.driverId = d.driverId;
SELECT d.forename || ' ' || d.surname AS driver_name, r.points FROM races ra JOIN results r ON ra.raceId = r.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.year = 2017 AND ra.name = 'Chinese Grand Prix' ORDER BY r.position ASC LIMIT 3;
SELECT d.forename || ' ' || d.surname AS driver_name, r.name AS race_name, lt.time AS best_lap_time FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId WHERE lt.milliseconds = ( SELECT MIN(milliseconds) FROM lapTimes );
SELECT raceId FROM races WHERE year = 2009 AND name = 'Chinese Grand Prix';
SELECT (CAST(COUNT(CASE WHEN r.position > 1 THEN 1 END) AS FLOAT) / COUNT(*)) * 100 AS percentage_not_first FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races race ON r.raceId = race.raceId WHERE d.surname = 'Hamilton' AND race.year >= 2010;
WITH MostWinningDriver AS ( SELECT driverId, SUM(wins) AS totalWins FROM driverStandings GROUP BY driverId ORDER BY totalWins DESC LIMIT 1 ), DriverAveragePoints AS ( SELECT driverId, AVG(points) AS averagePoints FROM driverStandings WHERE driverId = (SELECT driverId FROM MostWinningDriver) GROUP BY driverId ) SELECT d.driverRef, d.nationality, ap.averagePoints FROM drivers d JOIN MostWinningDriver mwd ON d.driverId = mwd.driverId JOIN DriverAveragePoints ap ON d.driverId = ap.driverId;
SELECT forename, surname, 2022 - CAST(strftime('%Y', dob) AS INTEGER) + 1 AS age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;
SELECT c.name, c.circuitRef, c.location, c.country FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE strftime('%Y', r.date) BETWEEN '1990' AND '2000' GROUP BY r.circuitId HAVING COUNT(*) = 4;
SELECT c.name AS circuit_name, c.location AS circuit_location, r.name AS race_name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'USA' AND r.year = 2006;
SELECT r.name AS race_name, c.name AS circuit_name, c.location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE strftime('%Y', r.date) = '2005' AND strftime('%m', r.date) = '09';
SELECT r.* FROM races r JOIN results rs ON r.raceId = rs.raceId JOIN drivers d ON rs.driverId = d.driverId WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND rs.position < 10;
SELECT COUNT(*) FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN circuits c ON ra.circuitId = c.circuitId JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher' AND c.name = 'Sepang International Circuit' AND r.position = 1;
WITH SchumacherId AS ( SELECT driverId FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher' ), FastestLap AS ( SELECT raceId, MIN(milliseconds) AS fastest_milliseconds FROM lapTimes WHERE driverId = (SELECT driverId FROM SchumacherId) GROUP BY raceId ORDER BY fastest_milliseconds LIMIT 1 ) SELECT r.name AS race_name, r.year FROM FastestLap fl JOIN races r ON fl.raceId = r.raceId;
SELECT AVG(results.points) AS average_points FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND races.year = 2000;
SELECT races.name, results.points FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = (SELECT MIN(year) FROM results JOIN races ON results.raceId = races.raceId WHERE driverId = <driverId>) AND driverId = <driverId>;
SELECT r.name AS race_name, c.country AS hosting_country, r.date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;
WITH MaxLaps AS ( SELECT raceId, MAX(laps) AS max_laps FROM results GROUP BY raceId ), RaceWithMaxLaps AS ( SELECT m.raceId, m.max_laps, r.name AS race_name, r.year, c.location FROM MaxLaps m JOIN races r ON m.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE m.max_laps = (SELECT MAX(max_laps) FROM MaxLaps) ) SELECT race_name, year, location, max_laps FROM RaceWithMaxLaps;
SELECT (COUNT(CASE WHEN c.country = 'Germany' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.name = 'European Grand Prix';
SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';
SELECT name, lat FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1;
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';
SELECT country FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits);
SELECT COUNT(*) FROM drivers WHERE code IS NULL;
SELECT nationality FROM drivers ORDER BY dob ASC LIMIT 1;
SELECT surname FROM drivers WHERE nationality = 'Italian';
SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';
SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';
SELECT c.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2009 AND r.name = 'Spanish Grand Prix';
SELECT DISTINCT r.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone Circuit';
SELECT r.name AS race_name, r.year, r.round, r.date, r.time, r.url AS race_url, c.name AS circuit_name, c.location, c.country, c.url AS circuit_url FROM races r INNER JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name LIKE '%Silverstone%';
SELECT races.time FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Abu Dhabi' AND races.year = 2010;
SELECT COUNT(*) AS total_races_in_italy FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';
SELECT r.date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Barcelona-Catalunya' OR c.location = 'Barcelona-Catalunya';
SELECT circuits.url FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';
SELECT MIN(r.fastestLapTime) AS fastest_lap_time FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';
SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.fastestLapSpeed = ( SELECT MAX(fastestLapSpeed) FROM results );
SELECT d.driverRef FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.name = 'Australian Grand Prix' AND ra.year = 2008 AND r.position = 1;
SELECT r.year, rs.name, c.location, c.country FROM results res JOIN drivers d ON res.driverId = d.driverId JOIN races r ON res.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';
SELECT r.name AS race_name, rs.year, rs.round FROM results AS re JOIN drivers AS d ON re.driverId = d.driverId JOIN races AS rs ON re.raceId = rs.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY re.rank ASC LIMIT 1;
SELECT MAX(CAST(fastestLapSpeed AS REAL)) AS fastest_lap_speed FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';
SELECT DISTINCT r.year FROM drivers d JOIN results re ON d.driverId = re.driverId JOIN races r ON re.raceId = r.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';
SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';
SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix';
SELECT COUNT(DISTINCT r.driverId) FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.time IS NOT NULL;
SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';
SELECT r.time FROM results r JOIN races rc ON r.raceId = rc.raceId WHERE rc.year = 2008 AND rc.name = 'Australian Grand Prix' AND r.positionOrder = 2;
SELECT d.forename, d.surname, d.url FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND r.positionOrder = 1;
SELECT COUNT(*) FROM results AS r JOIN drivers AS d ON r.driverId = d.driverId WHERE r.raceId = ( SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix' ) AND d.nationality = 'American';
SELECT COUNT(DISTINCT r.driverId) FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.time IS NOT NULL AND r.driverId IN ( SELECT DISTINCT driverId FROM results WHERE time IS NOT NULL );
SELECT SUM(points) AS total_points FROM results WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' );
SELECT AVG( CAST(SUBSTR(fastestLapTime, 1, INSTR(fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(fastestLapTime, INSTR(fastestLapTime, ':') + 1) AS REAL) ) AS average_fastest_lap_time_seconds FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND fastestLapTime IS NOT NULL;
SELECT (CAST(completed_races AS REAL) / total_races) AS completion_rate FROM (SELECT (SELECT COUNT(*) FROM results WHERE raceId = XYZ) AS total_races, (SELECT COUNT(*) FROM results WHERE raceId = XYZ AND time IS NOT NULL) AS completed_races );
None
SELECT COUNT(*) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia';
SELECT lat, lng FROM circuits WHERE country = 'USA';
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > '1980-12-31';
SELECT AVG(cr.points) AS average_points FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE c.nationality = 'British';
SELECT c.name AS constructor_name, SUM(cs.points) AS total_points FROM constructorStandings cs JOIN constructors c ON cs.constructorId = c.constructorId GROUP BY cs.constructorId ORDER BY total_points DESC LIMIT 1;
SELECT c.name FROM constructorResults cr JOIN constructors c ON cr.constructorId = c.constructorId WHERE cr.raceId = 291 AND cr.points = 0;
SELECT COUNT(*) FROM ( SELECT cr.constructorId FROM constructorResults cr JOIN constructors c ON cr.constructorId = c.constructorId JOIN races r ON cr.raceId = r.raceId WHERE c.nationality = 'Japanese' AND cr.points = 0 GROUP BY cr.constructorId HAVING COUNT(DISTINCT cr.raceId) = 2 ) subquery;
SELECT DISTINCT c.name FROM constructorStandings cs JOIN constructors c ON cs.constructorId = c.constructorId WHERE cs.position = 1;
SELECT COUNT(DISTINCT c.constructorId) AS French_Constructors_Over50Laps FROM constructors c JOIN results r ON c.constructorId = r.constructorId JOIN lapTimes l ON r.raceId = l.raceId AND r.driverId = l.driverId WHERE c.nationality = 'French' AND l.lap > 50;
SELECT 100.0 * (SELECT COUNT(*) FROM japanese_race_completions) / (SELECT COUNT(*) FROM japanese_driver_races) AS race_completion_percentage;
SELECT r.year, AVG((SUBSTR(res.time, 1, 2) * 3600) + (SUBSTR(res.time, 4, 2) * 60) + SUBSTR(res.time, 7)) AS avg_champion_time_seconds FROM results res JOIN races r ON res.raceId = r.raceId WHERE res.position = 1 AND res.time IS NOT NULL GROUP BY r.year;
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE strftime('%Y', d.dob) > '1975' AND r.rank = 2;
SELECT COUNT(*) FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.nationality = 'Italian' AND r.time IS NULL;
SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.fastestLapTime = ( SELECT MIN(fastestLapTime) FROM results WHERE fastestLapTime IS NOT NULL );
SELECT lt.lap AS fastest_lap_number FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN lapTimes lt ON lt.raceId = ra.raceId AND lt.driverId = r.driverId WHERE ra.year = 2009 AND r.position = 1 AND lt.milliseconds = ( SELECT MIN(lt2.milliseconds) FROM lapTimes lt2 WHERE lt2.raceId = ra.raceId AND lt2.driverId = r.driverId );
SELECT AVG(fastestLapSpeed) AS averageFastestLapSpeed FROM results WHERE raceId = ( SELECT raceId FROM races WHERE year = 2009 AND name = 'Spanish Grand Prix' );
SELECT r.name, r.year FROM races r JOIN ( SELECT raceId, MIN(milliseconds) as min_time FROM results WHERE milliseconds IS NOT NULL GROUP BY raceId ORDER BY min_time ASC LIMIT 1 ) shortest ON r.raceId = shortest.raceId;
WITH eligible_drivers AS ( SELECT d.driverId FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE strftime('%Y', d.dob) < '1985' AND ra.year BETWEEN 2000 AND 2005 AND r.laps > 50 GROUP BY d.driverId ) SELECT (COUNT(ed.driverId) * 100.0) / (SELECT COUNT(DISTINCT r.driverId) FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.year BETWEEN 2000 AND 2005 ) AS percentage FROM eligible_drivers ed;
SELECT COUNT(DISTINCT lt.driverId) AS FrenchDriversWithFastLap FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE d.nationality = 'French' AND lt.milliseconds < 120000;
SELECT code FROM drivers WHERE nationality = 'America';
SELECT raceId FROM races WHERE year = 2009;
SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18;
WITH youngest_drivers AS ( SELECT code, nationality FROM drivers ORDER BY dob DESC LIMIT 3 ) SELECT COUNT(*) FROM youngest_drivers WHERE nationality = 'Netherlandic' OR nationality = 'Dutch';
SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';
SELECT COUNT(*) FROM drivers WHERE nationality = 'Australian' AND STRFTIME('%Y', dob) = '1980';
SELECT d.forename || ' ' || d.surname AS driver_name, d.dob, d.nationality, MIN(l.time) AS earliest_lap_time FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE d.nationality = 'German' AND strftime('%Y', d.dob) BETWEEN '1980' AND '1990' GROUP BY d.driverId ORDER BY earliest_lap_time ASC LIMIT 3;
SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1;
SELECT drivers.driverId, drivers.code FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE strftime('%Y', drivers.dob) = '1971' AND results.fastestLapTime IS NOT NULL;
SELECT d.driverId, d.forename, d.surname, d.dob, MAX(l.time) AS latestLapTime FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE d.nationality = 'Spanish' AND strftime('%Y', d.dob) < '1982' GROUP BY d.driverId ORDER BY latestLapTime DESC LIMIT 10;
SELECT r.year FROM races r JOIN results res ON r.raceId = res.raceId WHERE res.fastestLapTime IS NOT NULL ORDER BY time(res.fastestLapTime) ASC LIMIT 1;
SELECT r.year FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId ORDER BY lt.milliseconds DESC LIMIT 1;
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY milliseconds ASC LIMIT 5;
SELECT COUNT(*) FROM results WHERE raceId > 50 AND raceId < 100 AND time IS NOT NULL AND statusId = 2;
SELECT c.location, c.lat, c.lng, COUNT(*) AS race_count FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE c.country = 'Austria' GROUP BY c.location, c.lat, c.lng;
SELECT raceId FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY COUNT(*) DESC LIMIT 1;
SELECT d.driverRef, d.nationality, d.dob FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 23 AND q.q2 IS NOT NULL;
WITH YoungestDriver AS ( SELECT driverId FROM drivers WHERE dob = (SELECT MAX(dob) FROM drivers) ), FirstQualifyingRace AS ( SELECT q.raceId, MIN(r.date) AS firstRaceDate FROM qualifying q JOIN races r ON q.raceId = r.raceId WHERE q.driverId = (SELECT driverId FROM YoungestDriver) GROUP BY q.driverId ) SELECT r.name, r.date, r.time FROM FirstQualifyingRace fqr JOIN races r ON fqr.raceId = r.raceId;
SELECT COUNT(DISTINCT results.resultId) AS disqualified_count FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN status ON results.statusId = status.statusId WHERE drivers.nationality = 'American' AND results.statusId = 2;
SELECT constructors.name, constructors.url, SUM(constructorStandings.points) as total_points FROM constructorStandings JOIN constructors ON constructorStandings.constructorId = constructors.constructorId WHERE constructors.nationality = 'Italian' GROUP BY constructors.constructorId ORDER BY total_points DESC LIMIT 1;
SELECT c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId GROUP BY c.constructorId ORDER BY SUM(cs.wins) DESC LIMIT 1;
SELECT d.forename, d.surname, lt.time FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId JOIN drivers d ON lt.driverId = d.driverId WHERE r.name = 'French Grand Prix' AND lt.lap = 3 ORDER BY lt.milliseconds DESC LIMIT 1;
SELECT raceId, MIN(milliseconds) AS fastest_first_lap_time FROM lapTimes WHERE lap = 1 GROUP BY raceId ORDER BY fastest_first_lap_time LIMIT 1;
SELECT raceId FROM races WHERE year = 2006 AND name = 'United States Grand Prix';
SELECT d.driverRef, d.forename, d.surname, AVG(CAST(p.duration AS REAL)) AS avg_duration FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE d.nationality = 'German' AND strftime('%Y', d.dob) BETWEEN '1980' AND '1985' GROUP BY d.driverId ORDER BY avg_duration ASC LIMIT 5;
SELECT d.forename || ' ' || d.surname AS champion_name, r.time AS finish_time FROM races ra JOIN results r ON ra.raceId = r.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.year = 2008 AND ra.name = 'Canadian Grand Prix' AND r.position = 1;
SELECT raceId FROM races WHERE year = 2009 AND name = 'Singapore Grand Prix';
SELECT forename || ' ' || surname AS full_name, dob FROM drivers WHERE nationality = 'Austrian' AND strftime('%Y', dob) BETWEEN '1981' AND '1991';
SELECT forename || ' ' || surname AS full_name, url AS wiki_page, dob FROM drivers WHERE nationality = 'German' AND strftime('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC;
SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring';
SELECT cr.name AS constructor_name, cr.nationality, SUM(cres.points) AS total_points FROM races r JOIN circuits c ON r.circuitId = c.circuitId JOIN constructorResults cres ON r.raceId = cres.raceId JOIN constructors cr ON cres.constructorId = cr.constructorId WHERE c.name = 'Monaco Grand Prix' AND r.year BETWEEN 1980 AND 2010 GROUP BY cres.constructorId ORDER BY total_points DESC LIMIT 1;
SELECT AVG(r.points) AS average_score FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND ra.name LIKE '%Turkey%';
SELECT AVG(race_count) AS annual_average_races FROM ( SELECT COUNT(*) AS race_count FROM races WHERE date BETWEEN '2000-01-01' AND '2009-12-31' GROUP BY strftime('%Y', date) );
SELECT nationality, COUNT(*) as num_drivers FROM drivers GROUP BY nationality ORDER BY num_drivers DESC LIMIT 1;
SELECT driverId FROM driverStandings WHERE position = 91 LIMIT 1;
SELECT r.name FROM races r JOIN results res ON r.raceId = res.raceId WHERE res.fastestLapTime = ( SELECT MIN(fastestLapTime) FROM results ) LIMIT 1;
SELECT c.location || ', ' || c.country AS full_location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.date = (SELECT MAX(date) FROM races);
SELECT d.forename || ' ' || d.surname AS full_name FROM qualifying q JOIN races r ON q.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId JOIN drivers d ON q.driverId = d.driverId WHERE r.year = 2008 AND c.name = 'Marina Bay Street Circuit' AND q.q3 = (SELECT MIN(q3) FROM qualifying WHERE raceId = r.raceId);
SELECT MAX(dob) AS youngest_dob FROM drivers;
SELECT raceId FROM races WHERE name = 'Canadian Grand Prix';
WITH OldestRacer AS ( SELECT driverId, forename || ' ' || surname AS full_name, dob FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers) ) SELECT orc.full_name, SUM(ds.wins) AS total_wins FROM OldestRacer orc JOIN driverStandings ds ON orc.driverId = ds.driverId GROUP BY orc.full_name;
SELECT MAX(milliseconds) AS longest_pitstop_duration FROM pitStops;
SELECT MIN(milliseconds) AS fastest_lap_time FROM lapTimes;
SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';
SELECT ps.lap FROM pitStops ps JOIN races r ON ps.raceId = r.raceId JOIN drivers d ON ps.driverId = d.driverId WHERE r.year = 2011 AND r.name = 'Australian Grand Prix' AND d.forename = 'Lewis' AND d.surname = 'Hamilton';
SELECT d.forename || ' ' || d.surname AS driver_name, ps.stop, ps.lap, ps.time AS pit_stop_time, ps.duration FROM pitStops ps JOIN races r ON ps.raceId = r.raceId JOIN drivers d ON ps.driverId = d.driverId WHERE r.year = 2011 AND r.name = 'Australian Grand Prix' ORDER BY d.surname, ps.stop;
SELECT MIN(lt.time) AS lap_record FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';
SELECT d.forename || ' ' || d.surname AS full_name FROM lapTimes l JOIN drivers d ON l.driverId = d.driverId WHERE l.milliseconds = ( SELECT MIN(milliseconds) FROM lapTimes );
WITH Hamilton_fastest_laps AS ( SELECT r.raceId, MIN(r.fastestLapTime) AS fastest_lap_time FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' GROUP BY r.raceId ), Hamilton_race_positions AS ( SELECT hfl.raceId, res.position, res.fastestLapTime FROM Hamilton_fastest_laps hfl JOIN results res ON hfl.raceId = res.raceId AND hfl.fastest_lap_time = res.fastestLapTime WHERE res.driverId IN (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') ) SELECT c.name AS circuit_name, hrp.position, hrp.fastestLapTime FROM Hamilton_race_positions hrp JOIN races r ON hrp.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId;
SELECT circuitId FROM circuits WHERE name = 'Austrian Grand Prix Circuit';
SELECT c.name AS circuit_name, lt.lap, lt.time as lap_record_time, d.forename || ' ' || d.surname as driver_name FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN lapTimes lt ON r.raceId = lt.raceId JOIN drivers d ON lt.driverId = d.driverId WHERE c.country = 'Italy' GROUP BY c.circuitId, lt.lap HAVING lt.time = MIN(lt.time) ORDER BY c.name, lt.time;
SELECT * FROM races WHERE raceId = <race_id> AND date = (SELECT date FROM races WHERE raceId = <race_id> ORDER BY date DESC LIMIT 1)
WITH fastest_lap AS ( SELECT lt.raceId, lt.driverId, MIN(lt.milliseconds) AS fastest_time FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Austrian Grand Prix Circuit' GROUP BY lt.raceId, lt.driverId ORDER BY fastest_time LIMIT 1 ) SELECT ps.driverId, ps.raceId, SUM(ps.milliseconds) AS pit_stop_time FROM pitStops ps JOIN fastest_lap fl ON ps.raceId = fl.raceId AND ps.driverId = fl.driverId GROUP BY ps.driverId, ps.raceId;
SELECT c.lat, c.lng FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE lt.time = '1:29.488';
SELECT AVG(milliseconds) AS average_pit_stop_time FROM pitStops WHERE driverId = LH_ID;
SELECT AVG(lt.milliseconds) AS average_lap_time_milliseconds FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Italy';
SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
SELECT player_name, height FROM Player WHERE height = (SELECT MAX(height) FROM Player);
SELECT preferred_foot FROM Player_Attributes WHERE potential = ( SELECT MIN(potential) FROM Player_Attributes );
SELECT COUNT(DISTINCT player_api_id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low';
SELECT player_api_id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5;
SELECT le.name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals FROM Match m JOIN League le ON m.league_id = le.id WHERE m.season = '2015/2016' GROUP BY m.league_id ORDER BY total_goals DESC LIMIT 1;
SELECT T.team_long_name, COUNT(M.id) AS loss_count FROM Match M JOIN Team T ON M.home_team_api_id = T.team_api_id WHERE M.season = '2015/2016' AND M.home_team_goal < M.away_team_goal GROUP BY M.home_team_api_id ORDER BY loss_count ASC LIMIT 1;
SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id ORDER BY PA.penalties DESC LIMIT 10;
WITH LeagueID AS ( SELECT id FROM League WHERE name = 'Scotland Premier League' ), AwayTeamWins AS ( SELECT away_team_api_id, COUNT(*) as wins FROM Match WHERE league_id = (SELECT id FROM LeagueID) AND season = '2009/2010' AND away_team_goal > home_team_goal GROUP BY away_team_api_id ) SELECT Team.team_long_name, ATW.wins FROM AwayTeamWins AS ATW JOIN Team ON ATW.away_team_api_id = Team.team_api_id ORDER BY ATW.wins DESC LIMIT 1;
SELECT buildUpPlaySpeed FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 4;
SELECT l.name, COUNT(*) AS draw_count FROM Match m JOIN League l ON m.league_id = l.id WHERE m.season = '2015/2016' AND m.home_team_goal = m.away_team_goal GROUP BY l.id ORDER BY draw_count DESC LIMIT 1;
SELECT p.player_name, (strftime('%Y', 'now') - strftime('%Y', p.birthday)) - (strftime('%m-%d', 'now') < strftime('%m-%d', p.birthday)) AS current_age FROM Player p JOIN Player_Attributes pa ON p.player_fifa_api_id = pa.player_fifa_api_id WHERE pa.sprint_speed >= 97 AND pa.date BETWEEN '2013-01-01' AND '2015-12-31';
SELECT L.name AS league_name, COUNT(M.id) AS match_count FROM Match M JOIN League L ON M.league_id = L.id GROUP BY M.league_id ORDER BY match_count DESC LIMIT 1;
SELECT AVG(height) AS average_height FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';
WITH Ratings2010 AS ( SELECT player_api_id, overall_rating FROM Player_Attributes WHERE substr(date, 1, 4) = '2010' ), AverageRating AS ( SELECT AVG(overall_rating) AS avg_rating FROM Ratings2010 ), AboveAverage AS ( SELECT player_api_id, overall_rating FROM Ratings2010, AverageRating WHERE overall_rating > avg_rating ), MaxAboveAverage AS ( SELECT MAX(overall_rating) AS max_rating FROM AboveAverage ) SELECT player_api_id FROM AboveAverage, MaxAboveAverage WHERE overall_rating = max_rating;
SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59;
WITH AvgBuildUpPlayPassing AS ( SELECT AVG(buildUpPlayPassing) AS avg_passing FROM Team_Attributes WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL ) SELECT team_long_name FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE strftime('%Y', Team_Attributes.date) = '2012' AND buildUpPlayPassing > (SELECT avg_passing FROM AvgBuildUpPlayPassing) AND buildUpPlayPassing IS NOT NULL GROUP BY team_long_name;
SELECT 100.0 * SUM(pa.preferred_foot = 'left') / COUNT(pa.player_fifa_api_id) AS percentage_left_foot FROM Player AS p JOIN Player_Attributes AS pa ON p.player_fifa_api_id = pa.player_fifa_api_id WHERE p.birthday BETWEEN '1987-01-01' AND '1992-12-31';
SELECT l.name AS league_name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals FROM Match m JOIN League l ON m.league_id = l.id GROUP BY l.id ORDER BY total_goals ASC LIMIT 5;
SELECT AVG(long_shots) AS average_long_shots FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Ahmed Samir Farag' );
SELECT p.player_name, AVG(pa.heading_accuracy) AS avg_heading_accuracy FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.height > 180 GROUP BY p.player_name ORDER BY avg_heading_accuracy DESC LIMIT 10;
WITH AverageChance AS ( SELECT AVG(chanceCreationPassing) AS avg_passing FROM Team_Attributes WHERE buildUpPlayDribblingClass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00' ), FilteredTeams AS ( SELECT ta.team_api_id, ta.chanceCreationPassing FROM Team_Attributes ta JOIN AverageChance ac ON ta.chanceCreationPassing < ac.avg_passing WHERE ta.buildUpPlayDribblingClass = 'Normal' AND ta.date >= '2014-01-01 00:00:00' AND ta.date <= '2014-01-31 00:00:00' ) SELECT t.team_long_name, ft.chanceCreationPassing FROM FilteredTeams ft JOIN Team t ON ft.team_api_id = t.team_api_id ORDER BY ft.chanceCreationPassing DESC;
SELECT DISTINCT l.name FROM Match m JOIN League l ON m.league_id = l.id WHERE m.season = '2009/2010' GROUP BY l.name HAVING AVG(m.home_team_goal) > AVG(m.away_team_goal);
SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';
SELECT player_name FROM Player WHERE substr(birthday, 1, 4) = '1970' AND substr(birthday, 6, 2) = '10';
SELECT pa.attacking_work_rate FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Franco Zennaro';
SELECT TA.buildUpPlayPositioningClass FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'ADO Den Haag';
SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = 123456 AND date = '2014-09-18 00:00:00';
SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM player_id) AND strftime('%Y', date) = '2011';
SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Scotland Premier League' AND Match.season = '2015/2016';
WITH YoungestPlayer AS ( SELECT player_api_id FROM Player ORDER BY date(birthday) DESC LIMIT 1 ) SELECT pa.preferred_foot FROM Player_Attributes pa JOIN YoungestPlayer yp ON pa.player_api_id = yp.player_api_id LIMIT 1;
SELECT p.player_name, pa.potential FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.potential = (SELECT MAX(potential) FROM Player_Attributes);
SELECT COUNT(*) FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.weight < 130 AND Player_Attributes.preferred_foot = 'left';
SELECT T.team_short_name FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE TA.chanceCreationPassingClass = 'Risky';
SELECT pa.defensive_work_rate FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'David Wilson';
SELECT p.birthday FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes );
SELECT League.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Netherlands';
SELECT AVG(home_team_goal) AS average_home_team_goal FROM Match WHERE country_id = (SELECT id FROM Country WHERE name = 'Poland') AND season = '2010/2011';
SELECT player_api_id, MAX(height) AS max_height FROM Player;
SELECT player_name FROM Player WHERE height > 180;
SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam %' AND weight > 170;
SELECT DISTINCT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.overall_rating > 80 AND strftime('%Y', pa.date) BETWEEN '2008' AND '2010';
SELECT pa.potential FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Aaron Doran';
SELECT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.preferred_foot = 'left';
SELECT Team.team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeedClass = 'Fast';
SELECT TA.buildUpPlayPassingClass FROM Team AS T JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE T.team_short_name = 'CLB';
SELECT T.team_short_name FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlayPassing > 70;
SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.height > 170 AND strftime('%Y', Player_Attributes.date) BETWEEN '2010' AND '2015';
SELECT player_name, height FROM Player WHERE height = (SELECT MIN(height) FROM Player);
SELECT Country.name FROM League JOIN Country ON League.country_id = Country.id WHERE League.name = 'Italy Serie A';
SELECT t.team_short_name FROM Team_Attributes ta JOIN Team t ON ta.team_api_id = t.team_api_id WHERE ta.buildUpPlaySpeed = 31 AND ta.buildUpPlayDribbling = 53 AND ta.buildUpPlayPassing = 32;
SELECT AVG(overall_rating) AS average_rating FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran' );
SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', Match.date) BETWEEN '2008-08' AND '2008-10';
SELECT t.team_short_name FROM Team t JOIN Match m ON t.team_api_id = m.home_team_api_id WHERE m.home_team_goal = 10;
WITH MaxBalance AS ( SELECT MAX(balance) AS highest_balance FROM Player_Attributes ) SELECT p.player_name, pa.player_api_id, pa.balance, pa.potential FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.balance = (SELECT highest_balance FROM MaxBalance) AND pa.potential = 61;
SELECT Abdou_Diallo_Control.avg_ball_control - Aaron_Appindangoye_Control.avg_ball_control AS difference_in_avg_control FROM Abdou_Diallo_Control, Aaron_Appindangoye_Control;
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';
SELECT player_name, birthday FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1;
SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);
SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';
SELECT Country.name FROM League JOIN Country ON League.country_id = Country.id WHERE League.name = 'Belgium Jupiler League';
SELECT l.name FROM League l JOIN Country c ON l.country_id = c.id WHERE c.name = 'Germany';
SELECT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes );
SELECT COUNT(*) FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE strftime('%Y', p.birthday) < '1986' AND pa.defensive_work_rate = 'high';
SELECT player_name, MAX(crossing) AS max_crossing FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') GROUP BY player_name ORDER BY max_crossing DESC LIMIT 1;
SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk');
SELECT COUNT(DISTINCT p.player_api_id) FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.height > 180 AND pa.volleys > 70;
SELECT P.player_name FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE PA.volleys > 70 AND PA.dribbling > 70;
SELECT COUNT(*) FROM Match JOIN Country ON Match.country_id = Country.id WHERE Country.name = 'Belgium' AND Match.season = '2008/2009';
WITH OldestPlayer AS ( SELECT player_api_id FROM Player WHERE birthday = (SELECT MIN(birthday) FROM Player) ) SELECT pa.long_passing FROM Player_Attributes pa JOIN OldestPlayer op ON pa.player_api_id = op.player_api_id;
SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Belgium Jupiler League' AND strftime('%Y', Match.date) = '2009' AND strftime('%m', Match.date) = '04';
SELECT league_id, COUNT(*) AS match_count FROM Match WHERE season = '2008/2009' GROUP BY league_id ORDER BY match_count DESC LIMIT 1;
SELECT AVG(overall_rating) AS average_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE strftime('%Y', p.birthday) < '1986';
WITH PlayerRatings AS ( SELECT PA.overall_rating, P.player_name FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE P.player_name IN ('Ariel Borysiuk', 'Paulin Puel') ) SELECT (( (SELECT overall_rating FROM PlayerRatings WHERE player_name = 'Ariel Borysiuk') - (SELECT overall_rating FROM PlayerRatings WHERE player_name = 'Paulin Puel') ) * 1.0 / (SELECT overall_rating FROM PlayerRatings WHERE player_name = 'Paulin Puel') ) * 100 AS percentage_increase;
SELECT AVG(buildUpPlaySpeed) AS average_build_up_play_speed FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team.team_long_name = 'Heart of Midlothian';
SELECT AVG(pa.overall_rating) AS average_overall_rating FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Pietro Marino';
SELECT SUM(PA.crossing) AS total_crossing_score FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Aaron Lennox';
SELECT ta.chanceCreationPassing AS highest_chance_creation_passing_score, ta.chanceCreationPassingClass AS classification FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE t.team_long_name = 'Ajax' ORDER BY ta.chanceCreationPassing DESC LIMIT 1;
SELECT pa.preferred_foot FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Abdou Diallo';
SELECT MAX(PA.overall_rating) AS highest_rating FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Dorlan Pabon';
SELECT AVG(m.away_team_goal) AS average_goals FROM Match m JOIN Team t ON m.away_team_api_id = t.team_api_id JOIN Country c ON m.country_id = c.id WHERE t.team_long_name = 'Parma' AND c.name = 'Italy';
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = 77 AND pa.date = '2016-06-23' ORDER BY p.birthday ASC LIMIT 1;
SELECT pa.overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Aaron Mooy' AND pa.date = '2016-02-04 00:00:00';
SELECT pa.potential FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Francesco Parravicini' AND pa.date = '2010-08-30 00:00:00';
SELECT pa.attacking_work_rate FROM Player AS p JOIN Player_Attributes AS pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Francesco Migliore' AND pa.date = '2015-05-01 00:00:00';
SELECT Player_Attributes.defensive_work_rate FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Kevin Berigaud' AND Player_Attributes.date = '2013-02-22 00:00:00';
SELECT date FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant' ) AND crossing = ( SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant' ) ) ORDER BY date ASC LIMIT 1;
SELECT ta.buildUpPlaySpeedClass FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE t.team_long_name = 'Willem II' AND ta.date = '2012-02-22 00:00:00';
SELECT buildUpPlayDribblingClass FROM Team_Attributes WHERE team_api_id = ( SELECT team_api_id FROM Team WHERE team_short_name = 'LEI' ) AND date = '2015-09-10 00:00:00';
SELECT ta.buildUpPlayPassingClass FROM Team_Attributes ta JOIN Team t ON ta.team_api_id = t.team_api_id WHERE t.team_long_name = 'FC Lorient' AND ta.date = '2010-02-22';
SELECT ta.chanceCreationPassingClass FROM Team AS t JOIN Team_Attributes AS ta ON t.team_api_id = ta.team_api_id WHERE t.team_long_name = 'PEC Zwolle' AND ta.date = '2013-09-20 00:00:00';
SELECT team_api_id FROM Team WHERE team_long_name = 'Hull City';
SELECT ta.defenceAggressionClass FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE t.team_long_name = 'Hannover 96' AND ta.date = '2015-09-10 00:00:00';
SELECT AVG(pa.overall_rating) AS average_overall_rating FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Marko Arnautovic' AND pa.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00';
SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan' OR player_name = 'Jordan Bowery';
SELECT player_name, height FROM Player ORDER BY height DESC LIMIT 5;
SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10;
SELECT player_name FROM Player WHERE (julianday('now') - julianday(birthday)) / 365.25 > 34;
SELECT SUM(home_team_goal) AS total_home_goals FROM Match WHERE home_player_1 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_2 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_3 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_4 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_5 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_6 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_7 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_8 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_9 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_10 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_11 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon');
SELECT SUM(away_team_goal) AS total_away_goals FROM Match WHERE away_player_1 IN (SELECT player_api_id FROM player_ids) OR away_player_2 IN (SELECT player_api_id FROM player_ids) OR away_player_3 IN (SELECT player_api_id FROM player_ids) OR away_player_4 IN (SELECT player_api_id FROM player_ids) OR away_player_5 IN (SELECT player_api_id FROM player_ids) OR away_player_6 IN (SELECT player_api_id FROM player_ids) OR away_player_7 IN (SELECT player_api_id FROM player_ids) OR away_player_8 IN (SELECT player_api_id FROM player_ids) OR away_player_9 IN (SELECT player_api_id FROM player_ids) OR away_player_10 IN (SELECT player_api_id FROM player_ids) OR away_player_11 IN (SELECT player_api_id FROM player_ids);
None
SELECT Player.player_name FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 10;
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.potential = ( SELECT MAX(potential) FROM Player_Attributes );
SELECT DISTINCT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.attacking_work_rate = 'high';
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.finishing = 1 ORDER BY (julianday('now') - julianday(p.birthday)) DESC LIMIT 1;
SELECT p.player_name FROM Player p JOIN <Assumed_Player_Nationality_Link> pnl ON p.player_api_id = pnl.player_api_id JOIN Country c ON pnl.country_id = c.id WHERE c.name = 'Belgium';
None
SELECT Country.name AS country_name, AVG(Player.weight) AS avg_weight FROM Player JOIN Match ON Player.player_api_id IN ( Match.home_player_1, Match.home_player_2, Match.home_player_3, Match.home_player_4, Match.home_player_5, Match.home_player_6, Match.home_player_7, Match.home_player_8, Match.home_player_9, Match.home_player_10, Match.home_player_11, Match.away_player_1, Match.away_player_2, Match.away_player_3, Match.away_player_4, Match.away_player_5, Match.away_player_6, Match.away_player_7, Match.away_player_8, Match.away_player_9, Match.away_player_10, Match.away_player_11 ) JOIN Country ON Match.country_id = Country.id GROUP BY Country.name ORDER BY avg_weight DESC LIMIT 1;
SELECT t.team_long_name FROM Team t JOIN Team_Attributes ta ON t.team_fifa_api_id = ta.team_fifa_api_id WHERE ta.buildUpPlaySpeedClass = 'Slow';
SELECT T.team_short_name FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE TA.chanceCreationPassingClass = 'Safe';
SELECT AVG(Player.height) AS average_height FROM Player JOIN Match ON Match.home_player_1 = Player.player_api_id JOIN Country ON Match.country_id = Country.id WHERE Country.name = 'Italy';
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990';
SELECT (SELECT jumping FROM Player_Attributes WHERE id = 6) - (SELECT jumping FROM Player_Attributes WHERE id = 23) AS jumping_difference
SELECT player_fifa_api_id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential LIMIT 3;
SELECT COUNT(DISTINCT player_api_id) AS number_of_players FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left';
WITH Filtered_Players AS ( SELECT DISTINCT player_api_id FROM Player_Attributes WHERE strength > 80 AND stamina > 80 ), Total_Players AS ( SELECT DISTINCT player_api_id FROM Player_Attributes ) SELECT (CAST((SELECT COUNT(*) FROM Filtered_Players) AS REAL) / (SELECT COUNT(*) FROM Total_Players)) * 100 AS percentage_of_players
SELECT Country.name FROM Country JOIN League ON Country.id = League.country_id WHERE League.name = 'Poland Ekstraklasa';
SELECT home_team_goal, away_team_goal FROM Match WHERE date LIKE '2008-09-24%' AND league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League');
SELECT pa.sprint_speed, pa.agility, pa.acceleration FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Alexis Blin';
SELECT buildUpPlaySpeedClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'KSV Cercle Brugge';
SELECT COUNT(*) AS total_games FROM Match WHERE league_id = ( SELECT id FROM League WHERE name = 'Serie A' ) AND season = '2015/2016';
SELECT MAX(home_team_goal) AS highest_home_score FROM Match JOIN League ON Match.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Netherlands' AND League.name = 'Eredivisie';
SELECT MAX(weight) FROM Player;
SELECT L.name, COUNT(M.id) AS total_matches FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY M.league_id ORDER BY total_matches DESC LIMIT 1;
SELECT T.team_long_name FROM Match M JOIN Team T ON M.away_team_api_id = T.team_api_id ORDER BY M.away_team_goal DESC LIMIT 1;
SELECT P.player_name FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE PA.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes );
SELECT (COUNT(CASE WHEN height < 180 AND overall_rating > 70 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id;
SELECT COUNT(*) AS male_outpatients FROM Patient WHERE SEX = 'M' AND Admission = '-';
SELECT (COUNT(CASE WHEN strftime('%Y', Birthday) > '1930' AND SEX = 'F' THEN 1 END) * 100.0) / COUNT(CASE WHEN SEX = 'F' THEN 1 END) AS percentage_female_born_after_1930 FROM Patient;
WITH PatientsAsBasis AS ( SELECT ID FROM Patient WHERE CAST(strftime('%Y', Birthday) AS INTEGER) BETWEEN 1930 AND 1940 ), Inpatients AS ( SELECT ID FROM PatientsAsBasis WHERE ID IN (SELECT ID FROM Patient WHERE Admission = '+') ) SELECT ( (SELECT COUNT(*) FROM Inpatients) * 1.0 / COUNT(*) ) * 100 AS PercentageOfInpatients FROM PatientsAsBasis;
WITH SLE_Patients AS ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' ) SELECT (SELECT COUNT(*) FROM SLE_Patients sp JOIN Patient p ON sp.ID = p.ID WHERE p.Admission = '-') * 1.0 / (SELECT COUNT(*) FROM SLE_Patients sp JOIN Patient p ON sp.ID = p.ID WHERE p.Admission = '+') AS Outpatient_Inpatient_Ratio ;
SELECT Date FROM Laboratory WHERE ID = 30609;
SELECT p.SEX, p.Birthday, e.`Examination Date`, e.Symptoms FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.ID = 163109;
SELECT p.ID, p.SEX, p.Birthday FROM Laboratory l JOIN Patient p ON p.ID = l.ID WHERE l.LDH > 500;
SELECT p.ID, strftime('%Y', 'now') - strftime('%Y', p.Birthday) AS age FROM Patient p INNER JOIN Examination e ON p.ID = e.ID WHERE e.RVVT = '+';
SELECT p.ID, p.SEX, p.Diagnosis FROM Examination e INNER JOIN Patient p ON e.ID = p.ID WHERE e.Thrombosis = 2;
SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE strftime('%Y', Patient.Birthday) = '1937' AND Laboratory.`T-CHO` >= 250;
SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.ALB < 3.5;
WITH FemalePatients AS ( SELECT ID FROM Patient WHERE SEX = 'F' ), FemalePatientsWithAbnormalTP AS ( SELECT DISTINCT p.ID FROM FemalePatients p JOIN Laboratory l ON p.ID = l.ID WHERE l.TP < 6.0 OR l.TP > 8.5 ) SELECT (CAST(COUNT(fatp.ID) AS FLOAT) / COUNT(fp.ID)) * 100 AS percentage FROM FemalePatients fp LEFT JOIN FemalePatientsWithAbnormalTP fatp ON fp.ID = fatp.ID;
SELECT AVG(`aCL IgG`) AS average_acL_IgG FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Admission = '+' AND strftime('%Y', 'now') - strftime('%Y', Patient.Birthday) >= 50 AND `aCL IgG` IS NOT NULL;
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Description) = '1997' AND Admission = '-';
SELECT MIN(strftime('%Y', `First Date`) - strftime('%Y', Birthday)) AS Youngest_Age FROM Patient WHERE Birthday IS NOT NULL AND `First Date` IS NOT NULL;
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.Thrombosis = 1 AND strftime('%Y', E.`Examination Date`) = '1997' AND P.SEX = 'F';
SELECT MAX(strftime('%Y', Birthday)) - MIN(strftime('%Y', Birthday)) AS age_gap FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE TG >= 200;
SELECT Symptoms, Diagnosis FROM Examination WHERE ID IN (SELECT ID FROM YoungestPatient);
SELECT COUNT(DISTINCT l.ID) / 12.0 AS average_patients_per_month FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.Date BETWEEN '1998-01-01' AND '1998-12-31' AND p.SEX = 'M';
SELECT lab.Date AS "Laboratory Work Date", (strftime('%Y', pat."First Date") - strftime('%Y', pat.Birthday)) AS "Age at First Date" FROM Patient pat JOIN Laboratory lab ON pat.ID = lab.ID WHERE pat.Diagnosis = 'SJS' AND pat.Birthday = (SELECT MIN(Birthday) FROM Patient WHERE Diagnosis = 'SJS') LIMIT 1;
WITH Abnormal_UA AS ( SELECT P.SEX FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE (P.SEX = 'M' AND L.UA <= 8.0) OR (P.SEX = 'F' AND L.UA <= 6.5) ) SELECT (SELECT COUNT(*) FROM Abnormal_UA WHERE SEX = 'M') AS Male_Count, (SELECT COUNT(*) FROM Abnormal_UA WHERE SEX = 'F') AS Female_Count, CAST((SELECT COUNT(*) FROM Abnormal_UA WHERE SEX = 'M') AS REAL) / CAST((SELECT COUNT(*) FROM Abnormal_UA WHERE SEX = 'F') AS REAL) AS Male_to_Female_Ratio;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE (strftime('%Y', e.`Examination Date`) - strftime('%Y', p.`First Date`)) >= 1 OR ((strftime('%m', e.`Examination Date`) > strftime('%m', p.`First Date`)) AND (strftime('%Y', e.`Examination Date`) - strftime('%Y', p.`First Date`) >= 1)) OR ((strftime('%d', e.`Examination Date`) >= strftime('%d', p.`First Date`)) AND (strftime('%m', e.`Examination Date`) = strftime('%m', p.`First Date`)) AND (strftime('%Y', e.`Examination Date`) - strftime('%Y', p.`First Date`) >= 1));
SELECT COUNT(DISTINCT Examination.ID) AS underage_patient_count FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE CAST(strftime('%Y', `Examination Date`) AS INTEGER) - CAST(strftime('%Y', Birthday) AS INTEGER) < 18 AND `Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.`T-BIL` > 2.0;
SELECT Diagnosis, COUNT(*) AS diagnosis_count FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY diagnosis_count DESC LIMIT 1;
SELECT AVG(1991 - CAST(strftime('%Y', Birthday) AS INTEGER)) AS Average_Age FROM Patient WHERE ID IN ( SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1991-10-01' AND '1991-10-31' );
SELECT (strftime('%Y', Examination.`Examination Date`) - strftime('%Y', Patient.Birthday)) AS Age, Examination.Diagnosis FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.HGB = ( SELECT MAX(HGB) FROM Laboratory )
SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';
SELECT ID, Date, `T-CHO`, CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'High' END AS Cholesterol_Status FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04';
SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' ORDER BY `First Date` ASC LIMIT 1;
SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19';
SELECT p.SEX FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.GPT = 9 AND l.Date = '1992-06-12';
SELECT 1992 - CAST(strftime('%Y', Birthday) AS INTEGER) AS age_at_time FROM Patient WHERE ID = ( SELECT ID FROM Laboratory WHERE UA = 8.4 AND Date = '1991-10-21' );
SELECT COUNT(*) FROM Laboratory WHERE ID = ( SELECT ID FROM Patient WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS' ) AND strftime('%Y', Date) = '1995';
SELECT Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Diagnosis = 'SLE' AND Examination.`Examination Date` = '1997-01-27';
SELECT ID FROM Patient WHERE Birthday = '1959-03-01';
SELECT ((Total_November_TCHO - Total_December_TCHO) / Total_November_TCHO) * 100 AS Decrease_Rate FROM November_TCHO, December_TCHO;
SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Diagnosis LIKE '%Behcet%' AND e.`Examination Date` >= '1997-01-01' AND e.`Examination Date` <= '1997-12-31';
SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4;
SELECT ID FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) = '1964' AND Admission = '+';
WITH AverageIgM AS ( SELECT AVG(`aCL IgM`) AS Avg_IgM FROM Examination WHERE `aCL IgM` IS NOT NULL ), Threshold AS ( SELECT Avg_IgM * 1.2 AS IgM_Threshold FROM AverageIgM ) SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Threshold t ON e.`aCL IgM` > t.IgM_Threshold WHERE e.Thrombosis = 2 AND e.`ANA Pattern` = 'S' AND e.`aCL IgM` IS NOT NULL;
WITH ProteinuriaWithinRange AS ( SELECT DISTINCT ID FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30 ), UricAcidBelowRange AS ( SELECT DISTINCT ID FROM Laboratory WHERE UA <= 6.5 ), BothConditions AS ( SELECT pwr.ID FROM ProteinuriaWithinRange pwr JOIN UricAcidBelowRange uab ON pwr.ID = uab.ID ) SELECT (SELECT COUNT(*) FROM BothConditions) * 1.0 / (SELECT COUNT(*) FROM ProteinuriaWithinRange) * 100.0 AS Percentage
SELECT (SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS behcet_percentage FROM Patient WHERE SEX = 'M' AND strftime('%Y', `First Date`) = '1981';
SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.Date LIKE '1991-10%' AND L.`T-BIL` < 2.0;
SELECT COUNT(DISTINCT Patient.ID) FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.`ANA Pattern` != 'p' AND Patient.SEX = 'F' AND strftime('%Y', Patient.Birthday) BETWEEN '1980' AND '1989';
SELECT ID FROM Examination WHERE Diagnosis = 'PSS';
SELECT AVG(lab.ALB) AS average_albumin_level FROM Patient pat JOIN Laboratory lab ON pat.ID = lab.ID WHERE pat.SEX = 'F' AND lab.PLT > 400 AND pat.Diagnosis = 'SLE';
SELECT Symptoms, COUNT(*) AS Frequency FROM Examination WHERE Diagnosis LIKE '%SLE%' GROUP BY Symptoms ORDER BY Frequency DESC LIMIT 1;
SELECT Description AS "First Documented Date", Diagnosis AS "Disease" FROM Patient WHERE ID = 48473;
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';
SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE strftime('%Y', Date) = '1997' AND (TP <= 6 OR TP >= 8.5);
SELECT (100.0 * SUM(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) / COUNT(*)) AS Proportion FROM Examination WHERE Symptoms LIKE '%thrombocytopenia%';
WITH patient_1980_ra AS ( SELECT * FROM Patient WHERE strftime('%Y', Birthday) = '1980' AND Diagnosis = 'RA' ) SELECT 100.0 * SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) / COUNT(*) AS percentage_of_women FROM patient_1980_ra;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND p.Admission = '-' AND e.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND e.Diagnosis = 'BEHCET';
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'F' AND l.WBC < 3.5;
SELECT julianday(e."Examination Date") - julianday(p."First Date") AS days_difference FROM Examination e INNER JOIN Patient p ON e.ID = p.ID WHERE p.ID = 821298;
SELECT p.ID, p.SEX, l.UA, CASE WHEN (p.SEX = 'M' AND l.UA > 8.0) OR (p.SEX = 'F' AND l.UA > 6.5) THEN 'Within Normal Range' ELSE 'Not Within Normal Range' END AS Uric_Acid_Status FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.ID = 57266;
SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60;
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GOT < 60
SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.GPT >= 60;
SELECT p.Diagnosis FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.GPT > 60 ORDER BY p.Birthday ASC;
SELECT AVG(LDH) AS Average_LDH FROM Laboratory WHERE LDH < 500;
SELECT p.ID, CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', p.Birthday) AS INTEGER) AS age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.LDH BETWEEN 600 AND 800;
SELECT p.ID, p.Admission FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.ALP < 300;
SELECT ID FROM Patient WHERE Birthday = '1982-04-01';
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TP < 6.0;
SELECT Patient.ID, Laboratory.Date, (Laboratory.TP - 8.5) AS TP_Deviation FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Laboratory.TP > 8.5;
SELECT p.ID, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND (l.ALB <= 3.5 OR l.ALB >= 5.5) ORDER BY p.Birthday DESC;
SELECT Patient.ID, Laboratory.ALB, CASE WHEN Laboratory.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range' ELSE 'Outside Normal Range' END AS `Albumin Status` FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE strftime('%Y', Patient.Birthday) = '1982';
WITH Female_Patients AS ( SELECT p.ID FROM Patient p WHERE p.SEX = 'F' ), High_UA_Females AS ( SELECT DISTINCT l.ID FROM Laboratory l JOIN Female_Patients fp ON l.ID = fp.ID WHERE l.UA > 6.5 ), Total_Female_Patients AS ( SELECT COUNT(DISTINCT ID) AS Total_Count FROM Female_Patients ) SELECT (SELECT COUNT(*) FROM High_UA_Females) * 100.0 / (SELECT Total_Count FROM Total_Female_Patients) AS Percentage_High_UA_Female
WITH Latest_Laboratory AS ( SELECT l.ID, MAX(l.Date) AS LatestDate FROM Laboratory l GROUP BY l.ID ), Filtered_Laboratory AS ( SELECT l.ID, l.UA, p.SEX FROM Laboratory l INNER JOIN Latest_Laboratory ll ON l.ID = ll.ID AND l.Date = ll.LatestDate INNER JOIN Patient p ON l.ID = p.ID WHERE (p.SEX = 'M' AND l.UA < 8.0) OR (p.SEX = 'F' AND l.UA < 6.5) ) SELECT AVG(UA) AS Average_UA_Index FROM Filtered_Laboratory;
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.UN = 29;
SELECT DISTINCT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'RA' AND Laboratory.UN < 30;
SELECT COUNT(DISTINCT L.ID) AS Male_Patients_With_High_CRE FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.SEX = 'M' AND L.CRE >= 1.5;
WITH Elevated_Creatinine_Patients AS ( SELECT l.ID, p.SEX FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.CRE >= 1.5 ) SELECT CASE WHEN SUM(SEX = 'M') > SUM(SEX = 'F') THEN 'True' ELSE 'False' END AS More_Male_Patients FROM Elevated_Creatinine_Patients;
SELECT MAX(`T-BIL`) AS max_bilirubin FROM Laboratory;
SELECT p.SEX, COUNT(*) AS PatientCount FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.`T-BIL` >= 2.0 GROUP BY p.SEX;
SELECT p.ID, l.`T-CHO` FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = (SELECT MIN(Birthday) FROM Patient) ORDER BY l.`T-CHO` DESC LIMIT 1;
SELECT AVG(strftime('%Y', 'now') - strftime('%Y', Birthday)) AS average_age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.`T-CHO` >= 250;
SELECT p.ID, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TG > 300;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TG >= 200 AND (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) > 50;
SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.CPK < 250;
SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE strftime('%Y', Patient.Birthday) BETWEEN '1936' AND '1956' AND Patient.SEX = 'M' AND Laboratory.CPK >= 250;
SELECT Patient.ID, Patient.SEX, (CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', Birthday) AS INTEGER)) AS age FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE GLU >= 180 AND `T-CHO` < 250;
SELECT p.ID, l.GLU FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE GLU < 180 AND strftime('%Y', p.Description) >= '1991';
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.WBC <= 3.5 OR l.WBC >= 9.0 GROUP BY p.SEX, p.ID ORDER BY p.SEX, (julianday('now') - julianday(p.Birthday)) / 365.25 ASC;
SELECT Patient.ID, (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) as age, Patient.Diagnosis FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.RBC < 3.5;
SELECT p.ID, p.SEX, p.Birthday, l.RBC, p.Admission FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'F' AND (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) >= 50 AND (l.RBC <= 3.5 OR l.RBC >= 6.0);
SELECT DISTINCT p.ID, p.SEX FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.HGB < 10;
SELECT p.ID, p.SEX FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Diagnosis = 'SLE' AND l.HGB > 10 AND l.HGB < 17 AND p.Birthday = ( SELECT MIN(Birthday) FROM Patient p2 JOIN Laboratory l2 ON p2.ID = l2.ID WHERE p2.Diagnosis = 'SLE' AND l2.HGB > 10 AND l2.HGB < 17 ) LIMIT 1;
SELECT p.ID, CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', p.Birthday) AS INTEGER) AS age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.HCT >= 52 GROUP BY p.ID HAVING COUNT(l.ID) >= 2;
SELECT AVG(HCT) AS Average_Hematocrit_Level FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;
SELECT COUNT(DISTINCT L.ID) AS Patients_High_PLT FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.PLT > 400;
SELECT p.ID, p.SEX, p.Birthday, l.Date, l.PLT FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.Date LIKE '1984%' AND (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) < 50 AND l.PLT BETWEEN 100 AND 400;
WITH EligiblePatients AS ( SELECT P.ID FROM Patient P WHERE (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 55 ), AbnormalPTFemales AS ( SELECT COUNT(*) AS FemaleCount FROM EligiblePatients EP JOIN Laboratory L ON EP.ID = L.ID JOIN Patient P ON EP.ID = P.ID WHERE P.SEX = 'F' AND L.PT >= 14 ), TotalPatientsWithPT AS ( SELECT COUNT(*) AS TotalCount FROM EligiblePatients EP JOIN Laboratory L ON EP.ID = L.ID WHERE L.PT >= 14 ) SELECT (FemaleCount * 1.0 / TotalCount) * 100 AS FemalePercentage FROM AbnormalPTFemales, TotalPatientsWithPT;
SELECT DISTINCT p.ID, p.SEX, p.Birthday, p.Description, p.`First Date`, p.Admission, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE strftime('%Y', p.`First Date`) > '1992' AND l.PT < 14;
SELECT COUNT(*) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE `Examination Date` > '1997-01-01' AND APTT < 45;
SELECT COUNT(DISTINCT L.ID) FROM Laboratory L JOIN Examination E ON L.ID = E.ID WHERE L.APTT > 45 AND E.Thrombosis = 3;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.WBC >= 3.5 AND l.WBC <= 9.0 AND (l.FG <= 150 OR l.FG >= 450);
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday > '1980-01-01' AND (Laboratory.FG < 150 OR Laboratory.FG > 450);
SELECT DISTINCT p.Diagnosis FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.`U-PRO` >= 30;
SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.`U-PRO` > 0 AND l.`U-PRO` < 30 AND p.Diagnosis = 'SLE';
SELECT COUNT(DISTINCT ex.ID) FROM Examination ex JOIN Laboratory lab ON ex.ID = lab.ID WHERE lab.IGG < 900 AND ex.Symptoms = 'abortion';
SELECT COUNT(DISTINCT l.ID) FROM Laboratory l JOIN Examination e ON l.ID = e.ID WHERE l.IGG BETWEEN 900 AND 2000 AND e.Symptoms IS NOT NULL;
WITH Max_IgA_Patient AS ( SELECT ID, MAX(IGA) AS MaxIgA FROM Laboratory WHERE IGA BETWEEN 80 AND 500 GROUP BY ID ORDER BY MaxIgA DESC LIMIT 1 ) SELECT p.Diagnosis FROM Patient p JOIN Max_IgA_Patient m ON p.ID = m.ID;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.IGA BETWEEN 80 AND 500 AND strftime('%Y', p.`First Date`) >= '1990';
SELECT p.Diagnosis, COUNT(p.Diagnosis) as diagnosis_count FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.IGM NOT BETWEEN 40 AND 400 GROUP BY p.Diagnosis ORDER BY diagnosis_count DESC LIMIT 1;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE (l.CRP LIKE '+' OR l.CRP LIKE '-' OR l.CRP < 1.0) AND p.Description IS NULL;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE ( (l.CRP NOT IN ('+-', '-') AND l.CRP >= 1.0) 
SELECT COUNT(DISTINCT ex.ID) FROM Examination ex JOIN Laboratory lab ON ex.ID = lab.ID WHERE lab.RA IN ('-', '+-') AND ex.KCT = '+';
SELECT DISTINCT Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Birthday >= '1995-01-01' AND RA IN ('-', '+-');
SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.RF < 20 AND (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) > 60;
SELECT COUNT(DISTINCT Patient.ID) AS patient_count FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.RF < 20 AND Examination.Thrombosis = 0;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID WHERE l.C3 > 35 AND e.`ANA Pattern` = 'P';
SELECT e.ID FROM Laboratory l JOIN Examination e ON l.ID = e.ID WHERE (l.HCT < 29 OR l.HCT > 52) ORDER BY e.`aCL IgA` DESC LIMIT 1;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.Thrombosis = 1 AND l.C4 > 10;
SELECT COUNT(DISTINCT Patient.ID) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE (Laboratory.RNP = '-' OR Laboratory.RNP = '+-') AND Patient.Admission = '+';
SELECT P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.RNP NOT IN ('-', '+-') ORDER BY P.Birthday DESC LIMIT 1;
SELECT COUNT(DISTINCT e.ID) FROM Laboratory l JOIN Examination e ON l.ID = e.ID WHERE l.SM IN ('-', '+-') AND e.Thrombosis = 1;
SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.SM NOT IN ('-', '+-') ORDER BY p.Birthday DESC LIMIT 3;
SELECT DISTINCT E.ID FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE E.`Examination Date` >= '1997-01-01' AND L.SC170 IN ('-', '+-');
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID WHERE l.SC170 IN ('-', '+-') AND p.SEX = 'M' AND e.Symptoms = 'vertigo';
SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.SSA IN ('-', '+-') AND strftime('%Y', P.`First Date`) < '1990';
SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.SSA NOT IN ('-', '+-') ORDER BY p.`First Date` ASC LIMIT 1;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID WHERE (l.SSB = 'negative' OR l.SSB = '0') AND e.Diagnosis = 'SLE';
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.SSB IN ('-', '±') AND e.Symptoms IS NOT NULL;
SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.CENTROMEA IN ('-', '+-') AND L.SSB IN ('-', '+-') AND P.SEX = 'M';
SELECT DISTINCT p.ID, p.Diagnosis FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.DNA IS NOT NULL AND l.DNA >= 8;
SELECT COUNT(DISTINCT lab.ID) FROM Laboratory lab JOIN Patient pat ON lab.ID = pat.ID WHERE lab.DNA < 8 AND pat.Description IS NULL;
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.`DNA-II` >= 8 AND p.Admission = '+';
WITH abnormal_got_patients AS ( SELECT DISTINCT l.ID FROM Laboratory l WHERE l.GOT >= 60 ), sle_diagnosed_patients AS ( SELECT ap.ID FROM abnormal_got_patients ap JOIN Patient p ON ap.ID = p.ID WHERE p.Diagnosis = 'SLE' ) SELECT (CAST((SELECT COUNT(*) FROM sle_diagnosed_patients) AS REAL) / CAST((SELECT COUNT(*) FROM abnormal_got_patients) AS REAL)) * 100 AS percentage_sle_abnormal_got
SELECT COUNT(DISTINCT Patient.ID) AS num_male_patients_in_normal_range FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.GOT < 60;
SELECT MAX(P.Birthday) AS Youngest_Birthday FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.GOT >= 60;
SELECT p.Birthday FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.GPT < 60 ORDER BY l.GPT DESC LIMIT 3;
SELECT COUNT(DISTINCT Laboratory.ID) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.GPT < 60 AND Patient.SEX = 'M';
WITH MaxLdhPatient AS ( SELECT ID, MAX(LDH) AS max_ldh FROM Laboratory WHERE LDH < 500 GROUP BY ID ), PatientWithMaxLdh AS ( SELECT ID FROM MaxLdhPatient WHERE max_ldh = (SELECT MAX(max_ldh) FROM MaxLdhPatient) ) SELECT MIN(`First Date`) AS `First Recorded Date` FROM Patient WHERE ID IN (SELECT ID FROM PatientWithMaxLdh);
WITH LatestPatient AS ( SELECT ID FROM Patient WHERE `First Date` = (SELECT MAX(`First Date`) FROM Patient) ) SELECT lab.Date FROM Laboratory lab JOIN LatestPatient lp ON lab.ID = lp.ID WHERE lab.LDH >= 500 ORDER BY lab.Date DESC LIMIT 1;
SELECT COUNT(DISTINCT l.ID) FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.ALP >= 300 AND p.Admission = '+';
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.ALP < 300;
SELECT DISTINCT p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TP < 6.0;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Diagnosis = 'SJS' AND l.TP > 6.0 AND l.TP < 8.5;
SELECT ID, Date FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5 ORDER BY ALB DESC LIMIT 1;
SELECT COUNT(DISTINCT L.ID) FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.SEX = 'M' AND L.ALB > 3.5 AND L.ALB < 5.5 AND L.TP BETWEEN 6.0 AND 8.5;
WITH MaxUA AS ( SELECT Laboratory.ID, MAX(Laboratory.UA) AS Max_UA FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND Laboratory.UA <= 6.50 GROUP BY Laboratory.ID ), MaxUAPatient AS ( SELECT ID FROM MaxUA ORDER BY Max_UA DESC LIMIT 1 ) SELECT Examination.`aCL IgG`, Examination.`aCL IgM`, Examination.`aCL IgA` FROM Examination JOIN MaxUAPatient ON Examination.ID = MaxUAPatient.ID;
SELECT MAX(e.ANA) AS highest_ANA FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.CRE < 1.5;
WITH Highest_aCL_IgA AS ( SELECT MAX(`aCL IgA`) AS max_aCL_IgA FROM Examination ), Normal_Creatinine_Patients AS ( SELECT DISTINCT ID FROM Laboratory WHERE CRE < 1.5 ) SELECT DISTINCT e.ID FROM Examination e JOIN Highest_aCL_IgA h ON e.`aCL IgA` = h.max_aCL_IgA JOIN Normal_Creatinine_Patients ncp ON e.ID = ncp.ID;
SELECT COUNT(DISTINCT l.ID) FROM Laboratory l JOIN Examination e ON l.ID = e.ID WHERE l.`T-BIL` >= 2.0 AND e.`ANA Pattern` LIKE '%P%'
SELECT Examination.ANA FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.`T-BIL` = ( SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0 );
SELECT COUNT(DISTINCT l.ID) FROM Laboratory l JOIN Examination e ON l.ID = e.ID WHERE l.`T-CHO` >= 250 AND e.KCT = '-';
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID WHERE l.`T-CHO` < 250 AND e.`ANA Pattern` = 'P';
SELECT COUNT(DISTINCT l.ID) FROM Laboratory l JOIN Examination e ON l.ID = e.ID WHERE l.TG < 200 AND e.Symptoms IS NOT NULL;
SELECT p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TG < 200 AND l.TG = (SELECT MAX(TG) FROM Laboratory WHERE TG < 200);
SELECT DISTINCT e.ID FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE e.Thrombosis = 0 AND l.CPK < 250;
SELECT COUNT(DISTINCT lab.ID) FROM Laboratory AS lab JOIN Examination AS ex ON lab.ID = ex.ID WHERE lab.CPK < 250 AND ( ex.KCT = '+' OR ex.RVVT = '+' OR ex.LAC = '+' );
SELECT MIN(P.Birthday) AS Oldest_Patient_Birthday FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.GLU > 180;
SELECT COUNT(*) FROM Laboratory l JOIN Examination e ON l.ID = e.ID WHERE l.GLU < 180 AND e.Thrombosis = 0;
SELECT COUNT(DISTINCT p.ID) AS NumberOfPatients FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '+' AND l.WBC BETWEEN 3.5 AND 9.0;
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'SLE' AND Laboratory.WBC >= 3.5 AND Laboratory.WBC <= 9.0;
SELECT DISTINCT Laboratory.ID FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE (Laboratory.RBC <= 3.5 OR Laboratory.RBC >= 6.0) AND Patient.Admission = '-';
SELECT COUNT(DISTINCT l.ID) FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.PLT > 100 AND l.PLT < 400 AND p.Diagnosis IS NOT NULL;
SELECT Laboratory.ID, Laboratory.PLT FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.Diagnosis = 'MCTD' AND Laboratory.PLT > 100 AND Laboratory.PLT < 400;
SELECT AVG(L.PT) AS Average_Prothrombin_Time FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.PT < 14;
SELECT COUNT(DISTINCT e.ID) AS number_of_patients FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE (e.Thrombosis = 2 OR e.Thrombosis = 1) AND l.PT < 14;
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';
SELECT member.first_name || ' ' || member.last_name AS full_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design';
SELECT COUNT(DISTINCT attendance.link_to_member) AS number_of_attendees FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';
SELECT m.phone FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women\'s Soccer';
SELECT COUNT(*) FROM member WHERE member_id IN ( SELECT link_to_member FROM attendance WHERE link_to_event = ( SELECT event_id FROM event WHERE event_name = 'Women''s Soccer' ) ) AND t_shirt_size = 'Medium';
SELECT e.event_name FROM attendance a JOIN event e ON a.link_to_event = e.event_id GROUP BY a.link_to_event ORDER BY COUNT(a.link_to_member) DESC LIMIT 1;
SELECT m.major_name, m.college FROM member AS mem JOIN major AS m ON mem.link_to_major = m.major_id WHERE mem.position = 'Vice President';
SELECT event.event_name FROM attendance JOIN member ON attendance.link_to_member = member.member_id JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';
SELECT COUNT(DISTINCT a.link_to_event) AS event_count FROM attendance a JOIN member m ON a.link_to_member = m.member_id JOIN event e ON a.link_to_event = e.event_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison' AND strftime('%Y', e.event_date) = '2019';
SELECT COUNT(*) AS meeting_count FROM event WHERE event_id IN ( SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 10 ) AND type = 'Meeting';
SELECT DISTINCT e.event_name FROM attendance a JOIN event e ON a.link_to_event = e.event_id GROUP BY a.link_to_event HAVING COUNT(a.link_to_member) > 20;
WITH MeetingEvents AS ( SELECT e.event_id FROM event e WHERE e.type = 'Meeting' AND strftime('%Y', e.event_date) = '2020' ) SELECT AVG(attendance_count) FROM ( SELECT COUNT(a.link_to_member) AS attendance_count FROM attendance a JOIN MeetingEvents me ON a.link_to_event = me.event_id GROUP BY a.link_to_event ) AS SubQuery;
SELECT expense_description, MAX(cost) AS max_cost FROM expense;
SELECT COUNT(*) AS num_members FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT m.first_name || ' ' || m.last_name AS full_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud';
SELECT m.last_name FROM member m JOIN major j ON m.link_to_major = j.major_id WHERE j.major_name = 'Law and Constitutional Studies';
SELECT z.county FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Sherri' AND m.last_name = 'Ramsey';
SELECT member_id FROM member WHERE first_name = 'Tyler' AND last_name = 'Hewitt';
SELECT SUM(i.amount) AS total_funds_received FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE m.position = 'Vice President';
SELECT SUM(b.spent) AS total_spent FROM budget AS b JOIN event AS e ON b.link_to_event = e.event_id WHERE b.category = 'Food' AND e.event_name = 'September Meeting';
SELECT z.city, z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.position = 'President';
SELECT DISTINCT member.first_name || ' ' || member.last_name AS full_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';
SELECT SUM(b.spent) AS total_spent FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Advertisement' AND e.event_name = 'September Meeting';
SELECT DISTINCT major.department FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.last_name IN ('Pierce', 'Guidi');
SELECT event_id FROM event WHERE event_name = 'October Speaker';
SELECT e.expense_id, e.expense_description, e.approved FROM event ev JOIN budget b ON ev.event_id = b.link_to_event JOIN expense e ON b.budget_id = e.link_to_budget WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08';
WITH filtered_expenses AS ( SELECT e.cost FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.first_name = 'Elijah' AND m.last_name = 'Allen' AND (strftime('%m', e.expense_date) = '09' OR strftime('%m', e.expense_date) = '10') ) SELECT AVG(cost) AS average_cost FROM filtered_expenses;
SELECT (SELECT SUM(spent) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2019') - (SELECT SUM(spent) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2020') AS difference_in_spent;
SELECT location FROM event WHERE event_name = 'Spring Budget Review';
SELECT e.cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'Posters' AND ev.event_date = '2019-09-04';
SELECT remaining FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1;
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';
SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';
SELECT z.county FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Adela' AND m.last_name = 'O\'Gallagher';
SELECT COUNT(*) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Meeting' AND budget.remaining < 0;
SELECT SUM(amount) AS total_budget_amount FROM budget WHERE link_to_event = ( SELECT event_id FROM event WHERE event_name = 'September Speaker' );
SELECT e.status FROM expense ex JOIN budget b ON ex.link_to_budget = b.budget_id JOIN event e ON b.link_to_event = e.event_id WHERE ex.expense_description = 'Post Cards, Posters' AND ex.expense_date = '2019-8-20';
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason';
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Human Development and Family Studies' AND member.t_shirt_size = 'Large';
SELECT z.type FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Christof' AND m.last_name = 'Nielson';
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';
SELECT z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';
SELECT major.department FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President';
SELECT i.date_received FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.first_name = 'Connor' AND m.last_name = 'Hilton' AND i.source = 'Dues';
WITH FirstDues AS ( SELECT link_to_member, MIN(date_received) AS first_date FROM income WHERE source = 'Dues' GROUP BY link_to_member ORDER BY first_date ASC LIMIT 1 ) SELECT member.first_name || ' ' || member.last_name AS full_name FROM FirstDues JOIN member ON FirstDues.link_to_member = member.member_id;
WITH EventSums AS ( SELECT e.event_name, SUM(b.amount) AS total_amount FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Advertisement' AND e.event_name IN ('Yearly Kickoff', 'October Meeting') GROUP BY e.event_name ) SELECT ROUND((yk.total_amount * 1.0) / om.total_amount, 2) AS times_more FROM (SELECT total_amount FROM EventSums WHERE event_name = 'Yearly Kickoff') yk, (SELECT total_amount FROM EventSums WHERE event_name = 'October Meeting') om;
WITH event_info AS ( SELECT event_id FROM event WHERE event_name = 'November Speaker' ), total_budget AS ( SELECT SUM(amount) AS total_amount FROM budget WHERE link_to_event IN (SELECT event_id FROM event_info) ), parking_budget AS ( SELECT SUM(amount) AS parking_amount FROM budget WHERE category = 'Parking' AND link_to_event IN (SELECT event_id FROM event_info) ) SELECT (parking_budget.parking_amount * 1.0 / total_budget.total_amount) * 100 AS parking_percentage FROM parking_budget, total_budget;
SELECT SUM(cost) AS total_pizza_cost FROM expense WHERE expense_description = 'Pizza';
SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';
SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT z.city, z.county, z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Amy' AND m.last_name = 'Firth';
SELECT e.expense_description FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.remaining = (SELECT MIN(remaining) FROM budget);
SELECT m.member_id, m.first_name, m.last_name, m.email, m.position FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';
SELECT major.college, COUNT(member.member_id) AS member_count FROM member JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY member_count DESC LIMIT 1;
SELECT m.major_name FROM member mem JOIN major m ON mem.link_to_major = m.major_id WHERE mem.phone = '809-555-3360';
SELECT event.event_name FROM budget JOIN event ON budget.link_to_event = event.event_id ORDER BY budget.amount DESC LIMIT 1;
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position = 'Vice President';
SELECT COUNT(DISTINCT link_to_member) FROM attendance WHERE link_to_event = ( SELECT event_id FROM event WHERE event_name = "Women's Soccer" );
SELECT date_received FROM member JOIN income ON member.member_id = income.link_to_member WHERE first_name = 'Casey' AND last_name = 'Mason';
SELECT COUNT(*) AS member_count FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'MD';
SELECT COUNT(*) FROM attendance WHERE link_to_member = ( SELECT member_id FROM member WHERE phone = '954-555-6240' );
SELECT member.first_name || ' ' || member.last_name AS full_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';
SELECT e.event_id, e.event_name, MAX(b.spent / b.amount) AS max_spend_to_budget_ratio FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' AND b.amount > 0
SELECT COUNT(*) FROM member WHERE position = 'President';
SELECT MAX(spent) AS highest_spent FROM budget;
SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND substr(event_date, 1, 4) = '2020';
SELECT SUM(spent) AS total_food_spent FROM budget WHERE category = 'Food';
SELECT m.first_name || ' ' || m.last_name AS full_name FROM attendance a JOIN member m ON a.link_to_member = m.member_id GROUP BY a.link_to_member HAVING COUNT(a.link_to_event) > 7;
SELECT m.first_name, m.last_name FROM member m JOIN major maj ON m.link_to_major = maj.major_id JOIN attendance att ON m.member_id = att.link_to_member JOIN event e ON att.link_to_event = e.event_id WHERE maj.major_name = 'Interior Design' AND e.event_name = 'Community Theater';
SELECT m.first_name || ' ' || m.last_name AS full_name FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Georgetown' AND z.state = 'South Carolina';
SELECT COUNT(*) FROM income WHERE link_to_member = ( SELECT member_id FROM member WHERE first_name = 'Grant' AND last_name = 'Gilmour' );
SELECT m.first_name || ' ' || m.last_name AS full_name FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.amount > 40;
SELECT SUM(e.cost) AS total_expense FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'Yearly Kickoff';
SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff';
SELECT m.first_name || ' ' || m.last_name AS full_name, i.amount, i.source FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.amount = (SELECT MAX(amount) FROM income);
SELECT e.event_name FROM expense ex JOIN budget b ON ex.link_to_budget = b.budget_id JOIN event e ON b.link_to_event = e.event_id WHERE ex.cost = (SELECT MIN(cost) FROM expense);
SELECT (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN ex.cost ELSE 0 END) / SUM(ex.cost)) * 100 AS kickoff_percentage FROM expense ex JOIN budget b ON ex.link_to_budget = b.budget_id JOIN event e ON b.link_to_event = e.event_id;
SELECT CAST(SUM(CASE WHEN major.major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN major.major_name = 'Physics' THEN 1 ELSE 0 END) AS finance_to_physics_ratio FROM member JOIN major ON member.link_to_major = major.major_id;
SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY amount DESC LIMIT 1;
SELECT first_name || ' ' || last_name AS full_name, email FROM member WHERE position = 'Secretary';
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';
SELECT COUNT(DISTINCT link_to_member) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND strftime('%Y', event.event_date) = '2019';
SELECT member_id, link_to_major FROM member WHERE first_name = 'Luisa' AND last_name = 'Guidi';
SELECT AVG(spent) AS average_food_expense FROM budget WHERE category = 'Food' AND event_status = 'Closed';
SELECT event.event_name FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1;
SELECT COUNT(*) AS attendance_count FROM attendance WHERE link_to_member = @maya_member_id AND link_to_event = @womens_soccer_event_id;
SELECT (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) * 100.0 / COUNT(event_id)) AS community_service_percentage FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31';
SELECT e.cost FROM event ev JOIN budget b ON ev.event_id = b.link_to_event JOIN expense e ON b.budget_id = e.link_to_budget WHERE ev.event_name = 'September Speaker' AND e.expense_description = 'Posters';
SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1;
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' AND b.remaining < 0 ORDER BY b.remaining ASC LIMIT 1;
SELECT e.expense_description AS expense_type, SUM(e.cost) AS total_value FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND e.approved = 'Yes' GROUP BY e.expense_description;
SELECT category, amount FROM budget WHERE link_to_event = ( SELECT event_id FROM event WHERE event_name = 'April Speaker' ) ORDER BY amount ASC;
SELECT budget_id, category, amount FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1;
SELECT budget_id, category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;
SELECT SUM(cost) AS total_parking_cost FROM expense WHERE expense_description = 'Parking';
SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';
SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_cost FROM member AS m JOIN expense AS e ON m.member_id = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.member_id;
SELECT expense_description FROM expense WHERE link_to_member = ( SELECT member_id FROM member WHERE first_name = 'Sacha' AND last_name = 'Harrison' );
SELECT DISTINCT e.expense_description FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.t_shirt_size = 'X-Large';
SELECT m.zip FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE e.cost < 50;
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen';
SELECT m.position FROM member AS m JOIN major AS maj ON m.link_to_major = maj.major_id WHERE maj.major_name = 'Business';
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';
SELECT DISTINCT event.type FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 30;
SELECT DISTINCT b.category FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.location = 'MU 215';
SELECT b.category FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.event_date = '2020-03-24T12:00:00';
SELECT m.major_name FROM member me JOIN major m ON me.link_to_major = m.major_id WHERE me.position = 'Vice President';
SELECT (SUM(CASE WHEN m.major_name = 'Mathematics' THEN 1 ELSE 0 END) * 100.0 / COUNT(mem.member_id)) AS percentage_of_mathematics_majors FROM member mem JOIN major m ON mem.link_to_major = m.major_id;
SELECT DISTINCT b.category FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.location = 'MU 215';
SELECT COUNT(*) FROM income WHERE amount = 50;
SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';
SELECT COUNT(*) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences';
SELECT m.last_name, maj.department, maj.college FROM member m JOIN major maj ON m.link_to_major = maj.major_id WHERE maj.major_name = 'Environmental Engineering';
SELECT budget.category FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0;
SELECT z.city, z.state FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN zip_code z ON m.zip = z.zip_code WHERE ma.department = 'Electrical and Computer Engineering Department' AND m.position = 'Member';
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE e.type = 'Social' AND m.position = 'Vice President' AND e.location = '900 E. Washington St.';
SELECT m.last_name, m.position FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE e.expense_description = 'Pizza' AND e.expense_date = '2019-09-10';
SELECT m.last_name FROM member AS m JOIN attendance AS a ON m.member_id = a.link_to_member JOIN event AS e ON a.link_to_event = e.event_id WHERE m.position = 'Member' AND e.event_name = 'Women''s Soccer';
WITH MediumMembers AS ( SELECT member_id FROM member WHERE position = 'Member' AND t_shirt_size = 'Medium' ), MediumAmounts AS ( SELECT amount FROM income WHERE link_to_member IN (SELECT member_id FROM MediumMembers) ) SELECT (SUM(CASE WHEN amount = 50 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage FROM MediumAmounts;
SELECT DISTINCT city, county, state, short_state FROM zip_code WHERE type = 'PO Box';
SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico';
SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';
SELECT DISTINCT attendance.link_to_event FROM expense JOIN attendance ON expense.link_to_member = attendance.link_to_member WHERE expense.cost > 50;
SELECT m.member_id, m.first_name, m.last_name, a.link_to_event, e.event_name FROM expense ex JOIN member m ON ex.link_to_member = m.member_id JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE ex.approved = 'true' AND ex.expense_date BETWEEN '2019-01-10' AND '2019-11-19';
SELECT m.first_name, mj.college FROM member AS m JOIN major AS mj ON m.link_to_major = mj.major_id WHERE m.first_name = 'Katy' AND m.link_to_major = 'rec1N0upiVLy5esTO';
SELECT m.phone FROM member m JOIN major mj ON m.link_to_major = mj.major_id WHERE mj.major_name = 'Business' AND mj.college = 'College of Agriculture and Applied Sciences';
SELECT m.email FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE e.cost > 20 AND e.expense_date BETWEEN '2019-09-10' AND '2019-11-19';
SELECT COUNT(*) FROM member WHERE link_to_major = ( SELECT major_id FROM major WHERE major_name = 'education' AND college = 'College of Education & Human Services' );
WITH total_events AS ( SELECT COUNT(DISTINCT link_to_event) AS total_count FROM budget ), events_over_budget AS ( SELECT COUNT(DISTINCT link_to_event) AS over_budget_count FROM budget WHERE remaining < 0 ) SELECT (eob.over_budget_count * 100.0 / te.total_count) AS over_budget_percentage FROM total_events te, events_over_budget eob;
SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';
SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50;
SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large';
SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS po_box_percentage FROM zip_code;
SELECT event.event_name, event.location FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 0;
SELECT event.event_name, event.event_date FROM event JOIN expense ON expense.link_to_event = event.event_id WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100;
SELECT member.first_name || ' ' || member.last_name AS full_name, major.major_name FROM member JOIN expense ON member.member_id = expense.link_to_member JOIN major ON member.link_to_major = major.major_id WHERE expense.cost > 100;
WITH EventIncomeCount AS ( SELECT budget.link_to_event, COUNT(income.income_id) AS income_count FROM income JOIN budget ON income.link_to_member = budget.budget_id WHERE amount > 40 GROUP BY budget.link_to_event HAVING COUNT(income.income_id) > 40 ) SELECT z.city, z.county FROM EventIncomeCount eic JOIN event ev ON eic.link_to_event = ev.event_id JOIN zip_code z ON ev.location = z.zip_code;
WITH member_event_expenses AS ( SELECT e.link_to_member, COUNT(DISTINCT b.link_to_event) AS event_count, SUM(e.cost) AS total_cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id GROUP BY e.link_to_member HAVING event_count > 1 ), max_expense AS ( SELECT MAX(total_cost) AS max_total_cost FROM member_event_expenses ) SELECT m.first_name, m.last_name, mee.total_cost FROM member_event_expenses mee JOIN max_expense me ON mee.total_cost = me.max_total_cost JOIN member m ON mee.link_to_member = m.member_id;
SELECT AVG(cost) AS average_amount_paid FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member';
SELECT AVG(cost) AS avg_parking_cost FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.category = 'Parking'
SELECT (SUM(e.cost) / (SELECT COUNT(event_id) FROM event WHERE type = 'Game')) * 100.0 AS percentage_cost FROM expense AS e JOIN budget AS b ON e.link_to_budget = b.budget_id JOIN event AS ev ON b.link_to_event = ev.event_id WHERE ev.type = 'Game';
SELECT b.budget_id, MAX(e.cost) AS max_cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.expense_description = 'Water, chips, cookies' GROUP BY b.budget_id ORDER BY max_cost DESC LIMIT 1;
SELECT m.first_name || ' ' || m.last_name AS full_name FROM expense e JOIN member m ON e.link_to_member = m.member_id GROUP BY m.member_id ORDER BY SUM(e.cost) DESC LIMIT 5;
WITH AverageCost AS ( SELECT AVG(cost) AS avg_cost FROM expense ) SELECT m.first_name || ' ' || m.last_name AS full_name, m.phone AS contact_number FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE e.cost > (SELECT avg_cost FROM AverageCost);
WITH total_members AS ( SELECT COUNT(*) AS total FROM member ), members_by_state AS ( SELECT z.state, COUNT(*) AS count FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.state IN ('Maine', 'Vermont') GROUP BY z.state ), percentage_by_state AS ( SELECT state, (100.0 * count / (SELECT total FROM total_members)) AS percentage FROM members_by_state ) SELECT (SELECT percentage FROM percentage_by_state WHERE state = 'Maine') - (SELECT percentage FROM percentage_by_state WHERE state = 'Vermont') AS difference_in_percentage;
SELECT m.major_name, m.department FROM member mb JOIN major m ON mb.link_to_major = m.major_id WHERE mb.first_name = 'Garrett' AND mb.last_name = 'Gerke';
SELECT m.first_name || ' ' || m.last_name AS full_name, e.cost FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE e.expense_description = 'Water, Veggie tray, supplies';
SELECT m.last_name, m.phone FROM member m JOIN major j ON m.link_to_major = j.major_id WHERE j.major_name = 'Elementary Education';
SELECT b.category, b.amount FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.event_name = 'January Speaker';
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Food';
SELECT m.first_name || ' ' || m.last_name AS full_name, i.amount FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.date_received = '9/9/2019';
SELECT b.category FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.expense_description = 'Posters';
SELECT m.first_name || ' ' || m.last_name AS full_name, mj.college FROM member m JOIN major mj ON m.link_to_major = mj.major_id WHERE m.position = 'Secretary';
SELECT e.event_name, SUM(b.spent) AS total_spent FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name;
SELECT z.city FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Garrett' AND m.last_name = 'Girke';
SELECT m.first_name || ' ' || m.last_name AS full_name, m.position FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Lincolnton' AND z.state = 'North Carolina' AND z.zip_code = 28092;
SELECT COUNT(DISTINCT g.GasStationID) AS NumberOfGasStations FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE g.Country = 'CZE' AND p.Description = 'Premium gas';
SELECT (SELECT COUNT(*) FROM customers WHERE Currency = 'EUR') * 1.0 / (SELECT COUNT(*) FROM customers WHERE Currency = 'CZK') AS ratio_eur_to_czk;
SELECT ym.CustomerID, SUM(ym.Consumption) AS TotalConsumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE ym.Date BETWEEN '201201' AND '201212' AND c.Segment = 'LAM' GROUP BY ym.CustomerID ORDER BY TotalConsumption ASC LIMIT 1;
SELECT AVG(Consumption) / 12 AS Average_Monthly_Consumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND CAST(yearmonth.Date AS INTEGER) BETWEEN 201301 AND 201312;
SELECT y.CustomerID, SUM(y.Consumption) AS total_consumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE y.Date BETWEEN '201101' AND '201112' AND c.Currency = 'CZK' GROUP BY y.CustomerID ORDER BY total_consumption DESC LIMIT 1;
SELECT COUNT(DISTINCT y.CustomerID) AS CustomerCount FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Segment = 'KAM' AND y.Date BETWEEN '201201' AND '201212' GROUP BY y.CustomerID HAVING SUM(y.Consumption) < 30000;
SELECT ABS(SUM(CASE WHEN c.Currency = 'CZK' THEN ym.Consumption ELSE 0 END) - SUM(CASE WHEN c.Currency = 'EUR' THEN ym.Consumption ELSE 0 END)) AS Consumption_Difference FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE SUBSTR(ym.Date, 1, 6) BETWEEN '201201' AND '201212';
SELECT strftime('%Y', t.Date) AS Year, SUM(t.Amount) AS TotalGasUsage FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' GROUP BY Year ORDER BY TotalGasUsage DESC LIMIT 1;
SELECT c.Segment, SUM(y.Consumption) AS TotalConsumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1;
SELECT substr(ym.Date, 1, 4) AS Year, SUM(ym.Consumption) AS Total_Consumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Currency = 'CZK' GROUP BY Year ORDER BY Total_Consumption DESC LIMIT 1;
SELECT substr(ym.Date, 6, 2) AS PeakMonth
None
WITH YearlyConsumption AS ( SELECT c.Segment, SUBSTR(y.Date, 1, 4) AS Year, SUM(y.Consumption) AS TotalConsumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' AND y.Date BETWEEN '201201' AND '201312' GROUP BY c.Segment, SUBSTR(y.Date, 1, 4) ), PercentIncrease AS ( SELECT yc2013.Segment, ((yc2013.TotalConsumption - yc2012.TotalConsumption) / yc2012.TotalConsumption) * 100.0 AS PercentageIncrease FROM YearlyConsumption yc2012 JOIN YearlyConsumption yc2013 ON yc2012.Segment = yc2013.Segment WHERE yc2012.Year = '2012' AND yc2013.Year = '2013' ) SELECT Segment, MAX(PercentageIncrease) AS MaxPercentageIncrease, MIN(PercentageIncrease) AS MinPercentageIncrease FROM PercentIncrease GROUP BY Segment;
SELECT SUM(Consumption) AS total_consumption FROM yearmonth WHERE CustomerID = 6 AND substr(Date, 1, 6) BETWEEN '201308' AND '201311';
SELECT (SELECT COUNT(*) FROM gasstations WHERE Segment = 'discount' AND Country = 'Czech Republic') - (SELECT COUNT(*) FROM gasstations WHERE Segment = 'discount' AND Country = 'Slovakia') AS Discount_Gas_Station_Difference;
SELECT MAX(CASE WHEN CustomerID = 7 THEN Consumption ELSE 0 END) - MAX(CASE WHEN CustomerID = 5 THEN Consumption ELSE 0 END) AS ConsumptionDifference FROM yearmonth WHERE Date = '201304' AND CustomerID IN (5, 7);
SELECT COUNT(DISTINCT CustomerID) AS KorunaCustomers FROM transactions_1k t JOIN SMEs s ON t.CustomerID = s.CustomerID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'Czech Koruna', EuroCount AS ( SELECT COUNT(DISTINCT CustomerID) AS EuroCustomers FROM transactions_1k t JOIN SMEs s ON t.CustomerID = s.CustomerID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'Euro' ) SELECT (KorunaCustomers - EuroCustomers) AS MoreSMEsUsingKoruna FROM CzechKorunaCount, EuroCount;
SELECT c.CustomerID, MAX(y.Consumption) AS MaxConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Segment = 'LAM' AND c.Currency = 'EUR' AND y.Date = '201310' GROUP BY c.CustomerID ORDER BY MaxConsumption DESC LIMIT 1;
SELECT CustomerID, TotalConsumption FROM Customer_Consumption WHERE CustomerID IN (SELECT CustomerID FROM KAM_Customers) ORDER BY TotalConsumption DESC LIMIT 1;
SELECT SUM(yearmonth.Consumption) AS TotalConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'KAM' AND yearmonth.Date = '201305';
SELECT COUNT(*) AS total_lam_customers FROM customers WHERE Segment = 'LAM';
WITH GasStationAvgPrice AS ( SELECT gs.GasStationID, gs.Country, AVG(t.Price) AS AvgPrice FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID GROUP BY gs.GasStationID ), CountryAvgPrice AS ( SELECT Country, AVG(AvgPrice) AS CountryAvgPrice FROM GasStationAvgPrice GROUP BY Country ) SELECT g.Country, COUNT(g.GasStationID) AS ValueForMoneyStationCount FROM GasStationAvgPrice g JOIN CountryAvgPrice cp ON g.Country = cp.Country WHERE g.AvgPrice < cp.CountryAvgPrice GROUP BY g.Country;
WITH KAM_Customers AS ( SELECT CustomerID FROM customers WHERE Segment = 'KAM' ), KAM_Using_Euros AS ( SELECT CustomerID FROM customers WHERE Segment = 'KAM' AND Currency = 'Euro' ) SELECT (CAST((SELECT COUNT(*) FROM KAM_Using_Euros) AS REAL) / (SELECT COUNT(*) FROM KAM_Customers)) * 100 AS percentage_of_kam_using_euros;
WITH filtered_customers AS ( SELECT CustomerID FROM yearmonth WHERE Date LIKE '201202%' AND Consumption > 528.3 ), total_customers AS ( SELECT COUNT(DISTINCT CustomerID) as total FROM yearmonth WHERE Date LIKE '201202%' ), consumed_more_customers AS ( SELECT COUNT(DISTINCT CustomerID) as count_more FROM filtered_customers ) SELECT (CAST(cm.count_more AS REAL) / tc.total) * 100 AS percentage FROM total_customers tc, consumed_more_customers cm;
SELECT (CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS PremiumPercentage FROM gasstations WHERE Country = 'Slovakia';
SELECT CustomerID FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID ORDER BY SUM(Consumption) DESC LIMIT 1;
SELECT c.Segment, SUM(y.Consumption) AS TotalConsumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE y.Date = '201309' GROUP BY c.Segment ORDER BY TotalConsumption LIMIT 1;
SELECT y.CustomerID FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE y.Date = '201206' AND c.Segment = 'SME' ORDER BY y.Consumption ASC LIMIT 1;
SELECT MAX(monthly_consumption) AS highest_consumption_2012 FROM ( SELECT substr(Date, 1, 4) AS year, substr(Date, 6, 2) AS month, SUM(Consumption) AS monthly_consumption FROM yearmonth WHERE substr(Date, 1, 4) = '2012' GROUP BY month );
SELECT MAX(monthly_consumption) AS biggest_monthly_consumption FROM ( SELECT SUM(Consumption) / 12 AS monthly_consumption FROM yearmonth WHERE CustomerID IN ( SELECT CustomerID FROM customers WHERE Currency = 'euro' ) GROUP BY CustomerID );
SELECT DISTINCT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE strftime('%Y%m', t.Date) = '201309';
SELECT DISTINCT gs.Country FROM transactions_1k AS t JOIN gasstations AS gs ON t.GasStationID = gs.GasStationID WHERE strftime('%Y%m', t.Date) = '201306';
SELECT DISTINCT gasstations.ChainID FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR';
SELECT DISTINCT p.Description FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID JOIN products p ON t.ProductID = p.ProductID WHERE c.Currency = 'euro';
SELECT AVG(Price) AS AveragePrice FROM transactions_1k WHERE Date LIKE '2012-01%';
SELECT COUNT(DISTINCT y.CustomerID) FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Currency = 'euro' AND y.Consumption > 1000;
SELECT DISTINCT p.Description FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE g.Country = 'CZE';
SELECT DISTINCT Time FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.ChainID = 11;
SELECT COUNT(*) AS TransactionCount FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Price > 1000;
SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01';
SELECT AVG(t.Price) AS avg_total_price FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE';
SELECT AVG(t.Price) AS AverageTotalPrice FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'Euro';
SELECT t.CustomerID, SUM(t.Amount * t.Price) AS TotalPaid FROM transactions_1k t WHERE Date = '2012-08-25' GROUP BY t.CustomerID ORDER BY TotalPaid DESC LIMIT 1;
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-25' ORDER BY t.Time ASC LIMIT 1;
SELECT c.Currency FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-24' AND t.Time = '16:25:00';
SELECT C.Segment FROM transactions_1k T JOIN customers C ON T.CustomerID = C.CustomerID WHERE T.Date = '2012-08-23' AND T.Time = '21:20:00';
SELECT COUNT(*) FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-26' AND t.Time < '13:00:00' AND c.Currency = 'EUR';
SELECT CustomerID FROM transactions_1k ORDER BY Date ASC, TransactionID ASC LIMIT 1;
SELECT GS.Country FROM transactions_1k AS T JOIN gasstations AS GS ON T.GasStationID = GS.GasStationID WHERE T.Date = '2012-08-24' AND T.Time = '12:42:00';
SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00';
SELECT Date, SUM(Price) AS Expenses FROM transactions_1k WHERE CustomerID = (SELECT CustomerID FROM CustomerExpense) AND Date BETWEEN '2012-01-01' AND '2012-01-31' GROUP BY Date;
SELECT COUNT(*) AS num_transactions FROM transactions_1k AS t JOIN gasstations AS g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-26' AND t.Time BETWEEN '08:00:00' AND '08:59:59' AND g.Country = 'CZE';
SELECT Currency FROM customers WHERE CustomerID = ( SELECT CustomerID FROM yearmonth WHERE Date LIKE '201306%' AND Consumption = 214582.17 );
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.CardID = 667467;
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-24' GROUP BY t.CustomerID, g.Country HAVING SUM(t.Amount * t.Price) = 548.4;
SELECT COUNT(DISTINCT CustomerID) AS TotalCustomers FROM transactions_1k WHERE Date = '2012-08-25';
SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' AND Amount = 634.8;
SELECT GasStationID, SUM(Amount * Price) AS TotalRevenue FROM transactions_1k GROUP BY GasStationID ORDER BY TotalRevenue DESC LIMIT 1;
SELECT (CAST(premium_stations AS REAL) / total_stations) * 100 AS premium_percentage FROM ( SELECT (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK' AND Segment = 'premium') AS premium_stations, (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK') AS total_stations );
SELECT SUM(Amount) AS TotalSpent FROM transactions_1k WHERE CustomerID = 38508;
SELECT p.Description, SUM(t.Amount) AS TotalSales FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID GROUP BY t.ProductID, p.Description ORDER BY TotalSales DESC LIMIT 5;
WITH CustomerSpending AS ( SELECT t.CustomerID, SUM(t.Price) AS TotalSpending FROM transactions_1k t GROUP BY t.CustomerID ), TopCustomer AS ( SELECT CustomerID, TotalSpending FROM CustomerSpending ORDER BY TotalSpending DESC LIMIT 1 ) SELECT tc.CustomerID, tc.TotalSpending, SUM(t.Price) / SUM(t.Amount) AS AveragePricePerItem, c.Currency FROM transactions_1k t JOIN TopCustomer tc ON t.CustomerID = tc.CustomerID JOIN customers c ON t.CustomerID = c.CustomerID GROUP BY tc.CustomerID, c.Currency;
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.ProductID = 2 ORDER BY t.Price DESC LIMIT 1;
SELECT ym.CustomerID, ym.Consumption FROM transactions_1k AS t JOIN yearmonth AS ym ON t.CustomerID = ym.CustomerID WHERE t.ProductID = 5 AND (t.Price / t.Amount) > 29.00 AND ym.Date LIKE '201208%';
