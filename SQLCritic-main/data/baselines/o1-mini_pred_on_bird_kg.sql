SELECT MAX(`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS highest_eligible_free_rate FROM frpm WHERE `County Name` = 'Alameda County';
SELECT CDSCode, (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) AS eligible_free_rate FROM frpm WHERE `School Type` = 'Continuation' ORDER BY eligible_free_rate ASC LIMIT 3;
SELECT schools.Zip FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 AND schools.County = 'Fresno County Office of Education';
SELECT s.MailStreet || ' ' || s.MailStrAbr || ', ' || s.MailCity || ', ' || s.MailState || ' ' || s.MailZip AS MailingAddress FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode ORDER BY f.`FRPM Count (K-12)` DESC LIMIT 1;
SELECT schools.Phone FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 AND schools.OpenDate > '2000-01-01';
SELECT COUNT(*) AS VirtualSchoolsWithLowMathScores FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrMath < 400 AND schools.Virtual = 'F';
SELECT schools.School, schools.CDSCode, satscores.NumTstTakr, satscores.AvgScrRead, satscores.AvgScrMath, satscores.AvgScrWrite FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumTstTakr > 500 AND schools.Magnet = 1;
SELECT schools.Phone FROM satscores JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.NumGE1500 DESC LIMIT 1;
SELECT satscores.NumTstTakr FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE frpm.`FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm );
SELECT COUNT(*) AS DirectCharterFundedSchools FROM satscores S JOIN schools sc ON S.cds = sc.CDSCode WHERE S.AvgScrMath > 560 AND sc.Charter = 1;
SELECT frpm.`FRPM Count (Ages 5-17)` FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds ORDER BY satscores.AvgScrRead DESC LIMIT 1;
SELECT CDSCode FROM frpm WHERE COALESCE(`Enrollment (K-12)`, 0) + COALESCE(`Enrollment (Ages 5-17)`, 0) > 500;
SELECT MAX( CAST(f.`Free Meal Count (Ages 5-17)` AS REAL) / CAST(f.`Enrollment (Ages 5-17)` AS REAL) ) AS highest_eligible_free_rate FROM satscores s JOIN frpm f ON s.cds = f.CDSCode WHERE s.NumTstTakr > 0 AND (CAST(s.NumGE1500 AS REAL) / s.NumTstTakr) > 0.3;
SELECT s.Phone FROM satscores sc JOIN schools s ON sc.cds = s.CDSCode ORDER BY (sc.NumGE1500 * 1.0 / sc.NumTstTakr) DESC LIMIT 3;
SELECT s.NCESSchool, f.`Enrollment (Ages 5-17)` FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode ORDER BY f.`Enrollment (Ages 5-17)` DESC LIMIT 5;
SELECT s.District, AVG(sc.AvgScrRead) AS AvgReadingScore FROM satscores sc JOIN schools s ON sc.cds = s.CDSCode WHERE s.StatusType = 'active' GROUP BY s.District ORDER BY AvgReadingScore DESC LIMIT 1;
SELECT COUNT(DISTINCT schools.CDSCode) AS num_schools FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'merged Alameda' AND satscores.NumTstTakr < 100;
SELECT schools.CharterNum FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrWrite = 499;
SELECT COUNT(*) AS NumberOfSchools FROM schools s JOIN satscores st ON s.CDSCode = st.cds WHERE s.County = 'Contra Costa' AND s.Charter = 0 AND st.NumTstTakr <= 250;
SELECT schools.Phone FROM satscores JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.AvgScrMath DESC LIMIT 1;
SELECT COUNT(*) AS num_schools FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Amador' AND f.`Low Grade` = '9' AND f.`High Grade` = '12';
SELECT COUNT(*) AS NumberOfSchools FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Los Angeles' AND frpm.`Free Meal Count (K-12)` > 500 AND frpm.`FRPM Count (K-12)` < 700;
SELECT schools.School AS School_Name, satscores.NumTstTakr AS Number_of_Test_Takers FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Contra Costa' ORDER BY satscores.NumTstTakr DESC LIMIT 1;
SELECT s.School AS SchoolName, s.Street || ' ' || COALESCE(s.StreetAbr, '') || ', ' || s.City || ', ' || s.State || ' ' || s.Zip AS FullAddress FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE (f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > 30;
SELECT DISTINCT frpm.`School Name` FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE frpm.`Percent (%) Eligible Free (K-12)` > 0.1 AND satscores.NumGE1500 >= 1;
SELECT schools."School Name", schools."FundingType" FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools."County Name" = 'Riverside' AND satscores.AvgScrMath > 400;
SELECT s.School, s.Street || ', ' || s.City || ', ' || s.State || ' ' || s.Zip AS FullCommunicationAddress FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Monterey' AND f.`FRPM Count (Ages 5-17)` > 800 AND f.`School Type` = 'High';
SELECT schools.School AS SchoolName, satscores.AvgScrWrite AS AverageWritingScore, schools.Phone AS CommunicationNumber FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE (schools.OpenDate > '1991-12-31' OR (schools.ClosedDate IS NOT NULL AND schools.ClosedDate < '2000-01-01'));
SELECT s.`School Name`, s.`DOCType` FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.`FundingType` = 'Local' AND (f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > ( SELECT AVG(f_inner.`Enrollment (K-12)` - f_inner.`Enrollment (Ages 5-17)`) FROM schools s_inner JOIN frpm f_inner ON s_inner.CDSCode = f_inner.CDSCode WHERE s_inner.`FundingType` = 'Local' );
SELECT s.OpenDate FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Low Grade` = 'K' AND f.`High Grade` = '12' ORDER BY f.`Enrollment (K-12)` DESC LIMIT 1;
SELECT schools.City, SUM(frpm.`Enrollment (K-12)`) AS TotalEnrollment FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode GROUP BY schools.City ORDER BY TotalEnrollment ASC LIMIT 5;
SELECT f.CDSCode, f.`School Name`, f.`Enrollment (K-12)`, f.`Free Meal Count (K-12)`, (f.`Free Meal Count (K-12)` / f.`Enrollment (K-12)`) * 100 AS `Eligible Free Rate (%)` FROM frpm f ORDER BY f.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9;
SELECT f.`School Name`, f.`FRPM Count (K-12)`, f.`FRPM Count (K-12)` / f.`Enrollment (K-12)` AS `Eligible FRPM Rate` FROM frpm f INNER JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.SOC = '66' ORDER BY f.`FRPM Count (K-12)` DESC LIMIT 5;
SELECT schools.School AS School_Name, schools.Website AS Website_Address FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000;
SELECT s.`School Name`, (f.`Free Meal Count (Ages 5-17)` / f.`Enrollment (Ages 5-17)`) * 100 AS `Free Rate (%)` FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE (s.AdmFName1 = 'Kacey' AND s.AdmLName1 = 'Gibson') OR (s.AdmFName2 = 'Kacey' AND s.AdmLName2 = 'Gibson') OR (s.AdmFName3 = 'Kacey' AND s.AdmLName3 = 'Gibson');
SELECT s.AdmEmail1 FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`Charter School (Y/N)` = 1 ORDER BY f.`Enrollment (K-12)` ASC LIMIT 1;
SELECT (s.AdmFName1 || ' ' || s.AdmLName1) AS AdminFullName FROM schools s WHERE s.CDSCode = ( SELECT sc.cds FROM satscores sc ORDER BY sc.NumGE1500 DESC LIMIT 1 );
SELECT s.Street, s.City, s.Zip, s.State FROM satscores sc JOIN schools s ON sc.cds = s.CDSCode WHERE sc.NumTstTakr > 0 ORDER BY CAST(sc.NumGE1500 AS REAL) / sc.NumTstTakr ASC LIMIT 1;
SELECT schools.Website FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.`County` = 'Los Angeles' AND satscores.NumTstTakr BETWEEN 2000 AND 3000;
SELECT AVG(s.NumTstTakr) AS AverageTestTakers FROM schools sc JOIN satscores s ON sc.CDSCode = s.cds WHERE sc.County = 'Fresno' AND sc.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';
SELECT schools.Phone FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.District = 'Fresno Unified' ORDER BY satscores.AvgScrRead ASC LIMIT 1;
SELECT schools.School AS SchoolName, satscores.AvgScrRead AS AverageReadingScore FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.Virtual = 'F' ORDER BY satscores.AvgScrRead DESC LIMIT 5;
SELECT frpm.`Educational Option Type` FROM satscores JOIN frpm ON satscores.cds = frpm.CDSCode ORDER BY satscores.AvgScrMath DESC LIMIT 1;
SELECT s.AvgScrMath, sc.County FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode ORDER BY (s.AvgScrMath + s.AvgScrRead + s.AvgScrWrite) ASC LIMIT 1;
SELECT s.AvgScrWrite AS Average_Writing_Score, sc.City FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE s.NumGE1500 = ( SELECT MAX(NumGE1500) FROM satscores );
SELECT schools.School, satscores.AvgScrWrite FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE (schools.AdmFName1 = 'Ricci' AND schools.AdmLName1 = 'Ulrich') OR (schools.AdmFName2 = 'Ricci' AND schools.AdmLName2 = 'Ulrich') OR (schools.AdmFName3 = 'Ricci' AND schools.AdmLName3 = 'Ulrich');
SELECT schools.School AS School_Name, frpm.`Enrollment (K-12)` AS K12_Enrollment FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.DOC = '31' ORDER BY frpm.`Enrollment (K-12)` DESC;
SELECT COUNT(*) / 12.0 AS monthly_average FROM schools WHERE County = 'Alameda' AND DOC = '52' AND OpenDate BETWEEN '1980-01-01' AND '1980-12-31';
SELECT SUM(CASE WHEN DOC = '54' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN DOC = '52' THEN 1 ELSE 0 END) AS UnifiedToElementaryRatio FROM schools WHERE County = 'Orange County';
SELECT School, ClosedDate FROM schools WHERE StatusType = 'Closed' AND County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT schools.School, schools.MailStreet || ' ' || schools.MailStrAbr AS PostalStreetAddress FROM satscores JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.AvgScrMath DESC LIMIT 1 OFFSET 5;
SELECT sc.MailStreet, sc.School FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode ORDER BY s.AvgScrRead ASC LIMIT 1;
SELECT COUNT(*) AS TotalHighSATSchools FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE (satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite) >= 1500 AND schools.MailCity = 'Lakeport';
SELECT SUM(s.NumTstTakr) AS TotalTestTakers FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE sc.MailCity = 'Fresno';
SELECT School, MailZip FROM schools WHERE (AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian') OR (AdmFName2 = 'Avetik' AND AdmLName2 = 'Atoian') OR (AdmFName3 = 'Avetik' AND AdmLName3 = 'Atoian');
SELECT CAST( (SELECT COUNT(*) FROM schools WHERE `MailState` = 'California' AND `County` = 'Colusa') AS REAL ) / NULLIF( (SELECT COUNT(*) FROM schools WHERE `MailState` = 'California' AND `County` = 'Humboldt'), 0 ) AS colusa_to_humboldt_ratio;
SELECT COUNT(*) FROM schools WHERE MailState = 'California' AND County = 'San Joaquin' AND StatusType = 'Active';
SELECT schools.Phone, schools.Ext FROM satscores JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.AvgScrWrite DESC LIMIT 1 OFFSET 332;
SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704';
SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName2 = 'Mike' AND AdmLName2 = 'Larson') OR (AdmFName3 = 'Mike' AND AdmLName3 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez') OR (AdmFName2 = 'Dante' AND AdmLName2 = 'Alvarez') OR (AdmFName3 = 'Dante' AND AdmLName3 = 'Alvarez');
SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin';
SELECT COUNT(*) AS chartered_hickman_elementary_schools FROM schools WHERE Charter = 1 AND City = 'Hickman' AND DOC = '52';
SELECT COUNT(*) AS TotalNonCharteredSchools FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.Charter = 0 AND s.County = 'Los Angeles' AND f.`Percent (%) Eligible Free (K-12)` < 0.18;
SELECT School AS SchoolName, City, AdmFName1 || ' ' || AdmLName1 AS AdminName FROM schools WHERE Charter = 1 AND CharterNum = '00D2' AND AdmFName1 IS NOT NULL AND AdmLName1 IS NOT NULL UNION ALL SELECT School AS SchoolName, City, AdmFName2 || ' ' || AdmLName2 AS AdminName FROM schools WHERE Charter = 1 AND CharterNum = '00D2' AND AdmFName2 IS NOT NULL AND AdmLName2 IS NOT NULL UNION ALL SELECT School AS SchoolName, City, AdmFName3 || ' ' || AdmLName3 AS AdminName FROM schools WHERE Charter = 1 AND CharterNum = '00D2' AND AdmFName3 IS NOT NULL AND AdmLName3 IS NOT NULL;
SELECT COUNT(*) AS TotalSchools FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4';
SELECT (CAST(SUM(CASE WHEN FundingType = 'Locally Funded' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS locally_funded_percentage FROM schools WHERE County = 'Santa Clara' AND Charter = 1;
SELECT COUNT(*) AS DirectlyFundedSchoolsOpened FROM schools WHERE FundingType = 'Directly Funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND County = 'Stanislaus';
SELECT COUNT(*) AS TotalClosures FROM schools WHERE City = 'San Francisco' AND strftime('%Y', ClosedDate) = '1989' AND DOCType = 'Community College District';
SELECT County, COUNT(*) AS closure_count FROM schools WHERE ClosedDate BETWEEN '1980-01-01' AND '1989-12-31' AND SOC = '11' GROUP BY County ORDER BY closure_count DESC LIMIT 1;
SELECT NCESDist FROM schools WHERE SOC = '31';
SELECT StatusType, COUNT(*) AS Total FROM schools WHERE County = 'Alpine' AND SOCType = 'District Community Day School' GROUP BY StatusType;
SELECT frpm.`District Code` FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.City = 'Fresno' AND schools.Magnet = 0;
SELECT SUM(frpm.`Enrollment (Ages 5-17)`) AS TotalEnrollment FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.City = 'Fremont' AND schools.EdOpsCode = 'SSS' AND frpm.`Academic Year` = '2014-2015';
SELECT frpm.`FRPM Count (Ages 5-17)` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.MailStreet = 'PO Box 1040' AND schools.School = 'Youth Authority School';
SELECT frpm.`Low Grade` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.EdOpsCode = 'SPECON' AND schools.NCESDist = '613360';
SELECT s.`School Name`, f.`Low Grade` || '-' || f.`High Grade` AS `Educational Level Name` FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`County Code` = '37' AND f.`NSLP Provision Status` = '2';
SELECT schools.City FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.EILCode = 'HS' AND frpm.`Low Grade` = '9' AND frpm.`High Grade` = '12' AND schools.County = 'Merced' AND frpm.`NSLP Provision Status` = '2';
SELECT frpm.`School Name`, frpm.`Percent (%) Eligible FRPM (Ages 5-17)` FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'Los Angeles' AND frpm.`Low Grade` = 'K' AND frpm.`High Grade` = '9';
SELECT frpm.`Low Grade` || ' - ' || frpm.`High Grade` AS grade_span, COUNT(*) AS count FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.City = 'Adelanto' GROUP BY frpm.`Low Grade`, frpm.`High Grade` ORDER BY count DESC LIMIT 1;
SELECT County, COUNT(*) AS SchoolCount FROM schools WHERE County IN ('San Diego', 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY SchoolCount DESC LIMIT 1;
SELECT s.School, f.`School Type`, s.Latitude FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode ORDER BY s.Latitude DESC LIMIT 1;
SELECT schools.School AS School_Name, schools.City, frpm.`Low Grade` FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.State = 'CA' ORDER BY schools.Latitude ASC LIMIT 1;
SELECT frpm.`Low Grade`, frpm.`High Grade` FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode ORDER BY schools.Longitude DESC LIMIT 1;

SELECT AdmFName1 AS first_name, District FROM schools WHERE AdmFName1 IS NOT NULL UNION ALL SELECT AdmFName2 AS first_name, District FROM schools WHERE AdmFName2 IS NOT NULL UNION ALL SELECT AdmFName3 AS first_name, District FROM schools WHERE AdmFName3 IS NOT NULL ), top_names AS ( SELECT first_name FROM all_admins GROUP BY first_name ORDER BY COUNT(*) DESC LIMIT 2 ) SELECT a.first_name, a.District FROM all_admins a JOIN top_names t ON a.first_name = t.first_name ORDER BY a.first_name, a.District
SELECT frpm.`Percent (%) Eligible Free (K-12)`, frpm.`District Code` FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.AdmFName1 = 'Alusine' OR schools.AdmFName2 = 'Alusine' OR schools.AdmFName3 = 'Alusine';
SELECT AdmLName1 AS AdminLastName, District, County, School FROM schools WHERE CharterNum = '40';
SELECT AdmEmail1 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND FundingType = 'public' AND (SOC = 62 OR DOC = 54);
SELECT schools.AdmEmail1 AS AdministratorEmail, schools.School AS SchoolName FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumGE1500 = ( SELECT MAX(NumGE1500) FROM satscores );
SELECT COUNT(DISTINCT account.account_id) AS num_accounts FROM account JOIN district ON account.district_id = district.district_id JOIN disp ON account.account_id = disp.account_id JOIN card ON disp.disp_id = card.disp_id WHERE district.A3 = 'East Bohemia' AND card.type = 'POPLATEK PO OBRATU';
SELECT COUNT(DISTINCT account.account_id) AS eligible_accounts FROM account JOIN district ON account.district_id = district.district_id LEFT JOIN loan ON account.account_id = loan.account_id AND loan.status = 'active' WHERE district.A3 = 'Prague' AND loan.loan_id IS NULL;
SELECT CASE WHEN AVG(A12) > AVG(A13) THEN '1995 has a higher average unemployment rate' WHEN AVG(A12) < AVG(A13) THEN '1996 has a higher average unemployment rate' ELSE 'Both years have the same average unemployment rate' END AS comparison_result FROM district;
SELECT COUNT(*) AS num_districts FROM district WHERE A11 > 6000 AND A11 < 10000;
SELECT COUNT(*) AS male_customers_count FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.A3 = 'North Bohemia' AND district.A11 > 8000;
SELECT c.client_id, c.birth_date, d.A11, disp.account_id FROM client c JOIN district d ON c.district_id = d.district_id JOIN disp ON c.client_id = disp.client_id WHERE c.gender = 'F' ), min_birth_date AS ( SELECT MIN(birth_date) AS min_birth_date FROM female_clients ), min_a11 AS ( SELECT MIN(A11) AS min_A11 FROM female_clients ), max_a11 AS ( SELECT MAX(A11) AS max_A11 FROM female_clients ), salary_gap AS ( SELECT max_a11.max_A11 - min_a11.min_A11 AS gap FROM max_a11, min_a11 ) SELECT fc.account_id, sg.gap FROM female_clients fc, min_birth_date mbd, min_a11 ma11, salary_gap sg WHERE fc.birth_date = mbd.min_birth_date AND fc.A11 = ma11.min_A11
SELECT DISTINCT a.account_id FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN district di ON c.district_id = di.district_id WHERE c.birth_date = ( SELECT MAX(birth_date) FROM client ) AND di.A11 = ( SELECT MAX(A11) FROM district );
SELECT COUNT(DISTINCT client.client_id) AS owner_weekly_issuance_count FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'Owner';
SELECT c.client_id, c.gender, c.birth_date, c.district_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE a.frequency = 'POPLATEK PO OBRATU' AND d.type = 'Disponent';
SELECT a.account_id FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.date BETWEEN '1997-01-01' AND '1997-12-31' AND l.status = 'approved' AND l.amount = ( SELECT MIN(amount) FROM loan WHERE date BETWEEN '1997-01-01' AND '1997-12-31' AND status = 'approved' ) AND a.frequency = 'POPLATEK TYDNE';
SELECT a.account_id, a.district_id, a.frequency, a.date FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 AND strftime('%Y', a.date) = '1993' AND l.amount = ( SELECT MAX(l2.amount) FROM loan l2 JOIN account a2 ON l2.account_id = a2.account_id WHERE l2.duration > 12 AND strftime('%Y', a2.date) = '1993' );
SELECT COUNT(DISTINCT account.account_id) AS female_customers_before_1950_in_Slokolov FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND district.A2 = 'Slokolov';
SELECT account_id, district_id, frequency, date FROM account WHERE date = ( SELECT MIN(date) FROM account WHERE strftime('%Y', date) = '1995' );
SELECT a.account_id, a.district_id, a.frequency, a.date FROM account a JOIN ( SELECT t1.account_id, t1.balance FROM trans t1 INNER JOIN ( SELECT account_id, MAX(date) AS latest_date FROM trans GROUP BY account_id ) t2 ON t1.account_id = t2.account_id AND t1.date = t2.latest_date ) t ON a.account_id = t.account_id WHERE a.date < '1997-01-01' AND t.balance > 3000;
SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE card.issued = '1994-03-03';
SELECT a.date AS account_opened_date FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.amount = 840 AND t.date = '1998-10-14';
SELECT account.district_id FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.date = '1994-08-25';
SELECT MAX(trans.amount) AS biggest_transaction FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN trans ON disp.account_id = trans.account_id WHERE card.issued = '1996-10-21';
SELECT client.gender FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE account.district_id = ( SELECT district_id FROM district ORDER BY A11 DESC LIMIT 1 ) ORDER BY client.birth_date ASC LIMIT 1;
SELECT t.amount FROM loan l JOIN disp d ON l.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN account a ON l.account_id = a.account_id JOIN trans t ON t.account_id = a.account_id WHERE l.amount = (SELECT MAX(amount) FROM loan) AND t.date = ( SELECT MIN(t2.date) FROM trans t2 WHERE t2.account_id = a.account_id AND t2.date >= a.date ) ;
SELECT COUNT(DISTINCT client.client_id) AS female_clients_in_jesenik FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Jesenik' AND client.gender = 'F';
SELECT disp.disp_id FROM trans JOIN disp ON trans.account_id = disp.account_id WHERE trans.amount = 5100 AND trans.date = '1998-09-02';
SELECT COUNT(*) AS num_accounts FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Litomerice' AND strftime('%Y', account.date) = '1996';
SELECT dist.A2 FROM client AS c JOIN disp AS d ON c.client_id = d.client_id JOIN account AS a ON d.account_id = a.account_id JOIN district AS dist ON a.district_id = dist.district_id WHERE c.gender = 'F' AND c.birth_date = '1976-01-29';
SELECT client.birth_date FROM loan JOIN account ON loan.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03';
SELECT account.account_id FROM account JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague' ORDER BY account.date ASC LIMIT 1;
SELECT district_id FROM district WHERE A3 = 'South Bohemia' ORDER BY CAST(A4 AS INTEGER) DESC LIMIT 1 ), client_counts AS ( SELECT COUNT(*) AS total_clients, SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) AS male_clients FROM client WHERE district_id = (SELECT district_id FROM target_district) ) SELECT (CAST(male_clients AS REAL) / total_clients) * 100 AS percentage_of_male_clients FROM client_counts

SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) * 100.0 / SUM(amount)) AS percentage_fully_paid_no_issue FROM loan;
SELECT (SUM(CASE WHEN amount < 100000 AND status = 'C' THEN amount ELSE 0 END) / SUM(CASE WHEN amount < 100000 THEN amount ELSE 0 END) ) * 100 AS percentage_running_no_issue FROM loan;
SELECT account.account_id, district.A2 AS district_name, district.A3 AS district_region FROM account JOIN district ON account.district_id = district.district_id JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', account.date) = '1993' AND account.date > trans.date;
SELECT account.account_id, account.frequency FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON client.district_id = district.district_id WHERE district.A2 = 'East Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31';
SELECT account.account_id, account.date FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Prachatice';
SELECT d.A2 AS district, d.A3 AS region FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.loan_id = 4990;
SELECT loan.account_id, district.A2 AS district, district.A3 AS region FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000;
SELECT loan.loan_id, district.A2 AS district, district.A11 AS average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.duration = 60;
SELECT district.A3 AS district, district.A2 AS state, ((district.A13 - district.A12) / district.A12) * 100 AS unemployment_increment_percentage FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.status = 'D';
SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM account WHERE strftime('%Y', date) = '1993') AS decin_percentage FROM account a JOIN district d ON a.district_id = d.district_id WHERE strftime('%Y', a.date) = '1993' AND d.A2 = 'Decin';
SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE';
SELECT d.A2 AS district_name, COUNT(DISTINCT c.client_id) AS female_account_holders FROM account a JOIN disp dp ON a.account_id = dp.account_id JOIN client c ON dp.client_id = c.client_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' GROUP BY d.district_id, d.A2 ORDER BY female_account_holders DESC LIMIT 10;
SELECT d.A2 AS district_name, t.amount, t.date, t.operation, t.bank, t.account FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' ORDER BY t.amount DESC LIMIT 10;
SELECT COUNT(DISTINCT a.account_id) AS accounts_without_credit_cards FROM account a JOIN district d ON a.district_id = d.district_id LEFT JOIN disp disp ON a.account_id = disp.account_id LEFT JOIN card c ON disp.disp_id = c.disp_id WHERE d.A3 = 'South Bohemia' AND c.card_id IS NULL;
SELECT d.A3 AS district_name, COUNT(l.loan_id) AS active_loan_count FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status IN ('C', 'D') GROUP BY d.A3 ORDER BY active_loan_count DESC LIMIT 1;
SELECT AVG(loan.amount) AS average_loan_amount FROM loan JOIN account ON loan.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M';
SELECT A3 AS branch_location, A2 AS district_name FROM district WHERE A13 = (SELECT MAX(A13) FROM district);
SELECT COUNT(*) AS num_accounts FROM account WHERE district_id IN ( SELECT district_id FROM district WHERE A16 = (SELECT MAX(A16) FROM district) );
SELECT COUNT(DISTINCT account.account_id) AS negative_balance_accounts FROM account JOIN trans ON account.account_id = trans.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND trans.operation = 'VYBER KARTOU' AND trans.balance < 0;
SELECT COUNT(*) AS approved_loan_count FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.date BETWEEN '1995-01-01' AND '1997-12-31' AND loan.amount >= 250000 AND account.frequency = 'POPLATEK MESICNE' AND loan.status = 'approved';
SELECT COUNT(DISTINCT account.account_id) AS running_contract_accounts FROM account JOIN loan ON account.account_id = loan.account_id WHERE account.district_id = 1 AND loan.status IN ('C', 'D');
SELECT COUNT(*) AS male_clients_count FROM client WHERE gender = 'M' AND district_id IN ( SELECT district_id FROM district WHERE A15 = ( SELECT A15 FROM district ORDER BY A15 DESC LIMIT 1 OFFSET 1 ) );
SELECT COUNT(*) AS high_level_disponent_cards FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'disponent';
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Pisek';
SELECT DISTINCT district.* FROM trans JOIN account ON trans.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE trans.amount > 10000 AND strftime('%Y', trans.date) = '1997';
SELECT account.account_id FROM account JOIN `order` ON account.account_id = `order`.account_id JOIN district ON account.district_id = district.district_id WHERE `order`.k_symbol = 'SIPO' AND district.A2 = 'Pisek';
SELECT a.* FROM account a JOIN disp d ON a.account_id = d.account_id JOIN card c ON d.disp_id = c.disp_id WHERE c.type IN ('gold', 'junior') GROUP BY a.account_id HAVING COUNT(DISTINCT c.type) = 2;
SELECT strftime('%Y-%m', date) AS month, AVG(amount) AS average_amount FROM trans WHERE operation = 'VYBER KARTOU' AND strftime('%Y', date) = '2021' GROUP BY month;
SELECT d.client_id, strftime('%Y-%m', t.date) AS year_month, SUM(t.amount) AS monthly_spent FROM disp d JOIN trans t ON d.account_id = t.account_id WHERE t.operation = 'VYBER KARTOU' AND strftime('%Y', t.date) = '1998' GROUP BY d.client_id, year_month ), client_avg_spent AS ( SELECT client_id, AVG(monthly_spent) AS avg_spent FROM per_client_monthly GROUP BY client_id ), overall_avg_spent AS ( SELECT AVG(monthly_spent) AS overall_avg FROM per_client_monthly ) SELECT c.client_id FROM client_avg_spent c, overall_avg_spent o WHERE c.avg_spent < o.overall_avg
SELECT DISTINCT client.* FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN card ON card.disp_id = disp.disp_id JOIN loan ON loan.account_id = account.account_id WHERE client.gender = 'F';
SELECT COUNT(*) AS female_accounts_south_bohemia FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND district.A3 = 'south Bohemia';
SELECT account.* FROM account JOIN district ON account.district_id = district.district_id JOIN disp ON account.account_id = disp.account_id WHERE district.A2 = 'Tabor' AND disp.type = 'OWNER';
SELECT DISTINCT disp.type FROM disp JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE disp.type != 'OWNER' AND district.A11 > 8000 AND district.A11 <= 9000;
SELECT COUNT(DISTINCT account.account_id) AS num_accounts FROM account JOIN district ON account.district_id = district.district_id JOIN trans ON account.account_id = trans.account_id WHERE district.A3 = 'North Bohemia' AND trans.bank = 'AB';
SELECT DISTINCT district.A2 FROM district JOIN account ON district.district_id = account.district_id JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ';
SELECT AVG(d.A15) AS average_crimes_1995 FROM district d WHERE d.A15 > 4000 AND EXISTS ( SELECT 1 FROM account a WHERE a.district_id = d.district_id AND a.date >= '1997-01-01' );
SELECT COUNT(*) AS eligible_classic_cards FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic' AND disp.type = 'OWNER';
SELECT COUNT(*) AS male_clients_in_Hl_m_Praha FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.A2 = 'Hl.m. Praha';
SELECT (COUNT(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 END) * 100.0) / COUNT(*) AS Percentage_of_Gold_Cards_Prior_1998 FROM card;
SELECT c.* FROM client c JOIN disp d ON c.client_id = d.client_id JOIN loan l ON d.account_id = l.account_id WHERE d.type = 'owner' ORDER BY l.amount DESC LIMIT 1;
SELECT district.A15 FROM account JOIN district ON account.district_id = district.district_id WHERE account.account_id = 532;
SELECT district_id FROM account WHERE account_id = ( SELECT account_id FROM `order` WHERE order_id = 33333 );
SELECT trans.* FROM client JOIN disp ON client.client_id = disp.client_id JOIN trans ON disp.account_id = trans.account_id WHERE client.client_id = 3356 AND trans.operation = 'VYBER';
SELECT COUNT(DISTINCT a.account_id) AS weekly_accounts_with_small_loans FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000;
SELECT card.type FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE disp.client_id = 13539;
SELECT district.A3 AS region FROM client JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541;
SELECT d.district_id, COUNT(DISTINCT a.account_id) AS num_accounts FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY num_accounts DESC LIMIT 1;
SELECT client.client_id FROM `order` JOIN account ON `order`.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE `order`.order_id = 32423;
SELECT trans.* FROM trans JOIN account ON trans.account_id = account.account_id WHERE account.district_id = 5;
SELECT COUNT(*) AS num_accounts FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Jeseník';
SELECT DISTINCT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'junior credit' AND card.issued >= '1997-01-01';
SELECT (COUNT(DISTINCT CASE WHEN client.gender = 'F' THEN client.client_id END) * 100.0) / COUNT(DISTINCT client.client_id) AS percentage_women FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE district.A11 > 10000;
SELECT ((SUM(CASE WHEN strftime('%Y', loan.date) = '1997' THEN loan.amount ELSE 0 END) - SUM(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END)) / NULLIF(SUM(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END), 0) ) * 100.0 AS growth_rate FROM loan JOIN account ON loan.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M' AND strftime('%Y', loan.date) IN ('1996', '1997');
SELECT COUNT(*) AS credit_card_withdrawals_after_1995 FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';
SELECT SUM(CASE WHEN A3 = 'North Bohemia' THEN A16 ELSE 0 END) - SUM(CASE WHEN A3 = 'East Bohemia' THEN A16 ELSE 0 END) AS crime_difference FROM district WHERE A3 IN ('North Bohemia', 'East Bohemia');
SELECT type, COUNT(*) AS disposition_count FROM disp WHERE account_id BETWEEN 1 AND 10 GROUP BY type;
SELECT COUNT(*) AS statement_request_count FROM trans WHERE account_id = 3 AND type = 'statement_request';
SELECT strftime('%Y', client.birth_date) AS birth_year FROM disp JOIN client ON disp.client_id = client.client_id WHERE disp.account_id = 130;
SELECT COUNT(DISTINCT a.account_id) AS owner_accounts_with_statement FROM account a JOIN disp d ON a.account_id = d.account_id WHERE a.frequency = 'POPLATEK PO OBRATU' AND d.type = 'owner';
SELECT SUM(l.amount) AS total_debt, GROUP_CONCAT(l.status) AS payment_status FROM client c JOIN disp d ON c.client_id = d.client_id JOIN loan l ON d.account_id = l.account_id WHERE c.client_id = 992;
SELECT trans.balance AS account_balance, client.gender AS owner_gender FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 4 AND trans.trans_id > 851 ORDER BY trans.trans_id ASC LIMIT 1;
SELECT card.type FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE client.client_id = 9;
SELECT SUM(t.amount) AS total_paid FROM trans t JOIN disp d ON t.account_id = d.account_id WHERE d.client_id = 617 AND t.date BETWEEN '1998-01-01' AND '1998-12-31';
SELECT DISTINCT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.A2 = 'East Bohemia';
SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN loan ON disp.account_id = loan.account_id WHERE client.gender = 'F' GROUP BY client.client_id ORDER BY SUM(loan.amount) DESC LIMIT 3;
SELECT COUNT(DISTINCT client.client_id) AS male_customers_with_large_payments FROM client JOIN disp ON client.client_id = disp.client_id JOIN trans ON disp.account_id = trans.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND trans.operation = 'SIPO' AND trans.amount > 4000;
SELECT COUNT(*) AS account_count FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Beroun' AND account.date > '1996-12-31';
SELECT COUNT(DISTINCT client.client_id) AS female_junior_customers FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior';
SELECT (COUNT(DISTINCT CASE WHEN client.gender = 'F' THEN client.client_id END) * 100.0) / COUNT(DISTINCT client.client_id) AS female_percentage FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague';
SELECT (COUNT(CASE WHEN client.gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_male_clients FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE';
SELECT COUNT(DISTINCT client.client_id) AS user_weekly_issuance_count FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'User' AND account.frequency = 'POPLATEK TYDNE';
SELECT a.account_id, a.district_id, a.frequency, a.date FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 24 AND a.date < '1997-01-01' AND l.amount = ( SELECT MIN(l2.amount) FROM loan l2 JOIN account a2 ON l2.account_id = a2.account_id WHERE l2.duration > 24 AND a2.date < '1997-01-01' );
SELECT disp.account_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = ( SELECT MIN(birth_date) FROM client WHERE gender = 'F' ) AND district.A11 = ( SELECT MIN(A11) FROM district );
SELECT COUNT(*) AS number_of_clients FROM client c JOIN district d ON c.district_id = d.district_id WHERE strftime('%Y', c.birth_date) = '1920' AND d.A3 = 'East Bohemia';
SELECT COUNT(*) AS LoanCount FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.duration = 24 AND a.frequency = 'POPLATEK TYDNE' AND l.status = 'pre-payment';
SELECT AVG(l.amount) AS average_loan_amount FROM loan l JOIN trans t ON l.account_id = t.account_id WHERE l.status IN ('C', 'D') AND t.operation = 'POPLATEK PO OBRATU';
SELECT client.client_id, client.district_id FROM client JOIN disp ON client.client_id = disp.client_id WHERE disp.type = 'owner';
SELECT client.client_id, (strftime('%Y', 'now') - strftime('%Y', client.birth_date)) - (strftime('%m-%d', 'now') < strftime('%m-%d', client.birth_date)) AS age FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id JOIN account ON disp.account_id = account.account_id JOIN loan ON account.account_id = loan.account_id WHERE card.type = 'gold' AND loan.status = 'approved';
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1;
SELECT COUNT(DISTINCT m.molecule_id) AS chlorine_molecule_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '-' AND LOWER(a.element) = 'cl';
SELECT AVG(oxygen_count) AS average_oxygen_atoms FROM ( SELECT m.molecule_id, COUNT(a.atom_id) AS oxygen_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'o' AND m.molecule_id IN ( SELECT b.molecule_id FROM bond b WHERE b.bond_type = '-' ) GROUP BY m.molecule_id ) AS oxygen_counts;
SELECT AVG(single_bond_count) AS average_single_bonds FROM ( SELECT COUNT(*) AS single_bond_count FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+' AND bond.bond_type = '-' GROUP BY molecule.molecule_id ) AS single_bond_per_molecule;
SELECT COUNT(*) AS non_carcinogenic_sodium_molecules FROM molecule m WHERE m.label = '-' AND EXISTS ( SELECT 1 FROM atom a WHERE a.molecule_id = m.molecule_id AND a.element = 'na' );
SELECT DISTINCT m.* FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+' AND b.bond_type = '#';
SELECT (CAST(SUM(CASE WHEN a.element = 'c' THEN 1 ELSE 0 END) AS REAL) / COUNT(a.atom_id)) * 100 AS percentage FROM atom a WHERE a.molecule_id IN ( SELECT DISTINCT b.molecule_id FROM bond b WHERE b.bond_type = '=' );
SELECT COUNT(*) AS triple_bond_count FROM bond WHERE bond_type = '#';
SELECT COUNT(*) AS atoms_without_bromine FROM atom WHERE element != 'br';
SELECT COUNT(*) AS carcinogenic_count FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';
SELECT DISTINCT molecule_id FROM atom WHERE element = 'si';
SELECT a1.element AS element1, a2.element AS element2 FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR004_8_9';
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '=';
SELECT molecule.label, COUNT(*) AS count FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'h' GROUP BY molecule.label ORDER BY count DESC LIMIT 1;
SELECT DISTINCT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom AS a1 ON connected.atom_id = a1.atom_id JOIN atom AS a2 ON connected.atom_id2 = a2.atom_id WHERE a1.element = 'te' OR a2.element = 'te';
SELECT a1.element AS Atom1, a2.element AS Atom2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '-';
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '-';
SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;
SELECT bond.bond_type FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20';
SELECT DISTINCT label FROM molecule WHERE label NOT IN ( SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'Sn' );
SELECT COUNT(*) AS atom_count FROM atom WHERE element IN ('i', 's') AND molecule_id IN ( SELECT molecule_id FROM bond GROUP BY molecule_id HAVING COUNT(DISTINCT bond_type) = 1 AND MAX(bond_type) = '-' );
SELECT connected.atom_id, connected.atom_id2 FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';
SELECT DISTINCT a2.* FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a1.molecule_id = 'TR181';
SELECT ( SELECT COUNT(*) FROM molecule m WHERE m.label = '+' AND NOT EXISTS ( SELECT 1 FROM atom a WHERE a.molecule_id = m.molecule_id AND a.element = 'f' ) ) * 100.0 / ( SELECT COUNT(*) FROM molecule m WHERE m.label = '+' ) AS percent ;
SELECT (SUM(b.bond_type = '#') * 1.0 / COUNT(b.bond_id)) * 100 AS percent FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+';
SELECT element FROM ( SELECT element FROM atom WHERE molecule_id = 'TR000' GROUP BY element ORDER BY COUNT(*) DESC LIMIT 3 ) AS top_elements ORDER BY element ASC;
SELECT a1.atom_id AS Atom1_ID, a1.element AS Atom1_Element, a2.atom_id AS Atom2_ID, a2.element AS Atom2_Element FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id = 'TR001_2_6' AND b.molecule_id = 'TR001';
SELECT SUM(label = '+') - SUM(label = '-') AS difference FROM molecule;
SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR_000_2_5';
SELECT `bond_id` FROM `connected` WHERE `atom_id2` = ( SELECT `atom_id2` FROM `connected` WHERE `atom_id` = 'TR000_2' );
SELECT DISTINCT molecule.label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' ORDER BY molecule.label ASC LIMIT 5;
SELECT (SUM(bond_type = ' = ') * 100.0) / COUNT(bond_id) AS percent FROM bond WHERE molecule_id = 'TR008';
SELECT (SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) * 100.0) / COUNT(molecule_id) AS percent FROM molecule;
SELECT (SUM(element = 'h') * 100.0) / COUNT(atom_id) AS percent FROM atom WHERE molecule_id = 'TR206';
SELECT bond.bond_type FROM bond WHERE bond.molecule_id = 'TR000';
SELECT m.label, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.molecule_id = 'TR060';
SELECT b.bond_type, COUNT(b.bond_type) AS bond_count, m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.molecule_id = 'TR018' GROUP BY b.bond_type ORDER BY bond_count DESC LIMIT 1;
SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '-' AND b.bond_type = '-' GROUP BY m.molecule_id, m.label ORDER BY m.label ASC LIMIT 3;
SELECT bond_type FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_type ASC LIMIT 2;
SELECT COUNT(*) AS bond_count FROM connected WHERE bond_id LIKE 'TR009_%' AND (atom_id = 'TR009_12' OR atom_id2 = 'TR009_12');
SELECT COUNT(DISTINCT molecule.molecule_id) AS carcinogenic_bromine_molecules FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'br';
SELECT bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_6_9';
SELECT m.molecule_id, CASE WHEN m.label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_10';
SELECT COUNT(DISTINCT molecule_id) AS triple_bond_molecule_count FROM bond WHERE bond_type = '#';
SELECT COUNT(*) AS connection_count FROM connected WHERE atom_id LIKE 'TR%_19' OR atom_id2 LIKE 'TR%_19';
SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR004';
SELECT COUNT(*) AS non_carcinogenic_molecules FROM molecule WHERE label = '-';
SELECT DISTINCT m.molecule_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE CAST(SUBSTR(a.atom_id, 7, 2) AS INTEGER) BETWEEN 21 AND 25 AND m.label = '+';
SELECT bond.bond_id, bond.bond_type FROM connected JOIN atom AS a1 ON connected.atom_id = a1.atom_id JOIN atom AS a2 ON connected.atom_id2 = a2.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE (a1.element = 'p' AND a2.element = 'n') OR (a1.element = 'n' AND a2.element = 'p');
SELECT CASE WHEN m.label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '=' GROUP BY m.molecule_id ORDER BY COUNT(b.bond_id) DESC LIMIT 1;
SELECT AVG(bond_count) AS average_bonds FROM ( SELECT a.atom_id, COUNT(c.bond_id) AS bond_count FROM atom a LEFT JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE a.element = 'i' GROUP BY a.atom_id ) AS subquery;
SELECT bond.bond_type, bond.bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = '45';
SELECT DISTINCT element FROM atom WHERE atom_id NOT IN ( SELECT atom_id FROM connected UNION SELECT atom_id2 FROM connected );
SELECT a1.atom_id AS Atom1_ID, a1.element AS Atom1_Element, a2.atom_id AS Atom2_ID, a2.element AS Atom2_Element FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.molecule_id = 'TR447' AND b.bond_type = '#';
SELECT a.element FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE c.bond_id = 'TR144_8_19' UNION SELECT a2.element FROM connected c JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR144_8_19';
SELECT molecule.molecule_id, COUNT(bond.bond_id) AS double_bond_count FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+' AND bond.bond_type = '=' GROUP BY molecule.molecule_id ORDER BY double_bond_count DESC LIMIT 1;
SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;
SELECT DISTINCT a.* FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN atom lead ON (lead.atom_id = c.atom_id OR lead.atom_id = c.atom_id2) WHERE lead.element = 'pb' AND a.atom_id != lead.atom_id;
SELECT a1.element AS element1, a2.element AS element2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '#';
SELECT b.bond_id, CASE WHEN a1.element <= a2.element THEN a1.element ELSE a2.element END AS element1, CASE WHEN a1.element <= a2.element THEN a2.element ELSE a1.element END AS element2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id ), element_counts AS ( SELECT element1, element2, COUNT(*) AS cnt FROM bond_elements GROUP BY element1, element2 ), max_count AS ( SELECT MAX(cnt) AS max_cnt FROM element_counts ), total_bonds AS ( SELECT COUNT(*) AS total FROM bond ) SELECT (mc.max_cnt * 100.0) / tb.total AS percentage FROM max_count mc, total_bonds tb
SELECT CAST(SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(bond.bond_id) AS proportion FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-';
SELECT COUNT(*) AS total_atoms FROM atom WHERE element IN ('c', 'h');
SELECT connected.atom_id2 FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 's';
SELECT DISTINCT bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'sn';
SELECT COUNT(DISTINCT a.element) AS single_bond_elements_count FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '-';
SELECT COUNT(*) AS total_atoms FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM bond WHERE bond_type = '#' ) AND molecule_id IN ( SELECT molecule_id FROM atom WHERE element IN ('p', 'br') );
SELECT bond.bond_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+';
SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '-' GROUP BY m.molecule_id HAVING COUNT(DISTINCT b.bond_type) = 1 AND MAX(b.bond_type) = '-';
SELECT (SUM(a.element = 'cl') * 100.0) / COUNT(a.atom_id) AS percent FROM atom a WHERE a.molecule_id IN ( SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '-' );
SELECT molecule_id, label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');
SELECT molecule_id FROM molecule WHERE label = '-';
SELECT COUNT(*) AS total_carcinogenic_molecules FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030';
SELECT bond.molecule_id, bond.bond_type, CASE bond.bond_type WHEN '-' THEN 'single bond' WHEN '=' THEN 'double bond' WHEN '#' THEN 'triple bond' ELSE 'unknown' END AS bond_type_description FROM bond WHERE bond.molecule_id BETWEEN 'TR000' AND 'TR050';
SELECT a1.element AS element1, a2.element AS element2 FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR001_10_11';
SELECT COUNT(DISTINCT c.bond_id) AS iodine_bond_count FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a1.element = 'i' OR a2.element = 'i';
SELECT m.label, COUNT(*) AS count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca' GROUP BY m.label ORDER BY count DESC LIMIT 1;
SELECT a1.element AS element1, a2.element AS element2 FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR001_1_8' AND ( (a1.element = 'cl' AND a2.element = 'c') OR (a1.element = 'c' AND a2.element = 'cl') );
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '-' AND a.element = 'c' AND b.bond_type = '#' LIMIT 2;
SELECT (SUM(atom.element = 'cl') * 100.0) / COUNT(atom.molecule_id) AS percentage FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';
SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR001';
SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '=';
SELECT connected.atom_id AS first_atom, connected.atom_id2 AS second_atom FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';
error:Error code: 400 - {'error': {'message': 'Invalid prompt: your prompt was flagged as potentially violating our usage policy. Please try again with a different prompt: https://platform.openai.com/docs/guides/reasoning/advice-on-prompting (request id: 20250123011605108951724GDBfUOs8) (request id: 2025012303460536410094zoFk4POt)', 'type': 'invalid_request_error', 'param': '', 'code': 'invalid_prompt'}}
SELECT COUNT(*) FROM molecule m WHERE m.label = '-' AND NOT EXISTS ( SELECT 1 FROM bond b WHERE b.molecule_id = m.molecule_id AND b.bond_type != '-' );
SELECT m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_10_11';
SELECT bond.bond_id, CASE WHEN molecule.label = '+' THEN 'Carcinogenic' WHEN molecule.label = '-' THEN 'Non-Carcinogenic' ELSE 'Unknown' END AS carcinogenic_status FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#';
SELECT a.element, COUNT(*) AS count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND substr(a.atom_id, 7, 1) = '4' GROUP BY a.element;
SELECT SUM(element = 'h') * 1.0 / COUNT(*) AS ratio, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.molecule_id = 'TR006' GROUP BY a.molecule_id, m.label;
SELECT m.molecule_id, CASE WHEN m.label = '+' THEN 'Carcinogenic' WHEN m.label = '-' THEN 'Non-Carcinogenic' ELSE 'Unknown' END AS carcinogenic_status FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca';
SELECT DISTINCT b.bond_type FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id WHERE a.element = 'te';
SELECT a1.element AS Element1, a2.element AS Element2 FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR001_10_11';
SELECT (COUNT(DISTINCT bond.molecule_id) * 100.0) / (SELECT COUNT(*) FROM molecule) AS triple_bond_percentage FROM bond WHERE bond_type = '#';
SELECT (SUM(bond_type = '=') * 100.0) / COUNT(*) AS percent FROM bond WHERE molecule_id = 'TR047';
SELECT CASE WHEN m.label = '+' THEN 'Carcinogenic' ELSE 'Not Carcinogenic' END AS is_carcinogenic FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_1';
SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule WHERE molecule_id = 'TR151';
SELECT DISTINCT CASE a.element WHEN 'cl' THEN 'Chlorine' WHEN 'c' THEN 'Carbon' WHEN 'h' THEN 'Hydrogen' WHEN 'o' THEN 'Oxygen' WHEN 's' THEN 'Sulfur' WHEN 'n' THEN 'Nitrogen' WHEN 'p' THEN 'Phosphorus' WHEN 'na' THEN 'Sodium' WHEN 'br' THEN 'Bromine' WHEN 'f' THEN 'Fluorine' WHEN 'i' THEN 'Iodine' WHEN 'sn' THEN 'Tin' WHEN 'pb' THEN 'Lead' WHEN 'te' THEN 'Tellurium' WHEN 'ca' THEN 'Calcium' END AS toxic_element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.molecule_id = 'TR151' AND a.element IN ('pb', 'sn', 'te');
SELECT COUNT(*) AS carcinogenic_count FROM molecule WHERE label = '+';
SELECT atom.* FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE CAST(substr(molecule.molecule_id, 3, 3) AS INTEGER) > 10 AND CAST(substr(molecule.molecule_id, 3, 3) AS INTEGER) < 50 AND atom.element = 'c';
SELECT COUNT(*) AS atom_count FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';
SELECT bond.bond_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' AND molecule.label = '+';
SELECT COUNT(*) AS hydrogen_atom_count FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'h' AND molecule.label = '+';
SELECT b.molecule_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_id = 'TR00_1_2' AND c.atom_id = 'TR00_1';
SELECT atom.atom_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.label = '-';
SELECT (COUNT(DISTINCT molecule.molecule_id) * 100.0) / (SELECT COUNT(*) FROM molecule) AS percentage FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'h';
SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule WHERE molecule_id = 'TR124';

SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19';
SELECT CASE a1.element WHEN 'cl' THEN 'Chlorine' WHEN 'c' THEN 'Carbon' WHEN 'h' THEN 'Hydrogen' WHEN 'o' THEN 'Oxygen' WHEN 's' THEN 'Sulfur' WHEN 'n' THEN 'Nitrogen' WHEN 'p' THEN 'Phosphorus' WHEN 'na' THEN 'Sodium' WHEN 'br' THEN 'Bromine' WHEN 'f' THEN 'Fluorine' WHEN 'i' THEN 'Iodine' WHEN 'sn' THEN 'Tin' WHEN 'pb' THEN 'Lead' WHEN 'te' THEN 'Tellurium' WHEN 'ca' THEN 'Calcium' ELSE a1.element END AS element1, CASE a2.element WHEN 'cl' THEN 'Chlorine' WHEN 'c' THEN 'Carbon' WHEN 'h' THEN 'Hydrogen' WHEN 'o' THEN 'Oxygen' WHEN 's' THEN 'Sulfur' WHEN 'n' THEN 'Nitrogen' WHEN 'p' THEN 'Phosphorus' WHEN 'na' THEN 'Sodium' WHEN 'br' THEN 'Bromine' WHEN 'f' THEN 'Fluorine' WHEN 'i' THEN 'Iodine' WHEN 'sn' THEN 'Tin' WHEN 'pb' THEN 'Lead' WHEN 'te' THEN 'Tellurium' WHEN 'ca' THEN 'Calcium' ELSE a2.element END AS element2 FROM connected JOIN atom a1 ON connected.atom_id = a1.atom_id JOIN atom a2 ON connected.atom_id2 = a2.atom_id WHERE connected.bond_id = 'TR001_2_4';
SELECT (SELECT COUNT(*) FROM bond WHERE molecule_id = 'TR006' AND bond_type = '=') AS double_bonds, CASE m.label WHEN '+' THEN 'Carcinogenic' WHEN '-' THEN 'Non-Carcinogenic' ELSE 'Unknown' END AS carcinogenic FROM molecule m WHERE m.molecule_id = 'TR006';
SELECT m.molecule_id, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+';
SELECT bond.bond_id, molecule.label AS molecule_label, bond.bond_type, atom1.element AS atom1_element, atom2.element AS atom2_element FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom AS atom1 ON connected.atom_id = atom1.atom_id JOIN atom AS atom2 ON connected.atom_id2 = atom2.atom_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-';
SELECT m.molecule_id, GROUP_CONCAT(DISTINCT a.element) AS elements FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a ON m.molecule_id = a.molecule_id WHERE b.bond_type = '#' GROUP BY m.molecule_id;
SELECT a1.element AS element1, a2.element AS element2 FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR000_2_3';
SELECT COUNT(DISTINCT connected.bond_id) AS chlorine_bond_count FROM connected JOIN atom AS a1 ON connected.atom_id = a1.atom_id JOIN atom AS a2 ON connected.atom_id2 = a2.atom_id WHERE a1.element = 'cl' AND a2.element = 'cl';
SELECT atom_id FROM atom WHERE molecule_id = 'TR346' ), BondTypeCount AS ( SELECT COUNT(DISTINCT bond_type) AS num_bond_types FROM bond WHERE molecule_id = 'TR346' ) SELECT AtomList.atom_id, BondTypeCount.num_bond_types FROM AtomList, BondTypeCount
SELECT COUNT(DISTINCT b.molecule_id) AS total_double_bond_molecules, COUNT(DISTINCT CASE WHEN m.label = '+' THEN b.molecule_id END) AS carcinogenic_double_bond_molecules FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '=';
SELECT COUNT(*) FROM molecule WHERE molecule_id NOT IN ( SELECT molecule_id FROM atom WHERE element = 's' ) AND molecule_id NOT IN ( SELECT molecule_id FROM bond WHERE bond_type = ' = ' );
SELECT molecule.label FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_2_4';
SELECT COUNT(*) AS atom_count FROM atom WHERE molecule_id = 'TR005';
SELECT COUNT(*) AS single_bond_count FROM bond WHERE bond_type = '-';
SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' AND m.label = '+';
SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'c' AND m.label = '-';
SELECT molecule_id FROM molecule WHERE label = '+' ), CarcinogenicWithCl AS ( SELECT DISTINCT a.molecule_id FROM atom a INNER JOIN CarcinogenicMolecules cm ON a.molecule_id = cm.molecule_id WHERE LOWER(a.element) = 'cl' ), TotalCarcinogenic AS ( SELECT COUNT(*) AS total FROM CarcinogenicMolecules ), TotalCarcinogenicWithCl AS ( SELECT COUNT(*) AS with_cl FROM CarcinogenicWithCl ) SELECT ROUND((tcl.with_cl * 100.0) / tc.total, 2) AS percentage_of_carcinogenic_with_Chlorine FROM TotalCarcinogenic tc, TotalCarcinogenicWithCl tcl
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';
SELECT COUNT(*) AS num_elements FROM ( SELECT atom_id AS atom FROM connected WHERE bond_id = 'TR001_3_4' UNION SELECT atom_id2 AS atom FROM connected WHERE bond_id = 'TR001_3_4' ) AS atoms;
SELECT bond.bond_type FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE (connected.atom_id = 'TR000_1' AND connected.atom_id2 = 'TR000_2') OR (connected.atom_id = 'TR000_2' AND connected.atom_id2 = 'TR000_1');
SELECT a.atom_id, m.molecule_id, m.label FROM atom a INNER JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id IN ('TR000_2', 'TR000_4');
SELECT element FROM atom WHERE atom_id = 'TR000_1';
SELECT molecule_id, CASE label WHEN '+' THEN 'Carcinogenic' WHEN '-' THEN 'Non-Carcinogenic' ELSE 'Unknown' END AS carcinogenicity_status FROM molecule WHERE molecule_id = 'TR000';
SELECT (SUM(bond_type = '-') * 100.0 / COUNT(bond_id)) AS percentage FROM bond;
SELECT COUNT(*) AS carcinogenic_nitrogen_molecules FROM molecule m WHERE m.label = '+' AND NOT EXISTS ( SELECT 1 FROM atom a WHERE a.molecule_id = m.molecule_id AND a.element <> 'n' );
SELECT DISTINCT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = ' = ' AND (a1.element = 's' OR a2.element = 's');
SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '-' GROUP BY m.molecule_id, m.label HAVING COUNT(a.atom_id) > 5;
SELECT DISTINCT a.element FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE b.bond_type = '=' AND b.molecule_id = 'TR024';
SELECT m.molecule_id, COUNT(a.atom_id) AS atom_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' GROUP BY m.molecule_id ORDER BY atom_count DESC LIMIT 1;
SELECT (CAST(COUNT(DISTINCT m.molecule_id) AS FLOAT) / (SELECT COUNT(*) FROM molecule) * 100.0) AS percentage FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE m.label = '+' AND a.element = 'h' AND b.bond_type = '#';
SELECT COUNT(*) AS carcinogenic_molecule_count FROM molecule WHERE label = '+';
SELECT COUNT(DISTINCT m.molecule_id) AS single_bond_molecule_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.molecule_id BETWEEN 'TR004' AND 'TR010' AND b.bond_type = '-';
SELECT COUNT(*) AS carbon_count FROM atom WHERE molecule_id = 'TR008' AND element = 'c';
SELECT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR004_7' AND molecule.label = '-';
SELECT COUNT(DISTINCT molecule.molecule_id) AS total_molecules FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN connected ON bond.bond_id = connected.bond_id JOIN atom a1 ON connected.atom_id = a1.atom_id JOIN atom a2 ON connected.atom_id2 = a2.atom_id WHERE bond.bond_type = ' = ' AND (a1.element = 'o' OR a2.element = 'o');
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '-';
SELECT (SELECT GROUP_CONCAT(DISTINCT element) FROM atom WHERE molecule_id = 'TR016') AS elements, (SELECT GROUP_CONCAT(DISTINCT bond_type) FROM bond WHERE molecule_id = 'TR016') AS bond_types;
SELECT DISTINCT a.atom_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE m.molecule_id = 'TR012' AND b.bond_type = ' = ' AND a.element = 'c';
SELECT atom.atom_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'o' );
SELECT * FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT * FROM cards WHERE borderColor = 'borderless' AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL);
SELECT name FROM cards WHERE faceConvertedManaCost = ( SELECT MAX(faceConvertedManaCost) FROM cards );
SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100;
SELECT cards.name, cards.uuid, cards.rarity, legalities.format, legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND legalities.format = 'gladiator' AND legalities.status = 'Banned';
SELECT cards.name, legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage';
SELECT cards.id, cards.artist FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE (cards.power = '*' OR cards.power IS NULL) AND legalities.format = 'commander' AND legalities.status = 'Legal';
SELECT c.name AS card_name, r.text AS ruling_text, CASE WHEN c.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS has_missing_or_degraded_properties FROM cards c INNER JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniele';
SELECT rulings.date, rulings.text FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s';
SELECT c.name, c.artist, c.isPromo FROM cards c JOIN rulings r ON c.uuid = r.uuid GROUP BY c.uuid ORDER BY COUNT(r.id) DESC LIMIT 1;
SELECT DISTINCT foreign_data.language FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Annul' AND cards.number = '29';
SELECT DISTINCT cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese';
SELECT (SELECT COUNT(DISTINCT uuid) FROM foreign_data WHERE language = 'Chinese Simplified') * 100.0 / (SELECT COUNT(*) FROM cards) AS percentage;
SELECT sets.name, sets.code, sets.totalSetSize FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian';
SELECT COUNT(DISTINCT type) AS type_count FROM cards WHERE artist = 'Aaron Boyd';
SELECT keywords FROM cards WHERE name = 'Angel of Mercy';
SELECT COUNT(*) AS InfinitePowerCount FROM cards WHERE power = '*';
SELECT promoTypes FROM cards WHERE name = 'Duress';
SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen';
SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen';
SELECT st.language FROM set_translations st JOIN cards c ON st.setCode = c.setCode WHERE c.name = 'Angel of Mercy';
SELECT COUNT(DISTINCT cards.id) AS restricted_with_textboxes FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'restricted' AND cards.isTextless = 0;
SELECT rulings.text FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Condemn';
SELECT COUNT(DISTINCT cards.id) AS restricted_starter_deck_count FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1;
SELECT legalities.format, legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Cloudchaser Eagle';
SELECT type FROM cards WHERE name = 'Benalish Knight';
SELECT legalities.format, legalities.status FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE cards.name = 'Benalish Knight';
SELECT DISTINCT cards.artist FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian';
SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards)) AS percentage_of_borderless_cards FROM cards WHERE borderColor = 'borderless';
SELECT COUNT(DISTINCT cards.uuid) AS reprinted_german_illustrated_cards FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1;
SELECT COUNT(*) FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'borderless' AND fd.language = 'Russian';
SELECT (COUNT(DISTINCT c.uuid) * 100.0) / ( SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1 ) AS percentage_of_french_story_spotlight_cards FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.isStorySpotlight = 1 AND fd.language = 'French';
SELECT COUNT(*) AS num_cards_with_toughness_99 FROM cards WHERE toughness = '99';
SELECT name FROM cards WHERE artist = 'Aaron Boyd';
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';
SELECT id FROM cards WHERE convertedManaCost = 0;
SELECT DISTINCT layout FROM cards WHERE keywords LIKE '%flying%';
SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%';
SELECT id FROM cards WHERE hasFoil = 1 AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL AND hasNonFoil = 1;
SELECT id FROM cards WHERE duelDeck = 'a';
SELECT edhrecRank FROM cards WHERE frameVersion = '2015';
SELECT DISTINCT cards.artist FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified';
SELECT c.* FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.availability = 'paper' AND fd.language = 'Japanese';
SELECT COUNT(DISTINCT cards.uuid) AS banned_white_border_count FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.borderColor = 'white';
SELECT cards.uuid, foreign_data.language FROM cards JOIN legalities ON cards.uuid = legalities.uuid JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE legalities.format = 'legacy';
SELECT rulings.text FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Beacon of Immortality';
SELECT l.status, COUNT(*) AS count FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = 'future' GROUP BY l.status;
SELECT name, colors FROM cards WHERE setCode = 'OGW';
SELECT cards.name AS CardName, foreign_data.language AS TranslationLanguage FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.setCode = '10E' AND cards.convertedManaCost = 5;
SELECT cards.name, rulings.date FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originalType = 'Creature - Elf';
SELECT cards.colors, legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;
SELECT c.id, c.name, c.colors, c.originalType, fd.language, fd.name AS foreign_name, fd.text AS foreign_text FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.originalType LIKE '%Artifact%' AND (c.colors = 'B' OR c.colors LIKE 'B,%' OR c.colors LIKE '%, B' OR c.colors LIKE '%, B,%');
SELECT cards.name, MIN(rulings.date) AS earliest_ruling_date FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'uncommon' GROUP BY cards.name ORDER BY earliest_ruling_date ASC LIMIT 3;
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL);
SELECT COUNT(*) AS powerful_white_bordered_cards FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = '-1';
SELECT COUNT(*) AS count FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;
SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability LIKE '%paper%' AND availability LIKE '%mtgo%';
SELECT SUM(convertedManaCost) AS total_unconverted_mana_cost FROM cards WHERE artist = 'Rob Alexander';
SELECT DISTINCT types AS type FROM cards WHERE availability = 'arena' UNION SELECT DISTINCT subtypes AS type FROM cards WHERE availability = 'arena' UNION SELECT DISTINCT supertypes AS type FROM cards WHERE availability = 'arena';
SELECT DISTINCT cards.setCode FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Spanish';
SELECT (COUNT(CASE WHEN hand = '+3' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards WHERE frameEffects = 'legendary';
SELECT (CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) / COUNT(*) * 100) AS percentage_with_textbox, GROUP_CONCAT(id) AS ids_with_textbox FROM cards WHERE isStorySpotlight = 1;

SELECT DISTINCT set_translations.language FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.baseSetSize = 309;
SELECT COUNT(DISTINCT s.code) AS brazilian_portuguese_commander_sets FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.block = 'Commander' AND st.language = 'Portuguese (Brasil)';
SELECT DISTINCT cards.id FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types LIKE '%Creature%' AND legalities.status = 'legal';
SELECT DISTINCT fd.type FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'German' AND c.subtypes IS NOT NULL AND c.supertypes IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE power IS NULL AND ( text LIKE '%when%' OR text LIKE '%whenever%' OR text LIKE '%at%' );
SELECT COUNT(DISTINCT cards.id) AS number_of_cards FROM cards JOIN legalities ON cards.uuid = legalities.uuid JOIN rulings ON cards.uuid = rulings.uuid WHERE legalities.format = 'pre-modern' AND legalities.status = 'legal' AND rulings.text = 'This is a triggered mana ability' AND cards.side IS NULL;
SELECT cards.id FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Erica Yang' AND cards.availability = 'paper' AND legalities.format = 'pauper' AND legalities.status = 'legal';
SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation';
SELECT foreign_data.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.types LIKE '%Creature%' AND cards.layout = 'normal' AND cards.borderColor = 'black' AND cards.artist = 'Matthew D. Wilson';
SELECT COUNT(DISTINCT cards.id) FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'rare' AND rulings.date = '2009-01-10';
SELECT st.language FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.baseSetSize = 180 AND s.block = 'Ravnica';
SELECT 100.0 * SUM(cards.hasContentWarning = 0) / COUNT(*) AS percentage FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'commander' AND legalities.status = 'legal';
SELECT (SELECT COUNT(DISTINCT cards.uuid) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND (cards.power IS NULL OR cards.power = '*') ) * 100.0 / (SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' ) AS percentage;
SELECT (CAST(SUM(CASE WHEN s.type = 'expansion' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE st.language = 'Japanese';
SELECT availability FROM cards WHERE artist = 'Daren Bader';
SELECT COUNT(*) AS count FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000 AND colors IS NOT NULL AND colors != '';
SELECT SUM(isOversized) AS oversized_count, SUM(isReprint) AS reprinted_count, SUM(isPromo) AS promo_count FROM cards;
SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY name ASC LIMIT 3;
SELECT language FROM foreign_data WHERE multiverseid = 149934;
SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3;
SELECT (CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS proportion FROM cards;
SELECT number FROM cards WHERE otherFaceIds IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%';
SELECT code, name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3;
SELECT st.language FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.mcmName = 'Archenemy' AND s.code = 'ARC';
SELECT sets.name, set_translations.translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 5;
SELECT set_translations.language, sets.type FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 206;
SELECT DISTINCT sets.id, sets.name FROM sets JOIN cards ON cards.setCode = sets.code JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE sets.block = 'Shadowmoor' AND foreign_data.language = 'Italian' ORDER BY sets.name ASC LIMIT 2;
SELECT DISTINCT sets.id FROM sets JOIN cards ON sets.code = cards.setCode JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE sets.isForeignOnly = 0 AND sets.isFoilOnly = 1 AND foreign_data.language = 'Japanese';
SELECT sets.name FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Russian' ORDER BY sets.baseSetSize DESC LIMIT 1;
SELECT (COUNT(DISTINCT cards.id) * 100.0 / (SELECT COUNT(*) FROM cards)) AS percentage FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.isOnlineOnly = 1 AND foreign_data.language = 'Chinese Simplified';
SELECT COUNT(DISTINCT sets.id) AS japanese_only_sets_count FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Japanese' AND (sets.mtgoCode IS NULL OR sets.mtgoCode = '') AND NOT EXISTS ( SELECT 1 FROM set_translations st WHERE st.setCode = sets.code AND st.language <> 'Japanese' );
SELECT COUNT(*) AS black_border_count FROM cards WHERE borderColor = 'black';
SELECT id FROM cards WHERE frameEffects = 'extendedart';
SELECT name, artist, manaCost, type, text FROM cards WHERE borderColor = 'black' AND isFullArt = 1;
SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 174;
SELECT name FROM sets WHERE code = 'ALL';
SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar';
SELECT code FROM sets WHERE releaseDate = '2007-07-13';
SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage');
SELECT code FROM sets WHERE type = 'expansion';
SELECT foreign_data.name AS foreign_name, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'Boros';
SELECT fd.language, fd.flavorText, c.type FROM cards c INNER JOIN foreign_data fd ON fd.uuid = c.uuid WHERE c.watermark = 'colorpie';
SELECT (COUNT(CASE WHEN c.convertedManaCost = 10 THEN 1 END) * 100.0) / COUNT(c.convertedManaCost) AS percentage FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Abyssal Horror';
SELECT code FROM sets WHERE type IN ('expansion', 'commander');
SELECT fd.name AS foreign_name, c.type FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.watermark = 'abzan';
SELECT foreign_data.language, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius';
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT COUNT(*) AS paper_available_positive_hand_size FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%';
SELECT name FROM cards WHERE isTextless = 0;
SELECT convertedManaCost FROM cards WHERE name = 'Ancestor''s Chosen';
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL);
SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;
SELECT supertypes, subtypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';
SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle';
SELECT COUNT(DISTINCT artist) AS unique_artist_count FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena%' AND availability LIKE '%mtgo%';
SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1;
SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;
SELECT st.translation FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE c.name = "Ancestor's Chosen" AND st.language = 'Italian';
SELECT COUNT(*) AS translation_count FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' );
SELECT cards.name FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition';
SELECT CASE WHEN EXISTS ( SELECT 1 FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.name = "Ancestor's Chosen" AND fd.language = 'Korean' ) THEN 'Yes' ELSE 'No' END AS has_korean_version;
SELECT COUNT(*) FROM cards WHERE setCode IN ( SELECT setCode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition' ) AND artist = 'Adam Rex';
SELECT sets.baseSetSize FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition';
SELECT st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.name = 'Eighth Edition' AND st.language = 'Simplified Chinese';
SELECT CASE WHEN mtgoCode IS NOT NULL THEN 'Yes' ELSE 'No' END AS appears_on_mtgo FROM sets WHERE name = 'Angel of Mercy';
SELECT releaseDate FROM sets WHERE name = 'Ancestor''s Chosen';
SELECT sets.type FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition';
SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian';
SELECT CASE WHEN isForeignOnly = 1 THEN 'Yes' ELSE 'No' END AS only_available_outside_US FROM sets WHERE name = 'Adarkar Valkyrie';
SELECT COUNT(*) AS ItalianSetsUnder10 FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL AND sets.baseSetSize < 10;
SELECT COUNT(*) AS black_border_coldsnap_count FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.borderColor = 'black';
SELECT name FROM cards WHERE setCode = 'Coldsnap' AND convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards WHERE setCode = 'Coldsnap' );
SELECT DISTINCT cards.artist FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');
SELECT cards.* FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.number = '4';
SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.convertedManaCost > 5 AND (cards.power = '*' OR cards.power IS NULL);
SELECT foreign_data.flavorText FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian';
SELECT foreign_data.language FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.flavorText IS NOT NULL;
SELECT fd.type FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'German';
SELECT cards.name AS CardName, foreign_data.text AS ItalianRuling FROM sets JOIN cards ON cards.setCode = sets.code JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian' AND foreign_data.type = 'ruling';
SELECT fd.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND fd.language = 'Italian' AND c.convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards WHERE setCode = s.code );
SELECT rulings.date FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Reminisce';
SELECT (CAST(SUM(c.convertedManaCost = 7) AS REAL) / COUNT(*)) * 100 AS percentage FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap';
SELECT (CAST(SUM(CASE WHEN cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage_incredibly_powerful FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap';
SELECT code FROM sets WHERE releaseDate = '2017-07-14';
SELECT keyruneCode FROM sets WHERE code = 'PKHC';
SELECT mcmId FROM sets WHERE code = 'SS2';
SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09';
SELECT type FROM sets WHERE name = 'From the Vault: Lore';
SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';
SELECT cards.name, rulings.text AS ruling_text, CASE WHEN cards.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS has_missing_or_degraded_properties FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Jim Pavelec';
SELECT sets.releaseDate FROM cards JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Evacuation';
SELECT sets.baseSetSize FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Rinascita di Alara';
SELECT sets.type FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Huitième édition';
SELECT st.translation FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE c.name = 'Tendo Ice Bridge' AND st.language = 'French';
SELECT COUNT(*) AS translation_count FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.name = 'Salvat 2011' AND st.translation IS NOT NULL;
SELECT st.translation AS JapaneseSetName FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE c.name = 'Fellwar Stone' AND st.language = 'Japanese';
SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Journey into Nyx Hero''s Path' ORDER BY c.convertedManaCost DESC LIMIT 1;
SELECT sets.releaseDate FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Ola de frío';
SELECT sets.type FROM cards JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Samite Pilgrim';
SELECT COUNT(*) AS card_count FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedManaCost = 3;
SELECT st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.name = 'Mirrodin' AND st.language = 'Chinese Simplified';
SELECT (SUM(c.isNonFoilOnly = 1) * 100.0) / COUNT(*) AS percentage_non_foil_only FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Japanese';
SELECT (CAST(SUM(cards.isOnlineOnly = 1) AS FLOAT) / COUNT(*)) * 100 AS percentage_online_only FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Portuguese (Brazil)';
SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1;
SELECT MAX(baseSetSize) FROM sets
SELECT artist FROM cards WHERE side IS NULL AND convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards WHERE side IS NULL );
SELECT frameEffects, COUNT(*) AS effect_count FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY effect_count DESC LIMIT 1;
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a';
SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1;
SELECT cards.name, cards.convertedManaCost FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'duel' AND legalities.status = 'legal' ORDER BY cards.convertedManaCost DESC LIMIT 10;
SELECT c.originalReleaseDate, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND c.originalReleaseDate = ( SELECT MIN(originalReleaseDate) FROM cards WHERE rarity = 'mythic' ) AND l.status = 'legal';
SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'Volkan Baga' AND foreign_data.language = 'French';
SELECT COUNT(*) AS rare_enchantment_abundance_all_legal FROM cards c WHERE c.rarity = 'rare' AND c.types LIKE '%Enchantment%' AND c.name = 'Abundance' AND NOT EXISTS ( SELECT 1 FROM legalities l WHERE l.uuid = c.uuid AND l.status != 'Legal' );
SELECT l.format, c.name FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE l.status = 'banned' AND l.format = ( SELECT format FROM legalities WHERE status = 'banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT st.language FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.name = 'Battlebond';
SELECT DISTINCT legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = ( SELECT artist FROM cards GROUP BY artist ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = '1997' AND cards.artist = 'D. Alexander Gregory' AND legalities.format = 'legacy' AND (cards.hasContentWarning = 1 OR cards.availability LIKE '%Wizards of the Coast%');
SELECT cards.name, legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.edhrecRank = 1 AND legalities.status = 'banned';
SELECT -- Calculate the annual average number of sets released between 2012 and 2015 (SELECT COUNT(*) / 4.0 FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31') AS average_sets_per_year, -- Determine the most common language of the cards (SELECT language FROM foreign_data GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1) AS common_language;
SELECT DISTINCT artist FROM cards WHERE borderColor = 'black' AND availability = 'arena';
SELECT c.uuid FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'oldschool' AND l.status IN ('banned', 'restricted');
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';
SELECT rulings.date, rulings.text FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC;
SELECT cards.name AS CardName, legalities.format AS LegalFormat FROM sets JOIN cards ON sets.code = cards.setCode JOIN legalities ON cards.uuid = legalities.uuid WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'legal';
SELECT sets.name FROM sets WHERE sets.code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' ) AND sets.code NOT IN ( SELECT setCode FROM set_translations WHERE language LIKE '%Japanese%' );

SELECT DisplayName, Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1;
SELECT DisplayName FROM users WHERE strftime('%Y', CreationDate) = '2014';
SELECT COUNT(*) AS UserCount FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';
SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);
SELECT COUNT(*) AS UserCount FROM users WHERE UpVotes > 100 AND DownVotes > 1;
SELECT COUNT(*) AS user_count FROM users WHERE Views > 10 AND CAST(strftime('%Y', CreationDate) AS INTEGER) > 2013;
SELECT COUNT(*) AS PostCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';
SELECT posts.Title FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';
SELECT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Eliciting priors from experts';
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1;
SELECT users.DisplayName FROM users JOIN posts ON users.Id = posts.OwnerUserId ORDER BY posts.FavoriteCount DESC LIMIT 1;
SELECT SUM(posts.CommentCount) AS TotalComments FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';
SELECT MAX(p.AnswerCount) AS MaxAnswerCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';
SELECT users.DisplayName FROM posts JOIN users ON posts.LastEditorUserId = users.Id WHERE posts.Title = 'Examples for teaching: Correlation does not mean causation';
SELECT COUNT(*) AS RootPostCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' AND p.ParentId IS NULL;
SELECT DISTINCT users.DisplayName FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.ClosedDate IS NOT NULL;
SELECT COUNT(*) AS ElderHighScorePosts FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age > 65 AND p.Score >= 20;
SELECT users.Location FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Title = 'Eliciting priors from experts';
SELECT p.Body FROM tags t JOIN posts p ON t.ExcerptPostId = p.Id WHERE t.TagName = 'bayesian';
SELECT Body FROM posts WHERE Id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 );
SELECT COUNT(*) AS BadgeCount FROM badges WHERE UserId = ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' );
SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie';
SELECT COUNT(*) AS BadgeCount FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie' AND strftime('%Y', badges.Date) = '2011';
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId GROUP BY u.Id ORDER BY COUNT(b.Id) DESC LIMIT 1;
SELECT AVG(posts.Score) AS AverageScore FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';
SELECT CAST(COUNT(b.Id) AS FLOAT) / COUNT(DISTINCT u.Id) AS average_badges FROM users u LEFT JOIN badges b ON u.Id = b.UserId WHERE u.Views > 200;
SELECT (SUM(CASE WHEN u.Age > 65 THEN 1 ELSE 0 END) * 100.0) / COUNT(p.Id) AS Percentage FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score > 20;
SELECT COUNT(*) AS VoteCount FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';
SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1;
SELECT COUNT(*) AS RevivalBadgeCount FROM badges WHERE Name = 'Revival';
SELECT posts.Title FROM posts JOIN comments ON posts.Id = comments.PostId WHERE comments.Score = (SELECT MAX(Score) FROM comments);
SELECT COUNT(*) AS CommentCount FROM comments WHERE PostId = ( SELECT Id FROM posts WHERE ViewCount = 1910 );
SELECT posts.FavoriteCount FROM comments JOIN posts ON comments.PostId = posts.Id WHERE comments.UserId = 3025 AND comments.CreationDate = '2014/4/23 20:29:39.0';
SELECT comments.Text FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.ParentId = 107829;
SELECT CASE WHEN p.ClosedDate IS NOT NULL THEN 'Yes' ELSE 'No' END AS IsWellFinished FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0';
SELECT u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 65041;
SELECT COUNT(*) AS PostCount FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini' );
SELECT users.DisplayName FROM votes JOIN users ON votes.UserId = users.Id WHERE votes.Id = 6347;
SELECT COUNT(*) AS VoteCount FROM votes v JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%data visualization%';
SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'DatEpicCoderGuyWhoPrograms';
SELECT (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) / (SELECT COUNT(*) FROM votes WHERE UserId = 24) AS posts_to_votes_ratio;
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';
SELECT Text FROM comments WHERE Score = 17;
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';
SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'SilentGhost';
SELECT u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text = 'thank you user93!';
SELECT comments.Text FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'A Lion';
SELECT users.DisplayName, users.Reputation FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Title = 'Understanding what Dassault iSight is doing?';
SELECT comments.Text FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.Title = 'How does gentle boosting differ from AdaBoost?';
SELECT users.DisplayName FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Necromancer' LIMIT 10;
SELECT u.DisplayName FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Title = 'Open source tools for visualizing multi-dimensional data';
SELECT posts.Title FROM posts JOIN users ON posts.LastEditorUserId = users.Id WHERE users.DisplayName = 'Vebjorn Ljosa';
SELECT SUM(posts.Score) AS TotalScore, users.WebsiteUrl FROM users JOIN posts ON users.Id = posts.LastEditorUserId WHERE users.DisplayName = 'Yevgeny';
SELECT c.* FROM comments c WHERE c.PostId = ( SELECT p.Id FROM posts p WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' ) AND c.UserId IN ( SELECT ph.UserId FROM postHistory ph WHERE ph.PostId = ( SELECT p.Id FROM posts p WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' ) );
SELECT SUM(v.BountyAmount) AS TotalBountyAmount FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.Title LIKE '%data%' AND v.BountyAmount IS NOT NULL;
SELECT users.DisplayName FROM votes JOIN posts ON votes.PostId = posts.Id JOIN users ON votes.UserId = users.Id WHERE votes.BountyAmount = 50 AND posts.Title LIKE '%variance%';
SELECT * FROM posts WHERE Tags LIKE '%<humor>%' ), AverageViewCount AS ( SELECT AVG(ViewCount) AS AvgViewCount FROM HumorPosts ) SELECT AvgViewCount.AvgViewCount, p.Title, c.Text AS CommentText, c.Score FROM HumorPosts p LEFT JOIN comments c ON p.Id = c.PostId, AverageViewCount
SELECT COUNT(*) AS TotalComments FROM comments WHERE UserId = 13;
SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);
SELECT Id FROM users ORDER BY Views ASC LIMIT 1;
SELECT COUNT(DISTINCT UserId) AS SupporterUsers2011 FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011';
SELECT COUNT(*) AS NumberOfUsersWithMoreThan5Badges FROM ( SELECT UserId FROM badges WHERE UserId IS NOT NULL GROUP BY UserId HAVING COUNT(*) > 5 ) AS SubQuery;
SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u JOIN badges b1 ON u.Id = b1.UserId JOIN badges b2 ON u.Id = b2.UserId WHERE u.Location = 'New York' AND b1.Name = 'Supporter' AND b2.Name = 'Teacher';
SELECT users.DisplayName, users.Reputation FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Id = 1;
SELECT u.Id, u.DisplayName FROM users u JOIN posts p ON p.OwnerUserId = u.Id LEFT JOIN postHistory ph ON ph.PostId = p.Id WHERE u.Views >= 1000 GROUP BY u.Id, u.DisplayName HAVING COUNT(ph.Id) = COUNT(p.Id)

SELECT COUNT(DISTINCT users.Id) AS TeacherBadgeCount FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'India' AND badges.Name = 'Teacher';
SELECT ((CAST(SUM(CASE WHEN strftime('%Y', Date) = '2010' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100) - ((CAST(SUM(CASE WHEN strftime('%Y', Date) = '2011' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100) AS percentage_difference FROM badges WHERE Name = 'Students';
SELECT PostHistoryTypeId FROM postHistory WHERE PostId = 3720;
SELECT p.Id, p.ViewCount FROM postLinks pl JOIN posts p ON ( (pl.PostId = 61217 AND p.Id = pl.RelatedPostId) OR (pl.RelatedPostId = 61217 AND p.Id = pl.PostId) ) WHERE pl.PostId = 61217 OR pl.RelatedPostId = 61217;
SELECT posts.Score, postLinks.LinkTypeId FROM posts JOIN postLinks ON posts.Id = postLinks.PostId WHERE posts.Id = 395;
SELECT Id, OwnerUserId FROM posts WHERE Score > 60;
SELECT SUM(FavoriteCount) AS TotalFavoriteCount FROM posts WHERE OwnerUserId = 686 AND strftime('%Y', CreaionDate) = '2011';
SELECT AVG(u.UpVotes) AS AverageUpVotes, AVG(u.Age) AS AverageAge FROM users u WHERE (SELECT COUNT(*) FROM posts p WHERE p.OwnerUserId = u.Id) > 10;
SELECT COUNT(DISTINCT UserId) AS AnnouncerCount FROM badges WHERE Name = 'Announcer';
SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08';
SELECT COUNT(*) AS PositiveCommentCount FROM comments WHERE Score > 60;
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47.0';
SELECT COUNT(*) AS NumberOfPosts FROM posts WHERE Score = 10;
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = ( SELECT MAX(Reputation) FROM users );
SELECT users.Reputation FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Date = '2010-07-19 19:39:08.0';
SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Pierre';
SELECT badges.Date FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Location = 'Rochester, NY';
SELECT (COUNT(DISTINCT b.UserId) * 100.0) / COUNT(u.Id) AS percentage FROM users u LEFT JOIN badges b ON u.Id = b.UserId AND b.Name = 'Teacher';
SELECT (COUNT(CASE WHEN u.Age BETWEEN 13 AND 18 THEN 1 END) * 100.0) / COUNT(DISTINCT u.Id) AS percentage FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Organizer';
SELECT comments.Score FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.CreationDate = '2010-07-19 19:19:56.0';
SELECT comments.Text FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.CreationDate = '2010-07-19 19:37:33.0';
SELECT users.Age FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'Vienna, Austria';
SELECT COUNT(DISTINCT u.Id) AS NumberOfAdultsWithSupporterBadge FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65;
SELECT SUM(u.Views) AS TotalViews FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0';
SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Reputation = (SELECT MIN(Reputation) FROM users);
SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Sharpie';
SELECT COUNT(DISTINCT badges.UserId) AS ElderSupporterCount FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age > 65;
SELECT DisplayName FROM users WHERE Id = 30;
SELECT COUNT(*) AS UserCount FROM users WHERE Location = 'New York';
SELECT COUNT(*) AS VotesIn2010 FROM votes WHERE strftime('%Y', CreationDate) = '2010';
SELECT COUNT(*) AS adult_user_count FROM users WHERE Age BETWEEN 19 AND 65;
SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);
SELECT CAST(COUNT(CASE WHEN strftime('%Y', CreationDate) = '2010' THEN 1 END) AS REAL) / COUNT(CASE WHEN strftime('%Y', CreationDate) = '2011' THEN 1 END) AS VoteRatio2010To2011 FROM votes;
SELECT DISTINCT t.TagName FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN tags t ON p.Tags LIKE '%' || '<' || t.TagName || '>' || '%' WHERE u.DisplayName = 'John Stauffer';
SELECT COUNT(*) AS PostCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Daniel Vassallo';
SELECT COUNT(*) AS VoteCount FROM votes JOIN users ON votes.UserId = users.Id WHERE users.DisplayName = 'Harlan';
SELECT p.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'slashnick' ORDER BY p.AnswerCount DESC LIMIT 1;
SELECT u.DisplayName, SUM(p.ViewCount) AS TotalViews FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY u.DisplayName ORDER BY TotalViews DESC LIMIT 1;
SELECT COUNT(*) AS PostCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN votes v ON p.Id = v.PostId WHERE u.DisplayName = 'Matt Parker' GROUP BY p.Id HAVING COUNT(v.Id) > 4;
SELECT COUNT(*) AS NegativeComments FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Neil McGuigan' AND c.Score < 60;
SELECT DISTINCT t.TagName FROM posts p JOIN users u ON p.OwnerUserId = u.Id LEFT JOIN comments c ON c.PostId = p.Id JOIN tags t ON p.Tags LIKE '%' || '<' || t.TagName || '>' || '%' WHERE u.DisplayName = 'Mark Meckes' AND c.Id IS NULL;
SELECT users.DisplayName FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Organizer';
SELECT (COUNT(CASE WHEN p.Tags LIKE '%<r>%' THEN 1 END) * 100.0) / COUNT(*) AS percentage FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Community';
SELECT -- Sum of ViewCount for posts by 'Mornington' (SELECT IFNULL(SUM(p.ViewCount), 0) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Mornington') - -- Sum of ViewCount for posts by 'Amos' (SELECT IFNULL(SUM(p.ViewCount), 0) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Amos') AS ViewCountDifference;
SELECT COUNT(DISTINCT UserId) AS CommentatorBadgeCount FROM badges WHERE Name = 'commentator' AND strftime('%Y', Date) = '2014';
SELECT COUNT(*) AS post_count FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';
SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users);
SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images';
SELECT COUNT(*) AS NegativeCommentCount FROM comments WHERE UserId = 13 AND Score < 60;
SELECT p.Title, c.UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score > 60;
SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Location = 'North Pole' AND strftime('%Y', badges.Date) = '2011';
SELECT users.DisplayName, users.WebsiteUrl FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.FavoriteCount > 150;
SELECT p.LastEditDate, COUNT(ph.Id) AS PostHistoryCount FROM posts p LEFT JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY p.Id, p.LastEditDate;
SELECT u.LastAccessDate, u.Location FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Outliers';
SELECT DISTINCT related_posts.Title FROM posts AS target_post JOIN postLinks ON target_post.Id = postLinks.PostId OR target_post.Id = postLinks.RelatedPostId JOIN posts AS related_posts ON related_posts.Id = postLinks.RelatedPostId OR related_posts.Id = postLinks.PostId WHERE target_post.Title = 'How to tell if something happened in a data set which monitors a value over time' AND related_posts.Id != target_post.Id;
SELECT p.Id AS PostId, NULL AS BadgeName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Samuel' AND strftime('%Y', p.CreaionDate) = '2013' UNION ALL SELECT NULL AS PostId, b.Name AS BadgeName FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Samuel' AND strftime('%Y', b.Date) = '2013';
SELECT users.DisplayName FROM posts JOIN users ON posts.OwnerUserId = users.Id ORDER BY posts.ViewCount DESC LIMIT 1;
SELECT u.DisplayName, u.Location FROM tags t JOIN posts p ON t.ExcerptPostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE t.TagName = 'hypothesis-testing';
SELECT p.Title, pl.LinkTypeId FROM postLinks pl JOIN posts p ON p.Id = pl.RelatedPostId WHERE pl.PostId = ( SELECT Id FROM posts WHERE Title = 'What are principal component scores?' ) UNION SELECT p.Title, pl.LinkTypeId FROM postLinks pl JOIN posts p ON p.Id = pl.PostId WHERE pl.RelatedPostId = ( SELECT Id FROM posts WHERE Title = 'What are principal component scores?' );
SELECT u.DisplayName FROM posts AS child JOIN posts AS parent ON child.ParentId = parent.Id JOIN users AS u ON parent.OwnerUserId = u.Id WHERE child.ParentId IS NOT NULL AND child.Score = ( SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL ) LIMIT 1;
SELECT u.DisplayName, u.WebsiteUrl FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.VoteTypeId = 8 AND v.BountyAmount = ( SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8 );
SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5;
SELECT COUNT(*) AS TagCount FROM tags WHERE Count BETWEEN 5000 AND 7000;
SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);
SELECT Age FROM users ORDER BY Reputation DESC LIMIT 1;
SELECT COUNT(DISTINCT p.Id) AS PostCount FROM posts p JOIN votes v ON p.Id = v.PostId WHERE strftime('%Y', p.CreationDate) = '2011' AND v.BountyAmount = 50;
SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users);
SELECT p.Score FROM posts p JOIN tags t ON p.Tags LIKE '%' || '<' || t.TagName || '>' || '%' WHERE t.Count = (SELECT MAX(Count) FROM tags) LIMIT 1;
SELECT COUNT(pl.Id) / 12.0 AS AvgMonthlyLinks FROM postLinks pl JOIN posts p ON pl.PostId = p.Id WHERE strftime('%Y', pl.CreationDate) = '2010' AND p.AnswerCount <= 2;
SELECT p.Id FROM posts p JOIN votes v ON p.Id = v.PostId WHERE v.UserId = 1465 ORDER BY p.FavoriteCount DESC LIMIT 1;
SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM postLinks ORDER BY CreationDate ASC LIMIT 1 );
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId GROUP BY u.Id ORDER BY COUNT(b.Name) DESC LIMIT 1;
SELECT MIN(votes.CreationDate) AS FirstVoteDate FROM votes JOIN users ON votes.UserId = users.Id WHERE users.DisplayName = 'chl';
SELECT MIN(p.CreationDate) AS FirstPostDate FROM posts p WHERE p.OwnerUserId = ( SELECT u.Id FROM users u ORDER BY u.Age ASC LIMIT 1 );
SELECT users.DisplayName FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Autobiographer' ORDER BY badges.Date ASC LIMIT 1;
SELECT COUNT(*) AS UserCount FROM ( SELECT u.Id FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' GROUP BY u.Id HAVING SUM(p.FavoriteCount) >= 4 ) AS subquery;
SELECT AVG(vote_counts.post_count) AS average_posts_voted FROM ( SELECT v.UserId, COUNT(DISTINCT v.PostId) AS post_count FROM votes v WHERE v.UserId IN ( SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users) ) GROUP BY v.UserId ) AS vote_counts;
SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1;
SELECT COUNT(*) AS HighReputationHighViewsUsers FROM users WHERE Reputation > 2000 AND Views > 1000;
SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65;
SELECT COUNT(*) AS PostCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Jay Stevens' AND strftime('%Y', p.CreaionDate) = '2010';
SELECT posts.Id, posts.Title FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Harvey Motulsky' ORDER BY posts.ViewCount DESC LIMIT 1;
SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts);
SELECT AVG(p.Score) AS AverageScore FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Stephen Turner';
SELECT DISTINCT users.DisplayName FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.ViewCount > 20000 AND strftime('%Y', posts.CreaionDate) = '2011';
SELECT Id, OwnerDisplayName FROM posts WHERE strftime('%Y', CreationDate) = '2010' ORDER BY FavoriteCount DESC LIMIT 1;
SELECT (CAST(COUNT(p.Id) AS FLOAT) / (SELECT COUNT(*) FROM posts WHERE strftime('%Y', p.CreaionDate) = '2011') ) * 100) AS percentage FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE strftime('%Y', p.CreaionDate) = '2011' AND u.Reputation > 1000;
SELECT (SUM(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage FROM users WHERE Age IS NOT NULL;
SELECT p.ViewCount AS TotalViews, u.DisplayName AS LastEditorName FROM posts p INNER JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Title = 'Computer Game Datasets';
SELECT COUNT(*) AS AboveAverageViews FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);
SELECT COUNT(*) AS NumberOfComments FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE Score = (SELECT MAX(Score) FROM posts) );
SELECT COUNT(*) AS NumberOfPosts FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;
SELECT u.DisplayName, u.Location FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Id = 183;
SELECT Name FROM badges WHERE UserId = ( SELECT Id FROM users WHERE DisplayName = 'Emmett' ) ORDER BY Date DESC LIMIT 1;
SELECT COUNT(*) AS NumberOfAdultUsersWithOver5000UpVotes FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;
SELECT badges.Name AS BadgeName, ROUND(julianday(badges.Date) - julianday(users.CreationDate)) AS DaysToBadge FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Zolomon';
SELECT (SELECT COUNT(*) FROM posts WHERE OwnerUserId = u.Id) AS post_count, (SELECT COUNT(*) FROM comments WHERE UserId = u.Id) AS comment_count FROM users u WHERE u.CreationDate = ( SELECT MAX(CreationDate) FROM users );
SELECT c.Text AS CommentText, u.DisplayName AS UserDisplayName FROM posts p INNER JOIN comments c ON p.Id = c.PostId INNER JOIN users u ON c.UserId = u.Id WHERE p.Title = 'Analysing wind data with R' ORDER BY c.CreationDate DESC LIMIT 1;
SELECT COUNT(DISTINCT UserId) AS AwardedUsers FROM badges WHERE Name = 'Citizen Patrol';
SELECT COUNT(*) AS CareerTaggedPosts FROM posts WHERE Tags LIKE '%<careers>%';
SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon';
SELECT (SELECT COUNT(*) FROM comments WHERE PostId = p.Id AND UserId IS NOT NULL) AS CommentCount, (SELECT COUNT(*) FROM posts WHERE ParentId = p.Id AND UserId IS NOT NULL) AS AnswerCount FROM posts p WHERE p.Title = 'Clustering 1D data';
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';
SELECT COUNT(DISTINCT PostId) AS NumberOfPostsWithBountyOver30 FROM votes WHERE BountyAmount >= 30;
SELECT (CAST(SUM(CASE WHEN p.Score >= 50 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage FROM posts p WHERE p.OwnerUserId = ( SELECT u.Id FROM users u ORDER BY u.Reputation DESC LIMIT 1 );
SELECT COUNT(*) AS PostCount FROM posts WHERE Score < 20;
SELECT COUNT(*) AS TagCount FROM tags WHERE Id < 15 AND Count <= 20;
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';
SELECT u.Reputation, u.UpVotes FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text = 'fine, you win :)';
SELECT comments.Text FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE posts.Title LIKE '%linear regression%';
SELECT comments.Text FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.ViewCount BETWEEN 100 AND 150 ORDER BY comments.Score DESC LIMIT 1;
SELECT users.CreationDate, users.Age FROM users JOIN comments ON users.Id = comments.UserId WHERE comments.Text LIKE '%http://%';
SELECT COUNT(DISTINCT p.Id) AS PostCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.ViewCount < 5;
SELECT COUNT(*) AS ZeroScoreComments FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.CommentCount = 1 AND comments.Score = 0;
SELECT COUNT(DISTINCT users.Id) AS TotalUsersAge40 FROM comments JOIN users ON comments.UserId = users.Id WHERE comments.Score = 0 AND users.Age = 40;
SELECT posts.Id AS PostId, comments.Text AS Comment FROM posts JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'Group differences on a five point Likert item';
SELECT COUNT(*) AS UpVoteCount FROM votes WHERE UserId = ( SELECT UserId FROM comments WHERE Text = 'R is also lazy evaluated.' ) AND VoteTypeId = 2;
SELECT comments.* FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'Harvey Motulsky';
SELECT DISTINCT u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 1 AND 5 AND u.DownVotes = 0;
SELECT (COUNT(CASE WHEN users.UpVotes = 0 THEN 1 END) * 100.0) / COUNT(*) AS percentage FROM comments JOIN users ON comments.UserId = users.Id WHERE comments.Score BETWEEN 5 AND 10;
SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man';
SELECT COUNT(DISTINCT hero_power.hero_id) AS super_strength_count FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';
SELECT COUNT(*) FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;
SELECT s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.id HAVING COUNT(hp.power_id) > 15;
SELECT COUNT(*) AS blue_eyes_superheroes_count FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';
SELECT colour.colour FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse';
SELECT COUNT(DISTINCT superhero.id) AS num_heroes_with_agility_and_blue_eyes FROM superhero JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE eye_colour.colour = 'Blue' AND superpower.power_name = 'Agility';
SELECT s.superhero_name FROM superhero s JOIN colour ce ON s.eye_colour_id = ce.id JOIN colour ch ON s.hair_colour_id = ch.id WHERE ce.colour = 'Blue' AND ch.colour = 'Blond';
SELECT COUNT(*) AS Marvel_Superhero_Count FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT s.full_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' AND s.height_cm = ( SELECT MAX(height_cm) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' );
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron';
SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN colour c ON s.eye_colour_id = c.id WHERE p.publisher_name = 'Marvel Comics' AND c.colour = 'Blue';
SELECT AVG(s.height_cm) AS average_height_cm FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics';
SELECT (COUNT(DISTINCT hp.hero_id) * 100.0) / COUNT(DISTINCT s.id) AS super_strength_percentage FROM superhero s JOIN publisher p ON s.publisher_id = p.id LEFT JOIN hero_power hp ON s.id = hp.hero_id LEFT JOIN superpower sp ON hp.power_id = sp.id WHERE p.publisher_name = 'Marvel Comics' AND sp.power_name = 'Super Strength';
SELECT COUNT(*) AS dc_comics_superhero_count FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics';
SELECT pub.publisher_name FROM publisher pub JOIN superhero s ON pub.id = s.publisher_id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' AND ha.attribute_value = ( SELECT MIN(ha_inner.attribute_value) FROM hero_attribute ha_inner JOIN attribute a_inner ON ha_inner.attribute_id = a_inner.id WHERE a_inner.attribute_name = 'Speed' );
SELECT COUNT(*) AS gold_eyed_marvel_superheroes FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Gold';
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II';
SELECT COUNT(*) AS blonde_superhero_count FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';

SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';
SELECT COUNT(DISTINCT ha.hero_id) AS superhero_count FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50;
SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';
SELECT COUNT(*) AS female_strength_100_count FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100;
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.id, s.superhero_name ORDER BY COUNT(hp.power_id) DESC LIMIT 1;
SELECT COUNT(*) AS vampire_superhero_count FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';
SELECT (CAST(SUM(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage_bad_alignment, SUM(CASE WHEN alignment.alignment = 'Bad' AND publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS bad_alignment_published_by_marvel FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN publisher ON superhero.publisher_id = publisher.id;
SELECT SUM(p.publisher_name = 'Marvel Comics') - SUM(p.publisher_name = 'DC Comics') AS difference FROM superhero s JOIN publisher p ON s.publisher_id = p.id;
SELECT id FROM publisher WHERE publisher_name = 'Star Trek';
SELECT AVG(attribute_value) AS average_attribute_value FROM hero_attribute;
SELECT COUNT(*) AS total_without_full_name FROM superhero WHERE full_name IS NULL;
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75;
SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Deathlok';
SELECT AVG(weight_kg) AS average_weight_kg FROM superhero WHERE gender_id = 2;
SELECT DISTINCT sp.power_name FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE g.gender = 'Male' LIMIT 5;
SELECT superhero.superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';
SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1;
SELECT superpower.power_name FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 56;
SELECT superhero.full_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God' LIMIT 5;
SELECT COUNT(*) AS bad_superhero_count FROM superhero WHERE alignment_id = ( SELECT id FROM alignment WHERE alignment = 'Bad' );
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;
SELECT c.colour FROM superhero s JOIN race r ON s.race_id = r.id JOIN colour c ON s.hair_colour_id = c.id WHERE s.height_cm = 185 AND r.race = 'human';
SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.weight_kg = ( SELECT MAX(weight_kg) FROM superhero );
SELECT (SUM(CASE WHEN publisher_id = 13 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_marvel FROM superhero WHERE height_cm BETWEEN 150 AND 180;
SELECT s.full_name FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Male' AND s.weight_kg > (0.79 * (SELECT AVG(weight_kg) FROM superhero));
SELECT s.power_name FROM superpower s JOIN hero_power hp ON s.id = hp.power_id GROUP BY s.power_name ORDER BY COUNT(hp.hero_id) DESC LIMIT 1;
SELECT attribute.attribute_name, hero_attribute.attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Abomination';
SELECT superpower.power_name FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 1;
SELECT COUNT(DISTINCT hero_power.hero_id) AS stealth_hero_count FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth';
SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'strength' ORDER BY ha.attribute_value DESC LIMIT 1;
SELECT COUNT(id) * 1.0 / SUM(skin_colour_id = 1) AS average_no_skin_colour FROM superhero;
SELECT COUNT(*) AS num_superheroes FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics';
SELECT s.superhero_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE p.publisher_name = 'Dark Horse Comics' AND a.attribute_name = 'durability' ORDER BY ha.attribute_value DESC LIMIT 1;
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien';
SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight';
SELECT eye_colour.colour AS eye_color, hair_colour.colour AS hair_color, skin_colour.colour AS skin_color FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN publisher ON superhero.publisher_id = publisher.id JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id JOIN colour AS skin_colour ON superhero.skin_colour_id = skin_colour.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Dark Horse Comics';
SELECT superhero.superhero_name, publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.eye_colour_id = superhero.hair_colour_id AND superhero.hair_colour_id = superhero.skin_colour_id;
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb';
SELECT (CAST(SUM(CASE WHEN col.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN colour col ON s.eye_colour_id = col.id WHERE g.gender = 'Female';
SELECT superhero.superhero_name, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler';
SELECT gender.gender FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Adaptation';
SELECT COUNT(*) AS power_count FROM hero_power WHERE hero_id = ( SELECT id FROM superhero WHERE superhero_name = 'Amazo' );
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.full_name = 'Hunter Zolomon';
SELECT superhero.height_cm FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';
SELECT s.superhero_name FROM superhero s JOIN colour eye ON s.eye_colour_id = eye.id JOIN colour hair ON s.hair_colour_id = hair.id WHERE eye.colour = 'Black' AND hair.colour = 'Black';
SELECT eye_colour.colour AS eye_colour FROM superhero JOIN colour AS skin_colour ON superhero.skin_colour_id = skin_colour.id JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id WHERE skin_colour.colour = 'Gold';
SELECT superhero.full_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';
SELECT superhero.superhero_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';
SELECT COUNT(*) FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Strength' AND ha.attribute_value = ( SELECT MAX(ha2.attribute_value) FROM hero_attribute ha2 JOIN attribute a2 ON ha2.attribute_id = a2.id WHERE a2.attribute_name = 'Strength' );
SELECT race.race, alignment.alignment FROM superhero LEFT JOIN race ON superhero.race_id = race.id LEFT JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';
SELECT (SUM(gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics') * 100.0) / SUM(gender.gender = 'Female') AS percent_of_female_heroes_published_by_marvel FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN publisher ON superhero.publisher_id = publisher.id;
SELECT AVG(superhero.weight_kg) AS average_weight FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';
SELECT (SELECT SUM(weight_kg) FROM superhero WHERE full_name = 'Emil Blonsky') - (SELECT SUM(weight_kg) FROM superhero WHERE full_name = 'Charles Chandler') AS weight_difference;
SELECT AVG(height_cm) AS average_height FROM superhero;
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Abomination';
SELECT COUNT(*) AS male_god_eternals FROM superhero WHERE race_id = 21 AND gender_id = 1;
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' AND ha.attribute_value = ( SELECT MAX(ha2.attribute_value) FROM hero_attribute ha2 JOIN attribute a2 ON ha2.attribute_id = a2.id WHERE a2.attribute_name = 'Speed' );
SELECT COUNT(*) AS neutral_superheroes_count FROM superhero WHERE alignment_id = 3;
SELECT a.attribute_name, ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = '3-D Man';
SELECT superhero_name FROM superhero WHERE eye_colour_id = 7 AND hair_colour_id = 9;
SELECT superhero.superhero_name, publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');
SELECT COUNT(*) FROM superhero WHERE publisher_id = 1;
SELECT (SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage_blue_eyes FROM superhero;
SELECT (SELECT COUNT(*) FROM superhero WHERE gender_id = 1) * 1.0 / NULLIF((SELECT COUNT(*) FROM superhero WHERE gender_id = 2), 0) AS ratio ;
SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1;
SELECT id FROM superpower WHERE power_name = 'cryokinesis';
SELECT superhero_name FROM superhero WHERE id = 294;
SELECT full_name FROM superhero WHERE weight_kg IS NULL OR weight_kg = 0;
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan';
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.full_name = 'Helen Parr';
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;
SELECT r.race FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id JOIN race r ON s.race_id = r.id WHERE ha.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute );
SELECT alignment.alignment, superpower.power_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV';
SELECT superhero.full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5;
SELECT AVG(ha.attribute_value) AS average_attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE s.alignment_id = 3;
SELECT DISTINCT colour.colour FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN colour ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100;
SELECT COUNT(*) AS good_female_superheroes FROM superhero WHERE alignment_id = 1 AND gender_id = 2;
SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;
SELECT race.race FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id JOIN gender ON superhero.gender_id = gender.id JOIN race ON superhero.race_id = race.id WHERE colour.colour = 'blue' AND gender.gender = 'male';
SELECT (SUM(CASE WHEN g.id = 2 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_female FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE s.alignment_id = 2;
SELECT SUM(CASE WHEN s.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN s.eye_colour_id = 1 THEN 1 ELSE 0 END) AS difference FROM superhero s WHERE s.weight_kg = 0 OR s.weight_kg IS NULL;
SELECT ha.attribute_value AS strength FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = 'Hulk' AND a.attribute_name = 'Strength';
SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Ajax';
SELECT COUNT(*) AS green_skinned_villains FROM superhero s JOIN alignment a ON s.alignment_id = a.id JOIN colour c ON s.skin_colour_id = c.id WHERE a.alignment = 'Bad' AND c.colour = 'Green';
SELECT COUNT(*) AS female_marvel_superheroes FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id WHERE g.gender = 'Female' AND p.publisher_name = 'Marvel Comics';
SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name ASC;
SELECT gender.gender FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force';
SELECT superhero_name FROM superhero WHERE publisher_id = ( SELECT id FROM publisher WHERE publisher_name = 'DC Comics' ) ORDER BY weight_kg DESC LIMIT 1;
SELECT AVG(s.height_cm) AS average_height FROM superhero s JOIN race r ON s.race_id = r.id JOIN publisher p ON s.publisher_id = p.id WHERE r.race <> 'Human' AND p.publisher_name = 'Dark Horse Comics';
SELECT COUNT(DISTINCT s.id) AS fastest_superhero_count FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' AND ha.attribute_value = 100;
SELECT SUM(CASE WHEN p.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS DC_count, SUM(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS Marvel_count, SUM(CASE WHEN p.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS difference FROM superhero s JOIN publisher p ON s.publisher_id = p.id;
SELECT a.attribute_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = 'Black Panther' ORDER BY ha.attribute_value ASC LIMIT 1;
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination';
SELECT superhero_name FROM superhero WHERE height_cm = ( SELECT MAX(height_cm) FROM superhero );
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';
SELECT (SUM(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage_of_female_superheroes FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas';
SELECT (CAST(SUM(a.alignment = 'Good') AS FLOAT) / COUNT(*)) * 100.0 AS percentage_good FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN alignment a ON s.alignment_id = a.id WHERE p.publisher_name = 'Marvel Comics';
SELECT COUNT(*) AS total_john_superheroes FROM superhero WHERE full_name LIKE 'John%';
SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute );
SELECT full_name FROM superhero WHERE superhero_name = 'Alien';
SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg < 100 AND colour.colour = 'brown';
SELECT a.attribute_name, ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = 'Aquababy';
SELECT superhero.weight_kg, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;
SELECT AVG(s.height_cm) AS average_height_cm FROM superhero s JOIN alignment a ON s.alignment_id = a.id WHERE a.alignment = 'neutral';
SELECT DISTINCT hp.hero_id FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Intelligence';
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf';
SELECT DISTINCT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.height_cm > ( SELECT AVG(height_cm) * 0.8 FROM superhero );
SELECT d.driverRef FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 18 ORDER BY q.q1 DESC LIMIT 5;
SELECT drivers.surname FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 19 ORDER BY qualifying.q2 ASC LIMIT 1;
SELECT DISTINCT races.year FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.location = 'Shanghai';
SELECT races.url FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Circuit de Barcelona-Catalunya';
SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Germany';
SELECT races.name AS RaceName, circuits.name AS CircuitName, results.position AS Position FROM results JOIN constructors ON results.constructorId = constructors.constructorId JOIN races ON results.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE constructors.name = 'Renault';
SELECT COUNT(*) AS numberOfRaces FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2010 AND circuits.country NOT IN ( -- European Countries 'Austria', 'Belgium', 'Bulgaria', 'Czech Republic', 'Denmark', 'France', 'Germany', 'Hungary', 'Italy', 'Netherlands', 'Poland', 'Portugal', 'Russia', 'Spain', 'Sweden', 'Switzerland', 'United Kingdom', 'Turkey', 'Monaco', -- Asian Countries 'Bahrain', 'China', 'India', 'Japan', 'Malaysia', 'Singapore', 'South Korea', 'United Arab Emirates' );
SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Spain';
SELECT DISTINCT circuits.lat, circuits.lng FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Australian Grand Prix';
SELECT races.raceId, races.year, races.round, races.name AS race_name, races.date, races.time, races.url FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit';
SELECT races.time FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit';
SELECT circuits.lat, circuits.lng FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Abu Dhabi Grand Prix';
SELECT constructors.country FROM results JOIN constructors ON results.constructorId = constructors.constructorId WHERE results.raceId = 24 AND results.points = 1;
SELECT q.q1 FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE d.forename = 'Bruno' AND d.surname = 'Senna' AND q.raceId = 354;
SELECT drivers.nationality FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 355 AND qualifying.q2 = '0:01:40';
SELECT d.number FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 903 AND q.q3 = '0:01:54';
SELECT COUNT(*) AS DidNotFinishCount FROM results WHERE raceId = ( SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007 ) AND (time IS NULL OR time = '');
SELECT s.url FROM races r JOIN seasons s ON r.year = s.year WHERE r.raceId = 901;
SELECT COUNT(*) AS finished_drivers FROM results JOIN races ON results.raceId = races.raceId WHERE races.date = '2015-11-29' AND results.time IS NOT NULL AND results.time != '';
SELECT d.* FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = 592 AND r.time IS NOT NULL AND r.time != '' ORDER BY d.dob ASC LIMIT 1;
SELECT drivers.forename || ' ' || drivers.surname AS driver_name, drivers.url FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE lapTimes.raceId = 161 AND lapTimes.time = '0:01:27';
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 933 AND CAST(r.fastestLapSpeed AS REAL) = ( SELECT MAX(CAST(fastestLapSpeed AS REAL)) FROM results WHERE raceId = 933 );
SELECT circuits.location, circuits.lat, circuits.lng FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Malaysian Grand Prix';
SELECT constructors.url FROM constructorResults JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE constructorResults.raceId = 9 ORDER BY constructorResults.points DESC LIMIT 1;
SELECT q.q1 FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE d.forename = 'Lucas' AND d.surname = 'di Grassi' AND q.raceId = 345;
SELECT d.nationality FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 347 AND q.q2 = '0:01:15';
SELECT drivers.code FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 45 AND qualifying.q3 = '0:01:33';
SELECT results.time FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE drivers.forename = 'Bruce' AND drivers.surname = 'McLaren' AND results.raceId = 743 AND results.time IS NOT NULL;
SELECT d.forename, d.surname FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE r.name = 'San Marino Grand Prix' AND r.year = 2006 AND res.position = 2;
SELECT seasons.* FROM races JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901;
SELECT COUNT(*) AS finished_drivers FROM results JOIN races ON results.raceId = races.raceId JOIN status ON results.statusId = status.statusId WHERE races.date = '2015-11-29' AND status.status = 'Finished';
SELECT d.* FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 872 AND r.time IS NOT NULL ORDER BY d.dob DESC LIMIT 1;
SELECT d.forename || ' ' || d.surname AS full_name FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.raceId = 348 ORDER BY lt.milliseconds ASC LIMIT 1;
SELECT drivers.nationality FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = 348 ORDER BY CAST(results.fastestLapSpeed AS REAL) DESC LIMIT 1;
SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta' ), race_speeds AS ( SELECT raceId, CAST(fastestLapSpeed AS REAL) AS speed FROM results WHERE driverId = (SELECT driverId FROM driver) AND raceId IN (853, 854) ) SELECT ((rs853.speed - rs854.speed) / rs853.speed) * 100 AS percentage_difference FROM race_speeds rs853 JOIN race_speeds rs854 ON rs853.raceId = 853 AND rs854.raceId = 854
SELECT (CAST(COUNT(results.time) AS FLOAT) / COUNT(*)) * 100 AS completion_rate FROM races JOIN results ON races.raceId = results.raceId WHERE races.date = '1983-07-16';
SELECT MIN(year) AS first_year FROM races WHERE name = 'Singapore Grand Prix';
SELECT COUNT(*) AS race_count FROM races WHERE year = 2005;
SELECT raceId, name, date, strftime('%Y', date) AS year, strftime('%m', date) AS month FROM races WHERE date != '0000-00-00'
SELECT name, date FROM races WHERE year = 1999 AND round = ( SELECT MAX(round) FROM races WHERE year = 1999 );
SELECT year, MAX(round) AS num_races FROM races GROUP BY year ORDER BY num_races DESC LIMIT 1;
SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 );
SELECT c.country, c.name AS circuit_name, c.location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.name = 'European Grand Prix' ORDER BY r.year ASC LIMIT 1;
SELECT MAX(races.year) AS LastSeason FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'British Grand Prix' AND circuits.name = 'Brands Hatch';
SELECT COUNT(DISTINCT races.year) AS seasons_hosted FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit' AND races.name = 'British Grand Prix';
SELECT d.forename, d.surname FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.year = 2010 AND ra.name = 'Singapore Grand Prix' ORDER BY r.positionOrder ASC;
SELECT drivers.forename || ' ' || drivers.surname AS full_name, SUM(results.points) AS total_points FROM drivers JOIN results ON drivers.driverId = results.driverId GROUP BY drivers.driverId ORDER BY total_points DESC LIMIT 1;
SELECT drivers.forename || ' ' || drivers.surname AS driver_name, results.points FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE races.year = 2017 AND races.name = 'Chinese Grand Prix' ORDER BY results.points DESC LIMIT 3;
SELECT d.forename || ' ' || d.surname AS Driver, r.name AS Race, lt.time AS BestLapTime FROM lapTimes lt INNER JOIN drivers d ON lt.driverId = d.driverId INNER JOIN races r ON lt.raceId = r.raceId WHERE lt.time = ( SELECT MIN(time) FROM lapTimes ) ;
SELECT AVG(lapTimes.milliseconds) / 1000.0 AS average_lap_time_seconds FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.forename = 'Sebastian' AND drivers.surname = 'Vettel' AND races.year = 2009 AND races.name = 'Chinese Grand Prix';
SELECT (CAST(SUM(CASE WHEN res.position > 1 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage_not_first FROM results res JOIN drivers d ON res.driverId = d.driverId JOIN races r ON res.raceId = r.raceId WHERE d.surname = 'Hamilton' AND r.year >= 2010;
SELECT d.forename || ' ' || d.surname AS name, d.nationality, AVG(r.points) AS average_points FROM drivers d INNER JOIN results r ON d.driverId = r.driverId GROUP BY d.driverId ORDER BY SUM(r.wins) DESC LIMIT 1;
SELECT forename, surname, (2022 - CAST(strftime('%Y', dob) AS INTEGER) + 1) AS age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;
SELECT circuits.circuitId, circuits.name, circuits.location, COUNT(races.raceId) AS race_count FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.circuitId, circuits.name, circuits.location HAVING COUNT(races.raceId) = 4;
SELECT circuits.name AS circuit_name, circuits.location, races.name AS race_name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'USA' AND races.year = 2006;
SELECT races.name AS race_name, circuits.name AS circuit_name, circuits.location FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2005 AND strftime('%m', races.date) = '09';
SELECT races.name AS RaceName, races.year AS RaceYear, results.position AS FinishPosition FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.position < 10;
SELECT COUNT(*) AS MichaelSchumacherWins FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId JOIN circuits c ON ra.circuitId = c.circuitId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher' AND c.name = 'Sepang International Circuit' AND r.points = ( SELECT MAX(points) FROM results WHERE raceId = r.raceId );
SELECT races.name AS race_name, races.year FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND lapTimes.milliseconds = ( SELECT MIN(milliseconds) FROM lapTimes JOIN drivers d ON lapTimes.driverId = d.driverId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher' );
SELECT AVG(r.points) AS average_points FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId JOIN seasons s ON ra.year = s.year WHERE d.forename = 'Eddie' AND d.surname = 'Irvine' AND s.year = 2000;
SELECT r.name AS race_name, res.points FROM drivers d JOIN results res ON d.driverId = res.driverId JOIN races r ON res.raceId = r.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY r.year ASC, r.date ASC LIMIT 1;
SELECT races.name, races.date, circuits.country FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date;
SELECT r.name AS race_name, r.year, c.location, lap_counts.total_laps FROM ( -- Step 1: Get the maximum lap number for each race SELECT raceId, MAX(lap) AS total_laps FROM lapTimes GROUP BY raceId ) AS lap_counts JOIN races r ON lap_counts.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE lap_counts.total_laps = ( -- Step 2: Find the overall maximum laps across all races SELECT MAX(total_laps) FROM ( SELECT raceId, MAX(lap) AS total_laps FROM lapTimes GROUP BY raceId ) AS sub_lap_counts );
SELECT (CAST( (SELECT COUNT(*) FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'European Grand Prix' AND circuits.country = 'Germany' ) AS FLOAT ) / (SELECT COUNT(*) FROM races WHERE races.name = 'European Grand Prix' )) * 100 AS percentage ;
SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';
SELECT name, lat FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1;
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';
SELECT country FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits);
SELECT COUNT(*) AS DriversWithoutCode FROM drivers WHERE code IS NULL;
SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers);
SELECT surname FROM drivers WHERE nationality = 'italian';
SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';
SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';
SELECT circuits.name AS CircuitName FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';
SELECT DISTINCT races.year FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit' ORDER BY races.year;
SELECT circuitId FROM circuits WHERE name = 'Silverstone Circuit';
SELECT races.time FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2010 AND circuits.name = 'Abu Dhabi Circuit';
SELECT COUNT(*) AS NumberOfRaces FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';
SELECT races.date FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Barcelona-Catalunya';
SELECT circuits.url FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;
SELECT MIN(results.fastestLapTime) AS fastest_lap_time FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.fastestLapSpeed = ( SELECT MAX(fastestLapSpeed) FROM results );
SELECT drivers.driverRef FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.positionOrder = 1;
SELECT races.* FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT races.name FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank ASC LIMIT 1;
error:Error code: 400 - {'error': {'message': 'Invalid prompt: your prompt was flagged as potentially violating our usage policy. Please try again with a different prompt: https://platform.openai.com/docs/guides/reasoning/advice-on-prompting (request id: 202501230559075137412251abGfgwQ) (request id: 20250123082907217859372qE4JSw9E)', 'type': 'invalid_request_error', 'param': '', 'code': 'invalid_prompt'}}
SELECT DISTINCT races.year FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT results.positionOrder FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2008 AND races.name = 'Australian Grand Prix';
SELECT d.forename, d.surname FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.grid = 4;
SELECT COUNT(*) AS FinishedDrivers FROM races JOIN results ON races.raceId = results.raceId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.time IS NOT NULL;
SELECT lt.lap, lt.time FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND r.year = 2008 AND r.name = 'Australian Grand Prix' ORDER BY lt.milliseconds ASC LIMIT 1;
SELECT r.time FROM races ra JOIN results r ON ra.raceId = r.raceId WHERE ra.name = 'Australian Grand Prix' AND ra.year = 2008 AND r.positionOrder = 2;
SELECT d.forename || ' ' || d.surname AS champion, d.url FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN seasons s ON ra.year = s.year JOIN drivers d ON r.driverId = d.driverId WHERE s.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.position = 1;
SELECT COUNT(DISTINCT drivers.driverId) AS AmericanDriversCount FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND drivers.nationality = 'American';
SELECT COUNT(DISTINCT r.driverId) AS FinishedDriversCount FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Australian Grand Prix' AND ra.year = 2008 AND r.time IS NOT NULL;
SELECT SUM(r.points) AS total_points FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';
SELECT AVG( CAST(substr(r.fastestLapTime, 1, instr(r.fastestLapTime, ':') - 1) AS REAL) * 60 + CAST(substr(r.fastestLapTime, instr(r.fastestLapTime, ':') + 1) AS REAL) ) AS average_fastest_lap_seconds FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND r.fastestLapTime != '0000-00-00';
SELECT COUNT(DISTINCT completed.driverId) * 1.0 / COUNT(DISTINCT all_drivers.driverId) AS completion_rate FROM results AS all_drivers JOIN lapTimes AS completed ON all_drivers.driverId = completed.driverId AND all_drivers.raceId = completed.raceId WHERE all_drivers.raceId = ( SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix' LIMIT 1 ) GROUP BY all_drivers.raceId HAVING COUNT(completed.time) = (SELECT COUNT(*) FROM lapTimes WHERE raceId = all_drivers.raceId AND driverId = all_drivers.driverId);
SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix' ), champion AS ( SELECT CAST(substr(time, 1, 2) AS INTEGER) * 3600 +
SELECT COUNT(*) AS numberOfCircuits FROM circuits WHERE location = 'Melbourne' AND country = 'Australia';
SELECT lat, lng FROM circuits WHERE country = 'USA';
SELECT COUNT(*) AS BritishDriversBornAfter1980 FROM drivers WHERE nationality = 'British' AND dob > '1980-12-31';
SELECT AVG(cs.points) AS average_points FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE c.nationality = 'British';
SELECT constructors.name, SUM(constructorStandings.points) AS total_points FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId GROUP BY constructors.constructorId ORDER BY total_points DESC LIMIT 1;
SELECT constructors.name FROM constructors INNER JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId WHERE constructorResults.raceId = 291 AND constructorResults.points = 0;
SELECT COUNT(*) FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE c.nationality = 'Japanese' AND cr.points = 0 GROUP BY c.constructorId HAVING COUNT(cr.raceId) = 2;
SELECT DISTINCT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.position = 1;
SELECT COUNT(DISTINCT c.constructorId) AS FrenchConstructorsOver50Laps FROM constructors c JOIN results r ON c.constructorId = r.constructorId JOIN lapTimes lt ON r.raceId = lt.raceId AND r.driverId = lt.driverId WHERE c.nationality = 'French' AND lt.lap > 50;
SELECT (COUNT(results.time) * 100.0 / COUNT(*)) AS completion_percentage FROM results JOIN races ON results.raceId = races.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.nationality = 'Japanese' AND races.year BETWEEN 2007 AND 2009;

SELECT drivers.forename, drivers.surname FROM drivers JOIN driverStandings ON drivers.driverId = driverStandings.driverId WHERE CAST(strftime('%Y', drivers.dob) AS INTEGER) > 1975 AND driverStandings.position = 2;
SELECT COUNT(*) AS ItalianDriversDidNotFinish FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.nationality = 'Italian' AND r.time IS NULL;
SELECT drivers.forename, drivers.surname FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE lapTimes.milliseconds = ( SELECT MIN(milliseconds) FROM lapTimes );
SELECT lt.lap FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId WHERE r.year = 2009 AND lt.driverId = ( SELECT rs.driverId FROM results rs JOIN races r2 ON rs.raceId = r2.raceId WHERE r2.year = 2009 GROUP BY rs.driverId ORDER BY SUM(rs.points) DESC LIMIT 1 ) ORDER BY lt.milliseconds ASC LIMIT 1;
SELECT AVG(CAST(r.fastestLapSpeed AS REAL)) AS average_fastest_lap_speed FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Spanish Grand Prix' AND ra.year = 2009;
SELECT r.name, r.year FROM races r JOIN results res ON r.raceId = res.raceId WHERE res.milliseconds = ( SELECT MIN(milliseconds) FROM results WHERE milliseconds IS NOT NULL ) LIMIT 1;
SELECT d.driverId, CAST(substr(d.dob, 1, 4) AS INTEGER) AS birth_year, SUM(r.laps) AS total_laps FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.year BETWEEN 2000 AND 2005 GROUP BY d.driverId ), qualified_drivers AS ( SELECT driverId FROM driver_activity WHERE birth_year < 1985 AND total_laps > 50 ) SELECT (COUNT(q.driverId) * 100.0) / COUNT(da.driverId) AS percentage FROM driver_activity da LEFT JOIN qualified_drivers q ON da.driverId = q.driverId WHERE da.birth_year < 1985 AND da.total_laps > 50
SELECT COUNT(DISTINCT drivers.driverId) AS FrenchFastDrivers FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.nationality = 'French' AND lapTimes.milliseconds < 120000;
SELECT code FROM drivers WHERE nationality = 'America';
SELECT raceId FROM races WHERE year = 2009;
SELECT COUNT(DISTINCT driverId) AS driver_count FROM results WHERE raceId = 18;
SELECT code, nationality FROM drivers ORDER BY dob DESC LIMIT 3 ) SELECT GROUP_CONCAT(code) AS Top3Codes, COUNT(*) AS TotalTop3, SUM(CASE WHEN nationality IN ('Dutch', 'Netherlandic') THEN 1 ELSE 0 END) AS NetherlandicDrivers FROM Top3Youngest
SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';
SELECT COUNT(*) FROM drivers WHERE nationality = 'Australian' AND strftime('%Y', dob) = '1980';
SELECT d.driverId, d.forename, d.surname, MIN(lt.milliseconds) AS earliest_lap_time FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'German' AND strftime('%Y', d.dob) BETWEEN '1980' AND '1990' GROUP BY d.driverId ORDER BY earliest_lap_time ASC LIMIT 3;
SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1;
SELECT DISTINCT d.driverId, d.code FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE strftime('%Y', d.dob) = '1971' AND r.fastestLapTime IS NOT NULL;
SELECT d.forename, d.surname, MAX(lt.time) AS latest_lap_time FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'Spanish' AND strftime('%Y', d.dob) < '1982' GROUP BY d.driverId ORDER BY latest_lap_time DESC LIMIT 10;
SELECT r.year FROM results res JOIN races r ON res.raceId = r.raceId ORDER BY res.milliseconds ASC LIMIT 1;
SELECT races.year, MAX(lapTimes.time) AS max_lap_time FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId GROUP BY races.year ORDER BY max_lap_time DESC LIMIT 1;
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY milliseconds ASC LIMIT 5;
SELECT COUNT(*) AS disqualified_finishers FROM results WHERE raceId > 50 AND raceId < 100 AND statusId = 2 AND time IS NOT NULL;
SELECT COUNT(races.raceId) AS NumberOfRaces, circuits.location, circuits.lat, circuits.lng FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Austria' GROUP BY circuits.circuitId, circuits.location, circuits.lat, circuits.lng;
SELECT races.round AS race_number, COUNT(results.resultId) AS finisher_count FROM results JOIN races ON results.raceId = races.raceId WHERE results.time IS NOT NULL GROUP BY races.round ORDER BY finisher_count DESC LIMIT 1;
SELECT d.driverRef, d.nationality, d.dob FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 23 AND q.q2 IS NOT NULL;
SELECT s.year, r.name, r.date, r.time FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId JOIN seasons s ON r.year = s.year WHERE d.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY r.date ASC LIMIT 1;
SELECT COUNT(*) AS disqualified_american_drivers FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.nationality = 'American' AND results.statusId = 2;
SELECT constructors.name, SUM(constructorStandings.points) AS total_points, constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructors.nationality = 'Italian' GROUP BY constructors.constructorId ORDER BY total_points DESC LIMIT 1;
SELECT c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId GROUP BY c.constructorId, c.url ORDER BY SUM(cs.wins) DESC LIMIT 1;
SELECT d.forename || ' ' || d.surname AS driver_name FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId JOIN drivers d ON lt.driverId = d.driverId WHERE r.name = 'French Grand Prix' AND lt.lap = 3 ORDER BY lt.time DESC LIMIT 1;
SELECT races.name AS RaceName, lapTimes.milliseconds AS FastestFirstLapTime FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId WHERE lapTimes.lap = 1 ORDER BY lapTimes.milliseconds ASC LIMIT 1;
SELECT AVG(lt.milliseconds) / 1000.0 AS avg_fastest_lap_time_seconds FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN lapTimes lt ON lt.raceId = r.raceId AND lt.driverId = r.driverId WHERE ra.year = 2006 AND ra.name = 'United States Grand Prix' AND r.position < 11 AND lt.lap = r.fastestLap;
SELECT d.forename || ' ' || d.surname AS driver_name, AVG(ps.milliseconds) AS average_pit_stop_duration_ms FROM drivers d JOIN pitStops ps ON d.driverId = ps.driverId WHERE d.nationality = 'German' AND CAST(strftime('%Y', d.dob) AS INTEGER) > 1980 AND CAST(strftime('%Y', d.dob) AS INTEGER) < 1985 GROUP BY d.driverId ORDER BY average_pit_stop_duration_ms ASC LIMIT 5;
SELECT drivers.forename || ' ' || drivers.surname AS Champion, results.time AS FinishTime FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE races.name = 'Canadian Grand Prix' AND races.year = 2008 AND results.position = 1;
SELECT constructors.constructorRef, constructors.url FROM races JOIN results ON races.raceId = results.raceId JOIN constructors ON results.constructorId = constructors.constructorId WHERE races.year = 2009 AND races.name = 'Singapore Grand Prix' AND results.position = 1;
SELECT forename || ' ' || surname AS full_name, dob FROM drivers WHERE nationality = 'Austrian' AND strftime('%Y', dob) BETWEEN '1981' AND '1991';
SELECT forename || ' ' || surname AS full_name, url AS wiki_page, dob FROM drivers WHERE nationality = 'German' AND CAST(substr(dob, 1, 4) AS INTEGER) BETWEEN 1971 AND 1985 ORDER BY dob DESC;
SELECT location, country, lat AS latitude, lng AS longitude FROM circuits WHERE name = 'Hungaroring';
SELECT c.name AS ConstructorName, c.nationality AS ConstructorNationality, SUM(rst.points) AS TotalPoints FROM races r JOIN results rst ON r.raceId = rst.raceId JOIN constructors c ON rst.constructorId = c.constructorId WHERE r.name = 'Monaco Grand Prix' AND r.year BETWEEN 1980 AND 2010 GROUP BY c.constructorId ORDER BY TotalPoints DESC LIMIT 1;
SELECT AVG(r.points) AS average_score FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND ra.name = 'Turkish Grand Prix';
SELECT AVG(races_per_year) AS average_races_per_year FROM ( SELECT year, COUNT(*) AS races_per_year FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY year ) AS yearly_races;
SELECT nationality, COUNT(*) AS count FROM drivers GROUP BY nationality ORDER BY count DESC LIMIT 1;
SELECT SUM(r.wins) AS victories FROM results r GROUP BY r.driverId ORDER BY SUM(r.points) DESC LIMIT 1 OFFSET 90;
SELECT races.name FROM results JOIN races ON results.raceId = races.raceId ORDER BY results.fastestLapTime ASC LIMIT 1;
SELECT circuits.location || ', ' || circuits.country AS full_location FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.date = (SELECT MAX(date) FROM races);
SELECT drivers.forename || ' ' || drivers.surname AS full_name FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId JOIN races ON qualifying.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2008 AND circuits.name = 'Marina Bay Street Circuit' AND qualifying.q3 = ( SELECT MIN(q3) FROM qualifying q WHERE q.raceId = races.raceId );
SELECT d.forename || ' ' || d.surname AS full_name, d.nationality, r.name AS first_race FROM drivers d JOIN results res ON d.driverId = res.driverId JOIN races r ON res.raceId = r.raceId WHERE d.dob = (SELECT MAX(dob) FROM drivers) ORDER BY r.date ASC LIMIT 1;
SELECT MAX(accident_count) AS accidents FROM ( SELECT driverId, COUNT(*) AS accident_count FROM results WHERE raceId = ( SELECT raceId FROM races WHERE name = 'Canadian Grand Prix' ) AND statusId = 3 GROUP BY driverId ) AS driver_accidents;
SELECT drivers.forename || ' ' || drivers.surname AS full_name, COUNT(results.resultId) AS wins FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE drivers.dob = (SELECT MIN(dob) FROM drivers) AND results.position = 1 GROUP BY drivers.driverId;
SELECT d.forename || ' ' || d.surname AS driver_name, r.name AS race_name, ps.lap, ps.time, ps.duration, ps.milliseconds FROM pitStops ps JOIN drivers d ON ps.driverId = d.driverId JOIN races r ON ps.raceId = r.raceId ORDER BY ps.milliseconds DESC LIMIT 1;
SELECT time FROM lapTimes ORDER BY milliseconds ASC LIMIT 1;
SELECT MAX(pitStops.milliseconds) AS longest_pit_stop_time FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT pitStops.lap FROM pitStops JOIN races ON pitStops.raceId = races.raceId JOIN drivers ON pitStops.driverId = drivers.driverId WHERE races.year = 2011 AND races.name = 'Australian Grand Prix' AND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT d.forename || ' ' || d.surname AS driver_name, SUM(ps.milliseconds) AS total_pit_stop_time_ms FROM races r JOIN pitStops ps ON r.raceId = ps.raceId JOIN drivers d ON ps.driverId = d.driverId WHERE r.year = 2011 AND r.name = 'Australian Grand Prix' GROUP BY d.driverId ORDER BY driver_name;
SELECT lt.time FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY lt.milliseconds ASC LIMIT 1;
SELECT drivers.forename || ' ' || drivers.surname AS full_name FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.milliseconds = ( SELECT MIN(milliseconds) FROM lapTimes ) LIMIT 1;
SELECT lt.position FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY lt.milliseconds ASC LIMIT 1;
SELECT MIN(lapTimes.milliseconds) AS lap_record FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Austrian Grand Prix Circuit';
SELECT c.name AS circuit_name, r.name AS race_name, d.forename || ' ' || d.surname AS driver_name, lt.lap, lt.time AS lap_time FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN lapTimes lt ON r.raceId = lt.raceId JOIN drivers d ON lt.driverId = d.driverId WHERE c.country = 'Italy' AND lt.milliseconds = ( SELECT MIN(lt2.milliseconds) FROM lapTimes lt2 JOIN races r2 ON lt2.raceId = r2.raceId WHERE r2.circuitId = c.circuitId ) ORDER BY c.name;
SELECT races.* FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE circuits.name = 'Austrian Grand Prix Circuit' ORDER BY lapTimes.milliseconds ASC LIMIT 1;
SELECT d.forename || ' ' || d.surname AS driver_name, SUM(ps.milliseconds) AS total_pit_stop_duration_ms FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN lapTimes lt ON r.raceId = lt.raceId JOIN drivers d ON lt.driverId = d.driverId JOIN pitStops ps ON r.raceId = ps.raceId AND d.driverId = ps.driverId WHERE c.name = 'Austrian Grand Prix Circuit' AND lt.milliseconds = ( SELECT MIN(lt2.milliseconds) FROM lapTimes lt2 WHERE lt2.raceId = r.raceId ) GROUP BY d.driverId;
SELECT c.lat, c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN lapTimes lt ON r.raceId = lt.raceId GROUP BY c.circuitId HAVING MIN(lt.milliseconds) = 89488;
SELECT AVG(pitStops.milliseconds) AS average_pit_stop_time_ms FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT AVG(lt.milliseconds) AS average_lap_time_milliseconds FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Italy';
SELECT player_api_id FROM Player_Attributes WHERE overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes );
SELECT player_name, height FROM Player WHERE height = (SELECT MAX(height) FROM Player);
SELECT preferred_foot FROM Player_Attributes WHERE potential = ( SELECT MIN(potential) FROM Player_Attributes );
SELECT COUNT(DISTINCT player_api_id) AS attack_focused_players FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low';
SELECT player_api_id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5;
SELECT League.name, SUM(Match.home_team_goal + Match.away_team_goal) AS total_goals FROM Match JOIN League ON Match.league_id = League.id WHERE Match.season = '2015/2016' GROUP BY League.id, League.name ORDER BY total_goals DESC LIMIT 1;
SELECT Team.team_long_name, COUNT(*) AS loss_count FROM Match JOIN Team ON Match.home_team_api_id = Team.team_api_id WHERE Match.season = '2015/2016' AND (Match.home_team_goal < Match.away_team_goal) GROUP BY Match.home_team_api_id ORDER BY loss_count ASC LIMIT 1;
SELECT Player.player_name, SUM(Player_Attributes.penalties) AS total_penalties FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id GROUP BY Player.player_api_id ORDER BY total_penalties DESC LIMIT 10;
SELECT Team.team_long_name, COUNT(*) AS away_wins FROM Match JOIN League ON Match.league_id = League.id JOIN Team ON Match.away_team_api_id = Team.team_api_id WHERE League.name = 'Scotland Premier League' AND Match.season = '2009/2010' AND Match.away_team_goal > Match.home_team_goal GROUP BY Match.away_team_api_id ORDER BY away_wins DESC LIMIT 1;
SELECT Team.team_long_name, Team_Attributes.buildUpPlaySpeed FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id ORDER BY Team_Attributes.buildUpPlaySpeed DESC LIMIT 4;
SELECT League.name, COUNT(*) AS draw_count FROM Match JOIN League ON Match.league_id = League.id WHERE Match.season = '2015/2016' AND Match.home_team_goal = Match.away_team_goal GROUP BY League.name ORDER BY draw_count DESC LIMIT 1;
SELECT Player.player_name, (strftime('%Y', 'now') - strftime('%Y', Player.birthday)) - (strftime('%m-%d', 'now') < strftime('%m-%d', Player.birthday)) AS age FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.sprint_speed >= 97 AND Player_Attributes.date >= '2013-01-01 00:00:00' AND Player_Attributes.date <= '2015-12-31 00:00:00';
SELECT League.name AS league_name, COUNT(Match.id) AS total_matches FROM Match JOIN League ON Match.league_id = League.id GROUP BY League.id ORDER BY total_matches DESC LIMIT 1;
SELECT AVG(height) AS average_height FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';
SELECT player_api_id FROM Player_Attributes WHERE substr(date, 1, 4) = '2010' AND overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes WHERE substr(date, 1, 4) = '2010' );
SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59;
SELECT Team.team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE strftime('%Y', Team_Attributes.date) = '2012' AND Team_Attributes.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL );
SELECT (CAST(SUM(CASE WHEN pa.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage_left_foot FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.birthday BETWEEN '1987-01-01' AND '1992-12-31';
SELECT League.name, SUM(Match.home_team_goal + Match.away_team_goal) AS total_goals FROM Match JOIN League ON Match.league_id = League.id GROUP BY League.id, League.name ORDER BY total_goals ASC LIMIT 5;
SELECT AVG(pa.long_shots) AS average_long_shots FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Ahmed Samir Farag';
SELECT Player.player_name, AVG(Player_Attributes.heading_accuracy) AS avg_heading_accuracy FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height > 180 GROUP BY Player.player_api_id ORDER BY avg_heading_accuracy DESC LIMIT 10;
SELECT Team.team_long_name, AVG(Team_Attributes.chanceCreationPassing) AS avg_chanceCreationPassing FROM Team JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE Team_Attributes.buildUpPlayDribblingClass = 'Normal' AND Team_Attributes.date >= '2014-01-01 00:00:00' AND Team_Attributes.date <= '2014-01-31 00:00:00' GROUP BY Team.team_long_name HAVING AVG(Team_Attributes.chanceCreationPassing) < ( SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE buildUpPlayDribblingClass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00' ) ORDER BY avg_chanceCreationPassing DESC;
SELECT League.name FROM Match JOIN League ON Match.league_id = League.id WHERE Match.season = '2009/2010' GROUP BY League.id, League.name HAVING AVG(Match.home_team_goal) > AVG(Match.away_team_goal);
SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';
SELECT * FROM Player WHERE substr(birthday, 1, 4) = '1970' AND substr(birthday, 6, 2) = '10';
SELECT pa.attacking_work_rate FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Franco Zennaro' ORDER BY pa.date DESC LIMIT 1;
SELECT Team_Attributes.buildUpPlayPositioningClass AS freedom_of_movement FROM Team JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE Team.team_long_name = 'ADO Den Haag';
SELECT pa.heading_accuracy FROM Player p JOIN Player_Attributes pa ON p.player_fifa_api_id = pa.player_fifa_api_id WHERE p.player_name = 'Francois Affolter' AND pa.date = '2014-09-18 00:00:00';
SELECT pa.overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Gabriel Tamas' AND strftime('%Y', pa.date) = '2011';
SELECT COUNT(*) AS match_count FROM "Match" JOIN "League" ON "Match".league_id = "League".id WHERE "League".name = 'Scotland Premier League' AND "Match".season = '2015/2016';
SELECT pa.preferred_foot FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id ORDER BY p.birthday DESC LIMIT 1;
SELECT DISTINCT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.potential = ( SELECT MAX(potential) FROM Player_Attributes );
SELECT COUNT(*) AS left_pref_foot_under_130 FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.weight < 130 AND pa.preferred_foot = 'left';
SELECT Team.team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.chanceCreationPassingClass = 'Risky';
SELECT PA.defensive_work_rate FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'David Wilson';
SELECT p.birthday FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes );
SELECT League.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Netherlands';
SELECT AVG(Match.home_team_goal) AS average_home_goals FROM Match JOIN Country ON Match.country_id = Country.id WHERE Country.name = 'Poland' AND Match.season = '2010/2011';
SELECT p.player_api_id, p.player_name, AVG(pa.finishing) AS avg_finishing FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.height = (SELECT MAX(height) FROM Player) GROUP BY p.player_api_id, p.player_name ), Shortest_Player AS ( SELECT p.player_api_id, p.player_name, AVG(pa.finishing) AS avg_finishing FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.height = (SELECT MIN(height) FROM Player) GROUP BY p.player_api_id, p.player_name ) SELECT player_name FROM ( SELECT * FROM Tallest_Player UNION ALL SELECT * FROM Shortest_Player ) ORDER BY avg_finishing DESC LIMIT 1
SELECT player_name FROM Player WHERE height > 180;
SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam %' AND weight > 170;
SELECT DISTINCT Player.player_name FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE Player_Attributes.overall_rating > 80 AND strftime('%Y', Player_Attributes.date) BETWEEN '2008' AND '2010';
SELECT pa.potential FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id OR p.player_fifa_api_id = pa.player_fifa_api_id WHERE p.player_name = 'Aaron Doran' ORDER BY pa.date DESC LIMIT 1;
SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.preferred_foot = 'left';
SELECT Team.team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeedClass = 'Fast';
SELECT Team_Attributes.buildUpPlayPassingClass FROM Team JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE Team.team_short_name = 'CLB';
SELECT Team.team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id OR Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE Team_Attributes.buildUpPlayPassing > 70;
SELECT AVG(pa.overall_rating) AS average_overall_rating FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE strftime('%Y', pa.date) BETWEEN '2010' AND '2015' AND p.height > 170;
SELECT player_name, height FROM Player WHERE height = (SELECT MIN(height) FROM Player);
SELECT Country.name FROM League JOIN Country ON League.country_id = Country.id WHERE League.name = 'Italy Serie A';
SELECT Team.team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeed = 31 AND Team_Attributes.buildUpPlayDribbling = 53 AND Team_Attributes.buildUpPlayPassing = 32;
SELECT AVG(pa.overall_rating) AS average_overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Aaron Doran';
SELECT COUNT(*) AS match_count FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', Match.date) BETWEEN '2008-08' AND '2008-10';
SELECT DISTINCT Team.team_short_name FROM Team JOIN Match ON Team.team_api_id = Match.home_team_api_id WHERE Match.home_team_goal = 10;
SELECT p.player_name, pa.balance, pa.potential FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.potential = 61 AND pa.balance = ( SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61 );
SELECT (SELECT AVG(pa.ball_control) FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Abdou Diallo') - (SELECT AVG(pa.ball_control) FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Aaron Appindangoye') AS difference_of_average_ball_control;
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';
SELECT player_name, birthday FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1;
error:Error code: 400 - {'error': {'message': 'Invalid prompt: your prompt was flagged as potentially violating our usage policy. Please try again with a different prompt: https://platform.openai.com/docs/guides/reasoning/advice-on-prompting (request id: 20250123072104328245344E4z7IIIq) (request id: 20250123095104197252733TSohSGyx)', 'type': 'invalid_request_error', 'param': '', 'code': 'invalid_prompt'}}
SELECT COUNT(*) AS num_players FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';
SELECT Country.name FROM League JOIN Country ON League.country_id = Country.id WHERE League.name = 'Belgium Jupiler League';
SELECT League.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Germany';
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 1;
SELECT COUNT(DISTINCT Player.id) AS high_defensive_players_before_1986 FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE strftime('%Y', Player.birthday) < '1986' AND Player_Attributes.defensive_work_rate = 'high';
SELECT p.player_name, pa.crossing FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY pa.crossing DESC LIMIT 1;
SELECT pa.heading_accuracy FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Ariel Borysiuk';
SELECT COUNT(DISTINCT Player.id) AS QualifiedPlayerCount FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height > 180 AND Player_Attributes.volleys > 70;
SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.volleys > 70 AND Player_Attributes.dribbling > 70;
SELECT COUNT(*) FROM Match JOIN Country ON Match.country_id = Country.id WHERE Match.season = '2008/2009' AND Country.name = 'Belgium';
SELECT PA.long_passing FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id ORDER BY P.birthday ASC LIMIT 1;
SELECT COUNT(*) AS match_count FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Belgium Jupiler League' AND strftime('%Y', Match.date) = '2009' AND strftime('%m', Match.date) = '04';
SELECT League.name, COUNT(*) AS match_count FROM Match JOIN League ON Match.league_id = League.id WHERE Match.season = '2008/2009' GROUP BY League.id ORDER BY match_count DESC LIMIT 1;
SELECT CAST(SUM(pa.overall_rating) AS REAL) / COUNT(pa.id) AS average_overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE strftime('%Y', p.birthday) < '1986';
SELECT ((ariel.overall_rating - paulin.overall_rating) / CAST(paulin.overall_rating AS REAL)) * 100 AS percentage_higher FROM (SELECT pa.overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Ariel Borysiuk' ORDER BY pa.date DESC LIMIT 1) AS ariel, (SELECT pa.overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Paulin Puel' ORDER BY pa.date DESC LIMIT 1) AS paulin;
SELECT AVG(ta.buildUpPlaySpeed) AS average_build_up_play_speed FROM Team t JOIN Team_Attributes ta ON t.team_fifa_api_id = ta.team_fifa_api_id WHERE t.team_long_name = 'Heart of Midlothian';
SELECT AVG(pa.overall_rating) AS average_overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Pietro Marino';
SELECT SUM(pa.crossing) AS total_crossing_score FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Aaron Lennox';
SELECT ta.chanceCreationPassing AS Highest_Chance_Creation_Passing_Score, ta.chanceCreationPassingClass AS Classification FROM Team_Attributes ta JOIN Team t ON ta.team_fifa_api_id = t.team_fifa_api_id WHERE t.team_long_name = 'Ajax' ORDER BY ta.chanceCreationPassing DESC LIMIT 1;
SELECT pa.preferred_foot FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Abdou Diallo';
SELECT MAX(pa.overall_rating) AS highest_overall_rating FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Dorlan Pabon';
SELECT AVG(Match.away_team_goal) AS average_away_goals FROM Match JOIN Team ON Match.away_team_api_id = Team.team_api_id JOIN League ON Match.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Team.team_long_name = 'Parma' AND Country.name = 'Italy';
SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating = 77 AND Player_Attributes.date = '2016/6/23' ORDER BY Player.birthday ASC LIMIT 1;
SELECT pa.overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Aaron Mooy' AND pa.date = '2016-02-04 00:00:00';
SELECT PA.potential FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Francesco Parravicini' AND PA.date = '2010-08-30 00:00:00';
SELECT PA.attacking_work_rate FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Francesco Migliore' AND PA.date = '2015-05-01 00:00:00';
SELECT PA.defensive_work_rate FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Kevin Berigaud' AND PA.date = '2013-02-22 00:00:00';
SELECT date FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant' ) AND crossing = ( SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant' ) ) ORDER BY date ASC LIMIT 1;
SELECT Team_Attributes.buildUpPlaySpeedClass FROM Team JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE Team.team_long_name = 'Willem II' AND Team_Attributes.date = '2012-02-22 00:00:00';
SELECT Team_Attributes.buildUpPlayDribblingClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE Team.team_short_name = 'LEI' AND Team_Attributes.date = '2015-09-10 00:00:00';
SELECT ta.buildUpPlayPassingClass FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE t.team_long_name = 'FC Lorient' AND ta.date = '2010-02-22';
SELECT Team_Attributes.chanceCreationPassingClass FROM Team JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE Team.team_long_name = 'PEC Zwolle' AND Team_Attributes.date = '2013-09-20 00:00:00';
SELECT ta.chanceCreationCrossingClass FROM Team t JOIN Team_Attributes ta ON t.team_fifa_api_id = ta.team_fifa_api_id WHERE t.team_long_name = 'Hull City' AND ta.date = '2010-02-22 00:00:00';
SELECT ta.defenceAggressionClass FROM Team t JOIN Team_Attributes ta ON t.team_fifa_api_id = ta.team_fifa_api_id WHERE t.team_long_name = 'Hannover 96' AND ta.date = '2015-09-10 00:00:00';
SELECT AVG(pa.overall_rating) AS average_overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Marko Arnautovic' AND pa.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00';
SELECT ((ld.overall_rating - jb.overall_rating) / ld.overall_rating) * 100 AS percentage FROM Player_Attributes ld JOIN Player p_ld ON ld.player_api_id = p_ld.player_api_id AND ld.player_fifa_api_id = p_ld.player_fifa_api_id JOIN Player_Attributes jb ON ld.date = jb.date JOIN Player p_jb ON jb.player_api_id = p_jb.player_api_id AND jb.player_fifa_api_id = p_jb.player_fifa_api_id WHERE p_ld.player_name = 'Landon Donovan' AND p_jb.player_name = 'Jordan Bowery' AND ld.date = '2013/7/12';
SELECT player_name FROM Player ORDER BY height DESC LIMIT 5;
SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10;
SELECT player_name FROM Player WHERE (strftime('%Y', 'now') - strftime('%Y', birthday)) - (strftime('%m-%d', 'now') < strftime('%m-%d', birthday)) >= 35;
SELECT COUNT(*) AS goals_scored FROM Match m JOIN Player p ON p.player_name = 'Aaron Lennon' WHERE ( m.home_player_1 = p.player_api_id OR m.home_player_2 = p.player_api_id OR m.home_player_3 = p.player_api_id OR m.home_player_4 = p.player_api_id OR m.home_player_5 = p.player_api_id OR m.home_player_6 = p.player_api_id OR m.home_player_7 = p.player_api_id OR m.home_player_8 = p.player_api_id OR m.home_player_9 = p.player_api_id OR m.home_player_10 = p.player_api_id OR m.home_player_11 = p.player_api_id ) AND m.goal LIKE '%' || p.player_name || '%';
SELECT SUM(m.away_team_goal) AS total_away_goals FROM Match m JOIN Player p ON p.player_api_id IN ( m.away_player_1, m.away_player_2, m.away_player_3, m.away_player_4, m.away_player_5, m.away_player_6, m.away_player_7, m.away_player_8, m.away_player_9, m.away_player_10, m.away_player_11 ) WHERE p.player_name IN ('Daan Smith', 'Filipe Ferreira');
SELECT SUM(M.home_team_goal) AS total_home_goals FROM "Match" M WHERE EXISTS ( SELECT 1 FROM "Player" P WHERE P.player_api_id IN ( M.home_player_1, M.home_player_2, M.home_player_3, M.home_player_4, M.home_player_5, M.home_player_6, M.home_player_7, M.home_player_8, M.home_player_9, M.home_player_10, M.home_player_11 ) AND CAST((strftime('%Y', 'now') - strftime('%Y', P.birthday)) AS INTEGER) <= 30 );
SELECT Player.player_name, MAX(Player_Attributes.overall_rating) AS max_overall_rating FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id GROUP BY Player.player_api_id ORDER BY max_overall_rating DESC LIMIT 10;
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.potential = ( SELECT MAX(potential) FROM Player_Attributes );
SELECT DISTINCT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.attacking_work_rate = 'high';
SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.finishing = 1 ORDER BY DATE(Player.birthday) ASC LIMIT 1;
SELECT Player.player_name FROM Player JOIN Country ON Player.country_id = Country.id WHERE Country.name = 'Belgium';
SELECT Player.player_name, Country.name AS country_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id INNER JOIN Country ON Player.country_id = Country.id WHERE Player_Attributes.vision > 89;
SELECT Country.name, AVG(Player.weight) AS avg_weight FROM Player JOIN Country ON Player.country_id = Country.id GROUP BY Country.name ORDER BY avg_weight DESC LIMIT 1;
SELECT Team.team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeedClass = 'Slow';
SELECT DISTINCT Team.team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.chanceCreationPassingClass = 'Safe';
SELECT AVG(Player.height) AS average_height FROM Player JOIN Match ON ( Player.player_api_id = Match.home_player_X1 OR Player.player_api_id = Match.home_player_X2 OR Player.player_api_id = Match.home_player_X3 OR Player.player_api_id = Match.home_player_X4 OR Player.player_api_id = Match.home_player_X5 OR Player.player_api_id = Match.home_player_X6 OR Player.player_api_id = Match.home_player_X7 OR Player.player_api_id = Match.home_player_X8 OR Player.player_api_id = Match.home_player_X9 OR Player.player_api_id = Match.home_player_X10 OR Player.player_api_id = Match.home_player_X11 OR Player.player_api_id = Match.away_player_X1 OR Player.player_api_id = Match.away_player_X2 OR Player.player_api_id = Match.away_player_X3 OR Player.player_api_id = Match.away_player_X4 OR Player.player_api_id = Match.away_player_X5 OR Player.player_api_id = Match.away_player_X6 OR Player.player_api_id = Match.away_player_X7 OR Player.player_api_id = Match.away_player_X8 OR Player.player_api_id = Match.away_player_X9 OR Player.player_api_id = Match.away_player_X10 OR Player.player_api_id = Match.away_player_X11 ) JOIN League ON Match.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Italy';
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;
SELECT COUNT(*) AS Aaron_Count FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990';
SELECT pa1.jumping - pa2.jumping AS jumping_difference FROM Player_Attributes pa1 JOIN Player p1 ON pa1.player_api_id = p1.player_api_id JOIN Player_Attributes pa2 ON pa2.player_api_id = (SELECT player_api_id FROM Player WHERE id = 23) WHERE p1.id = 6 LIMIT 1;
SELECT player_api_id FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes) AND preferred_foot = 'right' LIMIT 3;
SELECT COUNT(DISTINCT player_api_id) AS number_of_players FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left';
SELECT (SELECT COUNT(DISTINCT player_api_id) FROM Player_Attributes WHERE strength > 80 AND stamina > 80) * 100.0 / (SELECT COUNT(*) FROM Player) AS percentage_of_strong_and_stamina_players;
SELECT Country.name FROM League JOIN Country ON League.country_id = Country.id WHERE League.name = 'Ekstraklasa';
SELECT M.home_team_goal, M.away_team_goal FROM "Match" M JOIN "League" L ON M.league_id = L.id WHERE L.name = 'Belgian Jupiler League' AND M.date LIKE '2008-09-24%';
SELECT pa.sprint_speed, pa.agility, pa.acceleration FROM Player p JOIN Player_Attributes pa ON p.player_fifa_api_id = pa.player_fifa_api_id WHERE p.player_name = 'Alexis Blin';
SELECT ta.buildUpPlaySpeedClass FROM Team t JOIN Team_Attributes ta ON t.team_fifa_api_id = ta.team_fifa_api_id WHERE t.team_long_name = 'KSV Cercle Brugge';
SELECT COUNT(*) AS total_games FROM "Match" JOIN "League" ON "Match".league_id = "League".id WHERE "League".name = 'Italian Serie A' AND "Match".season = '2015/2016';
SELECT MAX(M.home_team_goal) AS highest_home_score FROM Match M JOIN League L ON M.league_id = L.id JOIN Country C ON M.country_id = C.id WHERE L.name = 'Eredivisie' AND C.name = 'Netherlands';
SELECT pa.finishing, pa.curve FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.weight = (SELECT MAX(weight) FROM Player);
SELECT League.name AS league_name, COUNT(Match.id) AS total_games FROM Match JOIN League ON Match.league_id = League.id WHERE Match.season = '2015/2016' GROUP BY League.name ORDER BY total_games DESC LIMIT 1;
SELECT Team.team_long_name FROM Match JOIN Team ON Match.away_team_api_id = Team.team_api_id WHERE Match.away_team_goal = ( SELECT MAX(away_team_goal) FROM Match );
SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 1;
SELECT (CAST(COUNT(DISTINCT P.id) AS FLOAT) / (SELECT COUNT(*) FROM Player)) * 100 AS percentage FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.height < 180 AND PA.overall_rating > 70;
SELECT in_patients.count AS in_patient_males, out_patients.count AS out_patient_males, ROUND( (ABS(in_patients.count - out_patients.count) * 100.0) / (CASE WHEN in_patients.count > out_patients.count THEN in_patients.count ELSE out_patients.count END), 2 ) AS deviation_percentage, CASE WHEN in_patients.count > out_patients.count THEN 'More in-patients' ELSE 'More outpatients' END AS more_group FROM (SELECT COUNT(*) AS count FROM Patient WHERE SEX = 'M' AND Admission = '+') AS in_patients, (SELECT COUNT(*) AS count FROM Patient WHERE SEX = 'M' AND Admission = '-') AS out_patients;
SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')) AS Percentage FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) > '1930';
SELECT (CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS inpatient_percentage FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31';
SELECT CAST(SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END), 0) AS outpatient_to_inpatient_ratio FROM Patient WHERE Diagnosis = 'SLE';
SELECT Patient.Diagnosis AS Disease, Laboratory.Date AS Laboratory_Test_Date FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.ID = 30609;
SELECT Patient.SEX, Patient.Birthday, Examination.`Examination Date`, Examination.Symptoms FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = 163109;
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH > 500;
SELECT Patient.ID, CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', Patient.Birthday) AS INTEGER) AS age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RVVT = '+';
SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 2;
SELECT DISTINCT Patient.* FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE strftime('%Y', Patient.Birthday) = '1937' AND Laboratory.`T-CHO` >= 250;
SELECT DISTINCT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALB < 3.5;
SELECT ROUND( (COUNT(DISTINCT l.ID) * 100.0) / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F'), 2 ) AS Percentage_Female_TP_Abnormal FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE p.SEX = 'F' AND (l.TP < 6.0 OR l.TP > 8.5);
SELECT AVG(e.`aCL IgG`) AS average_aCL_IgG FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Admission = '+' AND (CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', p.Birthday) AS INTEGER)) >= 50;
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Description) = '1997' AND Admission = '-';
SELECT MIN( CAST(strftime('%Y', `First Date`) AS INTEGER) - CAST(strftime('%Y', Birthday) AS INTEGER) ) AS YoungestAge FROM Patient;
SELECT COUNT(DISTINCT Examination.ID) AS FemaleSevereThrombosisCount FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Thrombosis = 1 AND Patient.SEX = 'F' AND strftime('%Y', `Examination Date`) = '1997';
SELECT CAST(MAX(strftime('%Y', P.Birthday)) AS INTEGER) - CAST(MIN(strftime('%Y', P.Birthday)) AS INTEGER) AS age_gap FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TG >= 200 AND P.Birthday IS NOT NULL;
SELECT Examination.Symptoms, Examination.Diagnosis FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Birthday = (SELECT MIN(Birthday) FROM Patient);
SELECT COUNT(Laboratory.ID) / 12.0 AS average_monthly_tests FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.Date BETWEEN '1998-01-01' AND '1998-12-31' AND Patient.SEX = 'M';
SELECT Lab.Date AS LabCompletionDate, (CAST(strftime('%Y', p.`First Date`) AS INTEGER) - CAST(strftime('%Y', p.Birthday) AS INTEGER)) AS AgeAtArrival FROM Patient p JOIN Laboratory Lab ON p.ID = Lab.ID WHERE p.Diagnosis = 'SJS' AND p.Birthday = ( SELECT MAX(p2.Birthday) FROM Patient p2 WHERE p2.Diagnosis = 'SJS' ) ORDER BY Lab.Date DESC LIMIT 1;
SELECT CAST( (SELECT COUNT(DISTINCT L.ID) FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.SEX = 'M' AND L.UA <= 8.0) AS REAL) / (SELECT COUNT(DISTINCT L.ID) FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.SEX = 'F' AND L.UA <= 6.5) AS ratio;
SELECT COUNT(*) AS Patients_Not_Examined_Until_After_One_Year FROM Patient JOIN Examination ON Patient.ID = Examination.ID GROUP BY Patient.ID HAVING MIN(`Examination Date`) >= date(`First Date`, '+1 year');
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31' AND (CAST(strftime('%Y', e.`Examination Date`) AS INTEGER) - CAST(strftime('%Y', p.Birthday) AS INTEGER)) - (strftime('%m-%d', e.`Examination Date`) < strftime('%m-%d', p.Birthday)) < 18;
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.`T-BIL` > 2.0;
SELECT Diagnosis FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AVG(1991 - CAST(strftime('%Y', p.Birthday) AS INTEGER)) AS average_age FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.Date BETWEEN '1991-10-01' AND '1991-10-30';
SELECT CAST(strftime('%Y', e.`Examination Date`) AS INTEGER) - CAST(strftime('%Y', p.Birthday) AS INTEGER) AS age, p.Diagnosis FROM Examination e JOIN Laboratory l ON e.ID = l.ID AND e.`Examination Date` = l.Date JOIN Patient p ON e.ID = p.ID ORDER BY l.HGB DESC LIMIT 1;
SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';
SELECT ID, Date, `T-CHO`, CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'High' END AS Cholesterol_Status FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04';
SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' ORDER BY `First Date` ASC LIMIT 1;
SELECT Examination.`aCL IgM` FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Diagnosis = 'SLE' AND Patient.Description = '1994-02-19' AND Examination.`Examination Date` = '1993-11-12';
SELECT Patient.SEX FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GPT = 9 AND Laboratory.Date = '1992-06-12';
SELECT p.ID, (CAST(strftime('%Y', l.Date) AS INTEGER) - CAST(strftime('%Y', p.Birthday) AS INTEGER)) AS Age FROM Laboratory l INNER JOIN Patient p ON l.ID = p.ID WHERE l.UA = 8.4 AND l.Date = '1991-10-21';
SELECT COUNT(Lab.ID) AS Total_Laboratory_Tests FROM Laboratory Lab WHERE Lab.ID = ( SELECT P.ID FROM Patient P WHERE P.`First Date` = '1991-06-13' AND P.Diagnosis = 'SJS' ) AND strftime('%Y', Lab.Date) = '1995';
SELECT p.Diagnosis AS OriginalDiagnosis FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.`Examination Date` = '1997-01-27' AND e.Diagnosis = 'SLE';
SELECT Examination.Symptoms FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Birthday = '1959-03-01' AND Examination.`Examination Date` = '1993-09-27';
SELECT ((SUM(CASE WHEN l.Date LIKE '1981-11-%' THEN l.`T-CHO` ELSE 0 END) - SUM(CASE WHEN l.Date LIKE '1981-12-%' THEN l.`T-CHO` ELSE 0 END)) / NULLIF(SUM(CASE WHEN l.Date LIKE '1981-11-%' THEN l.`T-CHO` ELSE 0 END), 0)) * 100 AS decrease_rate_percentage FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = '1959-02-18';
SELECT DISTINCT Patient.ID FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Diagnosis = 'Behcet' AND Examination.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31';
SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4;

SELECT COUNT(DISTINCT ID) AS PatientCount FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > ( SELECT AVG(`aCL IgM`) * 1.2 FROM Examination );
SELECT ROUND( 100.0 * COUNT(DISTINCT CASE WHEN UA <= 6.5 THEN ID END) / COUNT(DISTINCT ID), 2 ) AS Percentage FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30;
SELECT (COUNT(*) * 100.0) / ( SELECT COUNT(*) FROM Patient WHERE SEX = 'M' AND strftime('%Y', `First Date`) = '1981' ) AS percentage_of_BEHCET FROM Patient WHERE SEX = 'M' AND strftime('%Y', `First Date`) = '1981' AND Diagnosis = 'BEHCET';
SELECT Patient.* FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.Date LIKE '1991-10%' AND Laboratory.`T-BIL` < 2.0;
SELECT COUNT(DISTINCT Patient.ID) AS FemalePatientsCount FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.`ANA Pattern` != 'p' AND Patient.SEX = 'F' AND Patient.Birthday BETWEEN '1980-01-01' AND '1989-12-31';
SELECT DISTINCT Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Diagnosis = 'PSS' AND Laboratory.CRP > 2 AND Laboratory.CRE = 1 AND Laboratory.LDH = 123;
SELECT AVG(l.ALB) AS average_blood_albumin FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'F' AND l.PLT > 400 AND p.Diagnosis = 'SLE';
SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Description, Diagnosis FROM Patient WHERE ID = 48473;
SELECT COUNT(*) AS Female_APS_Count FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';
SELECT COUNT(DISTINCT Laboratory.ID) FROM Laboratory WHERE strftime('%Y', Laboratory.Date) = '1997' AND (Laboratory.TP <= 6 OR Laboratory.TP >= 8.5);
SELECT (CAST(SUM(p.Diagnosis LIKE '%SLE%') AS FLOAT) / COUNT(DISTINCT e.ID)) * 100 AS proportion FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.Symptoms LIKE '%thrombocytopenia%';
SELECT (SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage_of_women FROM Patient WHERE strftime('%Y', Birthday) = '1980' AND Diagnosis = 'RA';
SELECT COUNT(DISTINCT Patient.ID) AS Male_BEHCET_Patients FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'M' AND Examination.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND Patient.Diagnosis = 'BEHCET' AND Patient.Admission = '-';
SELECT COUNT(DISTINCT Patient.ID) AS Female_Patients_With_Low_WBC FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Laboratory.WBC < 3.5;
SELECT Patient.ID, Patient.`First Date`, Examination.`Examination Date`, julianday(Examination.`Examination Date`) - julianday(Patient.`First Date`) AS DaysUntilEvaluation FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = 821298;
SELECT p.ID, p.SEX, l.UA, CASE WHEN p.SEX = 'M' AND l.UA > 8.0 THEN 'Within Normal Range' WHEN p.SEX = 'F' AND l.UA > 6.5 THEN 'Within Normal Range' ELSE 'Out of Normal Range' END AS UA_Status FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.ID = 57266;
SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60;
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GOT < 60 AND strftime('%Y', Laboratory.Date) = '1994';
SELECT DISTINCT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.GPT >= 60;
SELECT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GPT > 60 ORDER BY Patient.Birthday ASC;
SELECT AVG(LDH) AS average_LDH FROM Laboratory WHERE LDH < 500;
SELECT Patient.ID, CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', Patient.Birthday) AS INTEGER) AS age FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH BETWEEN 600 AND 800;
SELECT Patient.Admission, COUNT(DISTINCT Patient.ID) AS NumberOfPatients FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.ALP < 300 GROUP BY Patient.Admission;
SELECT Patient.ID, Laboratory.ALP, CASE WHEN Laboratory.ALP < 300 THEN 'Yes' ELSE 'No' END AS Is_ALP_Normal FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday = '1982-04-01';
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0;
SELECT Laboratory.ID, (Laboratory.TP - 8.5) AS TP_deviation FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND Laboratory.TP > 8.5;
SELECT Patient.* FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND (Laboratory.ALB <= 3.5 OR Laboratory.ALB >= 5.5) ORDER BY Patient.Birthday DESC;
SELECT Patient.ID, Patient.Birthday, Laboratory.ALB, CASE WHEN Laboratory.ALB BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END AS ALB_Status FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE strftime('%Y', Patient.Birthday) = '1982';
SELECT 100.0 * ( SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'F' AND l.UA > 6.5 ) / ( SELECT COUNT(*) FROM Patient WHERE SEX = 'F' ) AS percentage_female_UA_beyond_normal;
SELECT AVG(L.UA) AS Average_UA FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.Date = ( SELECT MAX(Date) FROM Laboratory WHERE ID = L.ID ) AND ( (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5) )
SELECT DISTINCT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UN = 29;
SELECT DISTINCT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'RA' AND Laboratory.UN < 30;
SELECT COUNT(DISTINCT Patient.ID) AS MalePatientsWithHighCRE FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.CRE >= 1.5;
SELECT CASE WHEN (SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.CRE >= 1.5) > (SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'F' AND l.CRE >= 1.5) THEN 'True' ELSE 'False' END AS MoreMalesWithHighCRE ;
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.`T-BIL` = ( SELECT MAX(`T-BIL`) FROM Laboratory );
SELECT p.ID, p.SEX, p.Birthday, p.Description, p.`First Date`, p.Admission, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.`T-BIL` >= 2.0 ORDER BY p.SEX;
SELECT Patient.ID, Laboratory.`T-CHO` FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday = (SELECT MIN(Birthday) FROM Patient) AND Laboratory.`T-CHO` = (SELECT MAX(`T-CHO`) FROM Laboratory);
SELECT AVG(CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', Birthday) AS INTEGER)) AS average_age FROM Patient WHERE SEX = 'M' AND ID IN ( SELECT ID FROM Laboratory WHERE `T-CHO` >= 250 );
SELECT DISTINCT Patient.ID, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TG > 300;
SELECT COUNT(DISTINCT Patient.ID) AS NumberOfPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TG >= 200 AND (CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', Patient.Birthday) AS INTEGER)) > 50;
SELECT DISTINCT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.CPK < 250;
SELECT COUNT(DISTINCT P.ID) AS MalePatientsWithHighCPK FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND CAST(substr(P.Birthday, 1, 4) AS INTEGER) BETWEEN 1936 AND 1956 AND L.CPK >= 250;
SELECT Patient.ID, Patient.SEX, (CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', Patient.Birthday) AS INTEGER)) AS age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU >= 180 AND Laboratory.`T-CHO` < 250;
SELECT Patient.ID, Laboratory.GLU FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE strftime('%Y', Patient.Description) >= '1991' AND Laboratory.GLU < 180;
SELECT DISTINCT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.WBC <= 3.5 OR Laboratory.WBC >= 9.0 ORDER BY Patient.SEX ASC, Patient.Birthday DESC;
SELECT Patient.ID, CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', Patient.Birthday) AS INTEGER) AS age, Patient.Diagnosis FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RBC < 3.5;
SELECT DISTINCT Patient.ID, Patient.Admission FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Sex = 'F' AND (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) >= 50 AND (Laboratory.RBC <= 3.5 OR Laboratory.RBC >= 6.0);

SELECT Patient.ID, Patient.SEX FROM Patient WHERE Patient.Diagnosis = 'SLE' AND EXISTS ( SELECT 1 FROM Laboratory WHERE Laboratory.ID = Patient.ID AND Laboratory.HGB > 10 AND Laboratory.HGB < 17 ) ORDER BY Patient.Birthday ASC LIMIT 1;
SELECT Patient.ID, CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', Patient.Birthday) AS INTEGER) AS age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.HCT >= 52 GROUP BY Patient.ID HAVING COUNT(*) >= 2;
SELECT AVG(HCT) AS average_hematocrit FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;
SELECT COUNT(DISTINCT CASE WHEN PLT < 100 THEN ID END) AS LowerThanNormal, COUNT(DISTINCT CASE WHEN PLT > 400 THEN ID END) AS HigherThanNormal FROM Laboratory;
SELECT Patient.* FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date LIKE '1984%' AND (CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', Patient.Birthday) AS INTEGER)) < 50 AND Laboratory.PLT BETWEEN 100 AND 400;
SELECT (SUM(Laboratory.PT >= 14 AND Patient.SEX = 'F') * 1.0 / SUM(Laboratory.PT >= 14)) AS percentage FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE (CAST(strftime('%Y','now') AS INTEGER) - CAST(strftime('%Y', Patient.Birthday) AS INTEGER)) > 55;
SELECT DISTINCT Patient.* FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.`First Date` > '1992-12-31' AND Laboratory.PT < 14;
SELECT COUNT(*) FROM Examination e JOIN Laboratory l ON e.ID = l.ID AND e.`Examination Date` = l.Date WHERE e.`Examination Date` > '1997-01-01' AND l.APTT >= 45;
SELECT COUNT(DISTINCT l.ID) AS MildThrombosisCount FROM Laboratory l JOIN Examination e ON l.ID = e.ID WHERE l.APTT > 45 AND e.Thrombosis = 3;
SELECT COUNT(DISTINCT Patient.ID) AS MalePatientsWithAbnormalFG FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.WBC BETWEEN 3.5 AND 9.0 AND (Laboratory.FG <= 150 OR Laboratory.FG >= 450);
SELECT COUNT(DISTINCT Patient.ID) AS NumberOfPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday > '1980-01-01' AND (Laboratory.FG < 150 OR Laboratory.FG > 450);
SELECT DISTINCT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE CAST(Laboratory.`U-PRO` AS INTEGER) >= 30;
SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'SLE' AND CAST(Laboratory.`U-PRO` AS REAL) > 0 AND CAST(Laboratory.`U-PRO` AS REAL) < 30;
SELECT COUNT(DISTINCT Patient.ID) AS PatientCount FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.IGG < 900 AND Examination.Symptoms = 'abortion';
SELECT COUNT(DISTINCT Laboratory.ID) AS PatientCount FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.IGG BETWEEN 900 AND 2000 AND Examination.Symptoms IS NOT NULL;
SELECT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.IGA BETWEEN 80 AND 500 ORDER BY Laboratory.IGA DESC LIMIT 1;
SELECT COUNT(DISTINCT Patient.ID) AS PatientCount FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.IGA BETWEEN 80 AND 500 AND Patient.`First Date` >= '1990-01-01';
SELECT Diagnosis FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE IGM < 40 OR IGM > 400 ) GROUP BY Diagnosis ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT Patient.ID) AS NormalCRP_NoDescription FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE (Laboratory.CRP LIKE '+' OR Laboratory.CRP LIKE '-' OR CAST(Laboratory.CRP AS REAL) < 1.0) AND Patient.Description IS NULL;
SELECT COUNT(DISTINCT Patient.ID) AS NumPatients FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.CRP NOT IN ('+-', '-') AND Laboratory.CRP >= 1.0 AND (CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', Patient.Birthday) AS INTEGER)) < 18;
SELECT COUNT(DISTINCT Patient.ID) AS PatientCount FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.RA IN ('-', '+-') AND Examination.KCT = '+';
SELECT DISTINCT P.Diagnosis FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE P.Birthday >= '1995-01-01' AND L.RA IN ('-', '+-');
SELECT DISTINCT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RF < 20 AND (CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', Patient.Birthday) AS INTEGER)) > 60;
SELECT COUNT(DISTINCT Patient.ID) AS PatientCount FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.RF < 20 AND Examination.Thrombosis = 0;
SELECT COUNT(DISTINCT Patient.ID) AS NumPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.C3 > 35 AND Examination.`ANA Pattern` = 'P';
SELECT e.ID FROM Examination e WHERE e.`aCL IgA` = ( SELECT MAX(e2.`aCL IgA`) FROM Examination e2 WHERE e2.ID IN ( SELECT l.ID FROM Laboratory l WHERE l.HCT <= 29 OR l.HCT >= 52 ) )
SELECT COUNT(DISTINCT Examination.ID) AS NormalC4Count FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.Thrombosis = 1 AND Laboratory.C4 > 10;
SELECT COUNT(DISTINCT Patient.ID) AS NormalRNPAdmittedCount FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RNP IN ('-', '+-') AND Patient.Admission = '+';
SELECT MAX(p.Birthday) AS Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.RNP NOT IN ('-', '+-');
SELECT COUNT(DISTINCT Patient.ID) AS SevereThrombosisCount FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.SM IN ('-', '0') AND Examination.Thrombosis = 1;
SELECT DISTINCT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.SM NOT IN ('-', '+-') ORDER BY Patient.Birthday DESC LIMIT 3;
SELECT DISTINCT Examination.ID FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.`Examination Date` >= '1997-01-01' AND Laboratory.SC170 IN ('-', '+-');
SELECT COUNT(DISTINCT Patient.ID) AS NumberOfPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'M' AND Laboratory.SC170 IN ('-', '+-') AND Examination.Symptoms = 'vertigo';
SELECT COUNT(DISTINCT Patient.ID) AS NumberOfPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.SSA IN ('-', '+-') AND strftime('%Y', Patient.`First Date`) < '1990';
SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.SSA NOT IN ('-', '+-') ORDER BY Patient.`First Date` ASC LIMIT 1;
SELECT COUNT(DISTINCT Examination.ID) AS NormalSSBSLECount FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID AND Examination.`Examination Date` = Laboratory.Date WHERE Examination.Diagnosis = 'SLE' AND Laboratory.SSB IN ('negative', '0');
SELECT COUNT(DISTINCT p.ID) AS PatientCount FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID WHERE l.SSB IN ('-', '+-') AND e.Symptoms IS NOT NULL;
SELECT COUNT(DISTINCT Patient.ID) AS MaleNormalPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CENTROMEA IN ('-', '+-') AND Laboratory.SSB IN ('-', '+-') AND Patient.SEX = 'M';
SELECT DISTINCT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE CAST(Laboratory.DNA AS INTEGER) >= 8;
SELECT COUNT(DISTINCT p.ID) AS NormalDNAWithoutDataRecorded FROM Patient p INNER JOIN Laboratory l ON p.ID = l.ID WHERE p.Description IS NULL AND l.`DNA-II` < 8;
SELECT COUNT(DISTINCT Patient.ID) AS AbnormalDNAII_AdmittedCount FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`DNA-II` >= 8 AND Patient.Admission = '+';
SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM Laboratory WHERE GOT >= 60) AS Percentage FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.GOT >= 60 AND Patient.Diagnosis = 'SLE';
SELECT COUNT(DISTINCT Patient.ID) AS MalePatientsWithNormalGOT FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.GOT < 60;
SELECT MAX(P.Birthday) AS Youngest_Birthdate FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GOT >= 60;
SELECT P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GPT < 60 GROUP BY P.ID ORDER BY MAX(L.GPT) DESC LIMIT 3;
SELECT COUNT(DISTINCT Patient.ID) AS MaleNormalGOTCount FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GOT < 60 AND Patient.SEX = 'M';
SELECT p.`First Date` FROM Patient p WHERE p.ID = ( SELECT l.ID FROM Laboratory l WHERE l.LDH < 500 ORDER BY l.LDH DESC LIMIT 1 );
SELECT MAX(L.Date) AS latest_record_date FROM Laboratory L WHERE L.ID = ( SELECT ID FROM Patient WHERE `First Date` = ( SELECT MAX(`First Date`) FROM Patient ) ) AND L.LDH >= 500;
SELECT COUNT(DISTINCT Laboratory.ID) AS AdmittedAbnormalALPCount FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.ALP >= 300 AND Patient.Admission = '+';
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.ALP < 300;
SELECT DISTINCT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0;
SELECT COUNT(DISTINCT p.ID) AS NormalTP_SJS_Patients FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Diagnosis = 'SJS' AND l.TP > 6.0 AND l.TP < 8.5;
SELECT Date FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5 ORDER BY ALB DESC LIMIT 1;
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.ALB > 3.5 AND Laboratory.ALB < 5.5 AND Laboratory.TP BETWEEN 6.0 AND 8.5;
SELECT e.`aCL IgG`, e.`aCL IgM`, e.`aCL IgA` FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'F' AND l.UA = ( SELECT MAX(l2.UA) FROM Laboratory l2 JOIN Patient p2 ON p2.ID = l2.ID WHERE p2.SEX = 'F' AND l2.UA > 6.50 );
SELECT MAX(Examination.ANA) AS Highest_ANA FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.CRE < 1.5;
SELECT DISTINCT E.ID FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE E.`aCL IgA` = (SELECT MAX(`aCL IgA`) FROM Examination) AND L.CRE < 1.5;
SELECT COUNT(DISTINCT Laboratory.ID) AS PatientCount FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.`T-BIL` >= 2.0 AND Examination.`ANA Pattern` LIKE '%P%';
SELECT Examination.ANA FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.`T-BIL` = ( SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0 );
SELECT COUNT(*) FROM Patient p WHERE EXISTS ( SELECT 1 FROM Laboratory l WHERE l.ID = p.ID AND l.`T-CHO` >= 250 ) AND EXISTS ( SELECT 1 FROM Examination e WHERE e.ID = p.ID AND e.KCT = '-' );
SELECT COUNT(DISTINCT Patient.ID) AS NormalCholesterolWithP_AnaPattern FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.`T-CHO` < 250 AND Examination.`ANA Pattern` = 'P';
SELECT COUNT(DISTINCT Laboratory.ID) AS PatientCount FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.TG < 200 AND Examination.Symptoms IS NOT NULL;
SELECT Patient.Diagnosis FROM Patient WHERE Patient.ID IN ( SELECT Laboratory.ID FROM Laboratory WHERE Laboratory.TG = ( SELECT MAX(Laboratory.TG) FROM Laboratory WHERE Laboratory.TG < 200 ) );
SELECT DISTINCT E.ID FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE E.Thrombosis = 0 AND L.CPK < 250;
SELECT COUNT(DISTINCT p.ID) AS PatientCount FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID WHERE l.CPK < 250 AND (e.KCT = '+' OR e.RVVT = '+' OR e.LAC = '+');
SELECT MIN(P.Birthday) AS OldestBirthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU > 180;
SELECT COUNT(DISTINCT Patient.ID) AS PatientCount FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID LEFT JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.GLU < 180 AND (Examination.Thrombosis = 0 OR Examination.Thrombosis IS NULL);
SELECT COUNT(DISTINCT Patient.ID) AS NormalWBCPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '+' AND Laboratory.WBC BETWEEN 3.5 AND 9.0;
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'SLE' AND Laboratory.WBC BETWEEN 3.5 AND 9.0;
SELECT DISTINCT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE (Laboratory.RBC <= 3.5 OR Laboratory.RBC >= 6.0) AND Patient.Admission = '-';
SELECT COUNT(DISTINCT Patient.ID) AS PatientsWithNormalPLTAndSymptoms FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.PLT > 100 AND Laboratory.PLT < 400 AND Patient.Diagnosis IS NOT NULL;
SELECT Patient.ID, Laboratory.PLT FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'MCTD' AND Laboratory.PLT > 100 AND Laboratory.PLT < 400;
SELECT AVG(Laboratory.PT) AS Average_Prothrombin_Time FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.PT < 14;
SELECT COUNT(DISTINCT Patient.ID) AS SevereThrombosisWithNormalPT FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Thrombosis IN (1, 2) AND Laboratory.PT < 14;
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';
SELECT COUNT(*) AS num_students FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';
SELECT member.first_name || ' ' || member.last_name AS full_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.type = 'Student_Club' AND major.department = 'Art and Design Department';
SELECT COUNT(*) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = "Women's Soccer";
SELECT member.phone FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';
SELECT COUNT(*) FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id JOIN major ma ON m.link_to_major = ma.major_id WHERE e.event_name = 'Women''s Soccer' AND ma.major_name = 'Student_Club' AND m.t_shirt_size = 'Medium';
SELECT e.event_id, e.event_name, COUNT(a.link_to_member) AS attendance_count FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Student_Club' GROUP BY e.event_id, e.event_name ORDER BY attendance_count DESC LIMIT 1;
SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';
SELECT event.event_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';
SELECT COUNT(*) AS number_of_events FROM attendance JOIN member ON attendance.link_to_member = member.member_id JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND event.type = 'Student_Club' AND strftime('%Y', event.event_date) = '2019';
SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND event_id IN ( SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 10 );
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event WHERE e.type = 'Student_Club' GROUP BY e.event_id, e.event_name HAVING COUNT(a.link_to_member) > 20;
SELECT AVG(attendance_count) AS average_attendance FROM ( SELECT COUNT(a.link_to_member) AS attendance_count FROM event e LEFT JOIN attendance a ON e.event_id = a.link_to_event WHERE e.type = 'Meeting' AND substr(e.event_date, 1, 4) = '2020' GROUP BY e.event_id );
SELECT e.expense_description, e.cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id ORDER BY e.cost DESC LIMIT 1;
SELECT COUNT(*) AS environmental_engineering_members FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT member.first_name || ' ' || member.last_name AS full_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';
SELECT member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';
SELECT z.county FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Sherri' AND m.last_name = 'Ramsey';
SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt';
SELECT SUM(income.amount) AS total_funds_received FROM member JOIN income ON member.member_id = income.link_to_member WHERE member.position = 'Vice President';
SELECT b.spent FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Food' AND e.event_name = 'September Meeting';
SELECT z.city, z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.position = 'President';
SELECT member.first_name || ' ' || member.last_name AS full_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';
SELECT SUM(expense.cost) AS total_advertisement_spent FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id JOIN member ON expense.link_to_member = member.member_id WHERE budget.category = 'Advertisement' AND event.event_name = 'September Meeting';
SELECT ma.department FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.last_name IN ('Pierce', 'Guidi');
SELECT SUM(b.amount) AS total_budgeted_amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'October Speaker';
SELECT expense.expense_id, expense.expense_description, expense.approved FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND event.event_date = '2019-10-08';
SELECT AVG(total_cost) AS average_cost FROM ( SELECT SUM(expense.cost) AS total_cost FROM expense JOIN member ON expense.link_to_member = member.member_id JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE member.first_name = 'Elijah' AND member.last_name = 'Allen' AND strftime('%m', expense.expense_date) IN ('09', '10') GROUP BY event.event_id ) AS event_expenses;
SELECT (SELECT SUM(b.spent) FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE strftime('%Y', e.event_date) = '2019' AND e.type = 'Student_Club') - (SELECT SUM(b.spent) FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE strftime('%Y', e.event_date) = '2020' AND e.type = 'Student_Club') AS difference;
SELECT location FROM event WHERE event_name = 'Spring Budget Review';
SELECT SUM(cost) AS total_cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04';
SELECT remaining FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1;
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';
SELECT COUNT(*) AS number_of_majors FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';
SELECT zip_code.county FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher';
SELECT COUNT(*) AS exceeded_budget_count FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Meeting' AND budget.remaining < 0;
SELECT SUM(b.amount) AS total_budget_amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Speaker';
SELECT budget.event_status FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-8-20';
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason';
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Human Development and Family Studies' AND member.t_shirt_size = 'Large';
SELECT z.type FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Christof' AND m.last_name = 'Nielson';
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';
SELECT zip_code.state FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';
SELECT major.department FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President';
SELECT i.date_received FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE m.first_name = 'Connor' AND m.last_name = 'Hilton' AND i.source = 'Dues';
SELECT m.first_name || ' ' || m.last_name AS full_name FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.source = 'Dues' ORDER BY i.date_received ASC LIMIT 1;
SELECT SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN b.amount ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN e.event_name = 'October Meeting' THEN b.amount ELSE 0 END), 0) AS times_more FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Advertisement' AND e.event_name IN ('Yearly Kickoff', 'October Meeting');
SELECT (SUM(CASE WHEN budget.category = 'Parking' THEN budget.amount ELSE 0 END) / SUM(budget.amount)) * 100 AS parking_percentage FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Speaker';
SELECT SUM(cost) AS total_pizza_cost FROM expense WHERE expense_description = 'Pizza';
SELECT COUNT(DISTINCT city) AS number_of_cities FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';
SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT z.city, z.county, z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Amy' AND m.last_name = 'Firth';
SELECT expense.expense_description FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.remaining = (SELECT MIN(remaining) FROM budget);
SELECT member.member_id, member.first_name, member.last_name, member.email, member.phone FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting';
SELECT major.college, COUNT(*) AS member_count FROM member JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY member_count DESC LIMIT 1;
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';
SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.amount = (SELECT MAX(amount) FROM budget);
SELECT expense.* FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.position = 'Vice President';
SELECT COUNT(DISTINCT attendance.link_to_member) AS member_count FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';
SELECT income.date_received FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason';
SELECT COUNT(*) FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland';
SELECT COUNT(*) AS event_count FROM attendance a JOIN member m ON a.link_to_member = m.member_id WHERE m.phone = '954-555-6240';
SELECT member.first_name || ' ' || member.last_name AS full_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';
SELECT e.event_id, e.event_name, SUM(b.spent) / SUM(b.amount) AS spend_to_budget_ratio FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' GROUP BY e.event_id, e.event_name ORDER BY spend_to_budget_ratio DESC LIMIT 1;
SELECT COUNT(*) AS president_count FROM member WHERE position = 'President';
SELECT e.event_id, e.event_name, SUM(b.spent) AS total_spent FROM budget b JOIN event e ON b.link_to_event = e.event_id GROUP BY e.event_id, e.event_name ORDER BY total_spent DESC LIMIT 1;
SELECT COUNT(*) AS meeting_count FROM event WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020';
SELECT SUM(spent) AS total_food_spent FROM budget WHERE category = 'Food';
SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.member_id HAVING COUNT(attendance.link_to_event) > 7;
SELECT member.member_id, member.first_name, member.last_name, member.email, member.position, member.t_shirt_size, member.phone, major.major_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE major.major_name = 'Interior Design' AND event.event_name = 'Community Theater';
SELECT member.first_name || ' ' || member.last_name AS full_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';
SELECT SUM(income.amount) AS total_income FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';
SELECT member.first_name || ' ' || member.last_name AS full_name FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 40;
SELECT SUM(expense.cost) AS total_expense FROM event JOIN budget ON event.event_id = budget.link_to_event JOIN expense ON budget.budget_id = expense.link_to_budget WHERE event.event_name = 'Yearly Kickoff';
SELECT DISTINCT m.first_name, m.last_name, m.email FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'Yearly Kickoff';
SELECT m.first_name || ' ' || m.last_name AS full_name, i.source FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.amount = (SELECT MAX(amount) FROM income);
SELECT e.event_name, SUM(ex.cost) AS total_cost FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget GROUP BY e.event_id, e.event_name ORDER BY total_cost ASC LIMIT 1;
SELECT (SUM(CASE WHEN event.event_name = 'Yearly Kickoff' THEN expense.cost ELSE 0 END) / SUM(expense.cost)) * 100 AS percentage_of_yearly_kickoff_cost FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id;
SELECT SUM(CASE WHEN major.major_name = 'Finance' THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN major.major_name = 'Physics' THEN 1 ELSE 0 END), 0) AS finance_to_physics_ratio FROM member JOIN major ON member.link_to_major = major.major_id;
SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY SUM(amount) DESC LIMIT 1;
SELECT first_name || ' ' || last_name AS full_name, email FROM member WHERE position = 'Secretary';
SELECT COUNT(*) AS PhysicsTeachingMembers FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';
SELECT COUNT(*) AS member_count FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Community Theater' AND substr(e.event_date, 1, 4) = '2019';
SELECT COUNT(att.link_to_event) AS events_attended, maj.major_name AS major FROM member AS m LEFT JOIN attendance AS att ON m.member_id = att.link_to_member LEFT JOIN major AS maj ON m.link_to_major = maj.major_id WHERE m.first_name = 'Luisa' AND m.last_name = 'Guidi' GROUP BY maj.major_name;
SELECT SUM(b.spent) / COUNT(b.spent) AS average_food_spent FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Food' AND e.event_status = 'Closed';
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Advertisement' ORDER BY b.spent DESC LIMIT 1;
SELECT EXISTS ( SELECT 1 FROM attendance a JOIN member m ON a.link_to_member = m.member_id JOIN event e ON a.link_to_event = e.event_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean' AND e.event_name = "Women's Soccer" ) AS attended;
SELECT (SUM(type = 'Community Service') * 100.0) / COUNT(event_id) AS percentage_share FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31';
SELECT SUM(exp.cost) AS poster_cost FROM expense exp JOIN budget bud ON exp.link_to_budget = bud.budget_id JOIN event ev ON bud.link_to_event = ev.event_id WHERE ev.event_name = 'September Speaker' AND exp.expense_description = 'Posters';
SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1;
SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event.status = 'Closed' AND budget.remaining < 0 ORDER BY budget.remaining ASC LIMIT 1;
SELECT b.category AS expense_type, SUM(e.cost) AS total_approved FROM event ev JOIN budget b ON ev.event_id = b.link_to_event JOIN expense e ON b.budget_id = e.link_to_budget WHERE ev.event_name = 'October Meeting' AND e.approved = 'Yes' GROUP BY b.category;
SELECT event_id FROM event WHERE event_name = 'April Speaker';
SELECT * FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' );
SELECT * FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;
SELECT SUM(cost) AS total_parking_cost FROM expense WHERE expense_description = 'Parking';
SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';
SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.first_name, m.last_name;
SELECT DISTINCT expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';
SELECT DISTINCT expense.expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large';
SELECT DISTINCT member.zip FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost < 50;
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen';
SELECT member.position FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';
SELECT COUNT(*) AS business_medium_members FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';
SELECT DISTINCT event.type FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 30;
SELECT DISTINCT type AS category FROM event WHERE location = 'MU 215';
SELECT type FROM event WHERE event_date = '2020-03-24T12:00:00';
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';
SELECT (SUM(CASE WHEN member.position = 'Member' AND major.major_name = 'Mathematics' THEN 1 ELSE 0 END) * 100.0) / COUNT(member.member_id) AS mathematics_member_percentage FROM member JOIN major ON member.link_to_major = major.major_id;
SELECT DISTINCT type FROM event WHERE location = 'MU 215';
SELECT COUNT(*) AS number_of_incomes FROM income WHERE amount = 50;
SELECT COUNT(*) AS extra_large_members FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';
SELECT COUNT(*) AS total_majors FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education';
SELECT member.last_name, major.department, major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT budget.category FROM event JOIN budget ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0;
SELECT z.city, z.state FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN zip_code z ON m.zip = z.zip_code WHERE ma.department = 'Electrical and Computer Engineering Department' AND m.position = 'Member';
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id JOIN major ma ON m.link_to_major = ma.major_id WHERE e.type = 'Social' AND e.location = '900 E. Washington St.' AND m.position = 'Vice President' AND ma.major_name = 'Student_Club';

SELECT member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE member.position = 'Member' AND event.event_name = 'Women''s Soccer';
SELECT ROUND( (COUNT(CASE WHEN income.amount = 50 AND income.source = 'Student_Club' THEN 1 END) * 100.0) / COUNT(member.member_id), 2 ) AS percentage FROM member LEFT JOIN income ON member.member_id = income.link_to_member WHERE member.t_shirt_size = 'Medium' AND member.position = 'Member';
SELECT DISTINCT 'United States' AS country FROM zip_code WHERE type = 'PO Box';
SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND city = 'San Juan Municipio' AND state = 'Puerto Rico';
SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';
SELECT DISTINCT e.event_id, e.event_name, e.event_date, e.type, e.notes, e.location, e.status FROM member m JOIN expense ex ON m.member_id = ex.link_to_member JOIN budget b ON ex.link_to_budget = b.budget_id JOIN event e ON b.link_to_event = e.event_id WHERE ex.cost > 50;
SELECT m.first_name, m.last_name, a.link_to_event FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN attendance a ON m.member_id = a.link_to_member WHERE e.approved = 'true' AND e.expense_date BETWEEN '2019-01-10' AND '2019-11-19';
SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy' AND member.link_to_major = 'rec1N0upiVLy5esTO';
SELECT member.phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND major.college = 'College of Agriculture and Applied Sciences';
SELECT DISTINCT m.email FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE e.cost > 20 AND e.expense_date BETWEEN '2019-09-10' AND '2019-11-19';
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'education' AND major.college = 'Education & Human Services';
SELECT (SUM(remaining < 0) / COUNT(event_id)) * 100 AS percentage_over_budget FROM budget;
SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';
SELECT expense_description, AVG(cost) AS average_cost FROM expense GROUP BY expense_description HAVING AVG(cost) > 50;
SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large';
SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0) / COUNT(zip_code) AS percentage_po_box FROM zip_code;
SELECT event.event_name, event.location FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 0;
SELECT event.event_name, event.event_date FROM event JOIN budget ON event.event_id = budget.link_to_event JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100;
SELECT m.first_name || ' ' || m.last_name AS full_name, ma.major_name FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN major ma ON m.link_to_major = ma.major_id WHERE e.cost > 100;
SELECT z.city, z.state AS country FROM event e JOIN zip_code z ON CAST(e.location AS INTEGER) = z.zip_code JOIN attendance a ON e.event_id = a.link_to_event JOIN income i ON a.link_to_member = i.link_to_member GROUP BY e.event_id, z.city, z.state HAVING COUNT(i.income_id) > 40;
SELECT m.member_id, m.first_name, m.last_name, SUM(e.cost) AS total_spent FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id GROUP BY m.member_id, m.first_name, m.last_name HAVING COUNT(DISTINCT ev.event_id) > 1 ORDER BY total_spent DESC LIMIT 1;
SELECT 1.0 * SUM(expense.cost) / COUNT(DISTINCT budget.link_to_event) AS average_amount_paid FROM member JOIN expense ON member.member_id = expense.link_to_member JOIN budget ON expense.link_to_budget = budget.budget_id WHERE member.position != 'Member';
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE ex.category = 'Parking' GROUP BY e.event_id, e.event_name HAVING SUM(ex.cost) < ( SELECT SUM(ex2.cost) / COUNT(DISTINCT e2.event_id) FROM event e2 JOIN budget b2 ON e2.event_id = b2.link_to_event JOIN expense ex2 ON b2.budget_id = ex2.link_to_budget WHERE ex2.category = 'Parking' );
SELECT (SUM(expense.cost) / COUNT(event.event_id)) * 100 AS percentage_of_game_event_cost FROM event JOIN budget ON event.event_id = budget.link_to_event JOIN expense ON budget.budget_id = expense.link_to_budget WHERE event.type = 'Game';
SELECT budget.budget_id, MAX(expense.cost) AS max_cost FROM budget JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Water, chips, cookies' GROUP BY budget.budget_id ORDER BY max_cost DESC LIMIT 1;
SELECT member.first_name || ' ' || member.last_name AS full_name FROM member JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.member_id ORDER BY MAX(expense.cost) DESC LIMIT 5;
SELECT m.first_name || ' ' || m.last_name AS full_name, m.phone AS contact_number FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense);
SELECT (SUM(z.state = 'Maine') * 100.0 / COUNT(*)) - (SUM(z.state = 'Vermont') * 100.0 / COUNT(*)) AS difference_percentage FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.position = 'Member';
SELECT major.major_name, major.department FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';
SELECT m.first_name || ' ' || m.last_name AS full_name, e.cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Water, Veggie tray, supplies';
SELECT member.last_name, member.phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';
SELECT budget.category, budget.amount FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'January Speaker';
SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';
SELECT m.first_name || ' ' || m.last_name AS full_name, i.amount FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.date_received = '9/9/2019';
SELECT b.category FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.expense_description = 'Posters';
SELECT member.first_name || ' ' || member.last_name AS full_name, major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';
SELECT event.event_name, SUM(budget.spent) AS total_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts' GROUP BY event.event_name;
SELECT z.city AS hometown FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Garrett' AND m.last_name = 'Girke';
SELECT member.first_name || ' ' || member.last_name AS full_name, member.position FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.zip_code = 28092 AND zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina';
SELECT COUNT(DISTINCT gasstations.GasStationID) AS PremiumGasStationsCount FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID JOIN products ON transactions_1k.ProductID = products.ProductID WHERE gasstations.Country = 'CZE' AND products.Description = 'Premium gas';
SELECT SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) AS ratio_eur_czk FROM customers;
SELECT c.CustomerID, SUM(t.Amount) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'LAM' AND t.Date BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY c.CustomerID ORDER BY TotalConsumption ASC LIMIT 1;
SELECT AVG(ym.Consumption) AS AverageMonthlyConsumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'SME' AND ym.Date BETWEEN '201301' AND '201312';
SELECT c.CustomerID, SUM(ym.Consumption) AS TotalConsumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Currency = 'CZK' AND ym.Date BETWEEN '201101' AND '201112' GROUP BY c.CustomerID ORDER BY TotalConsumption DESC;
SELECT COUNT(*) FROM ( SELECT ym.CustomerID FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'KAM' AND ym.Date BETWEEN '201201' AND '201212' GROUP BY ym.CustomerID HAVING SUM(ym.Consumption) < 30000 ) AS filtered_customers;
SELECT (SELECT SUM(ym.Consumption) FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Currency = 'CZK' AND ym.Date BETWEEN '201201' AND '201212') - (SELECT SUM(ym.Consumption) FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' AND ym.Date BETWEEN '201201' AND '201212') AS DifferenceInConsumption;
SELECT strftime('%Y', t.Date) AS Year, SUM(t.Amount * t.Price) AS TotalAmountEUR FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' GROUP BY Year ORDER BY TotalAmountEUR DESC LIMIT 1;
SELECT c.Segment, SUM(y.Consumption) AS TotalConsumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1;
SELECT SUBSTR(Date, 1, 4) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'CZK' GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1;
SELECT substr(y.Date, 5, 2) AS Month, SUM(y.Consumption) AS TotalConsumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE substr(y.Date, 1, 4) = '2013' AND c.Segment = 'SME' GROUP BY Month ORDER BY TotalConsumption DESC LIMIT 1;
SELECT ym.CustomerID, c.Segment, SUM(ym.Consumption) AS AnnualConsumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE ym.Date BETWEEN '201301' AND '201312' GROUP BY ym.CustomerID, c.Segment ), min_consumption_per_segment AS ( SELECT Segment, MIN(AnnualConsumption) AS MinConsumption FROM customer_annual_consumption GROUP BY Segment ), count_min_consumers AS ( SELECT cac.Segment, COUNT(*) AS NumMinConsumers FROM customer_annual_consumption cac JOIN min_consumption_per_segment mc ON cac.Segment = mc.Segment AND cac.AnnualConsumption = mc.MinConsumption GROUP BY cac.Segment ), annual_average_per_segment AS ( SELECT mc.Segment, mc.MinConsumption * 1.0 / cm.NumMinConsumers AS AnnualAverage FROM min_consumption_per_segment mc JOIN count_min_consumers cm ON mc.Segment = cm.Segment ) SELECT (sme.AnnualAverage - lam.AnnualAverage) AS Difference_SME_LAM, (lam.AnnualAverage - kam.AnnualAverage) AS Difference_LAM_KAM, (kam.AnnualAverage - sme.AnnualAverage) AS Difference_KAM_SME FROM annual_average_per_segment sme CROSS JOIN annual_average_per_segment lam CROSS JOIN annual_average_per_segment kam WHERE sme.Segment = 'SME' AND lam.Segment = 'LAM' AND kam.Segment = 'KAM'
SELECT c.Segment, ROUND( ( SUM(CASE WHEN substr(ym.Date, 1, 4) = '2013' THEN ym.Consumption ELSE 0 END) - SUM(CASE WHEN substr(ym.Date, 1, 4) = '2012' THEN ym.Consumption ELSE 0 END) ) / NULLIF(SUM(CASE WHEN substr(ym.Date, 1, 4) = '2013' THEN ym.Consumption ELSE 0 END), 0) * 100.0, 2 ) AS PercentageIncrease FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE substr(ym.Date, 1, 4) IN ('2012', '2013') AND c.Currency = 'EUR' AND c.Segment IN ('SME', 'LAM', 'KAM') GROUP BY c.Segment ORDER BY PercentageIncrease DESC;
SELECT SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311';
SELECT (SELECT COUNT(*) FROM gasstations WHERE Country = 'Czech Republic' AND Segment = 'discount') - (SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia' AND Segment = 'discount') AS more_discount_gasstations;
SELECT (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304') - (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304') AS ConsumptionDifference;
SELECT SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) AS SMEs_CZK, SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS SMEs_EUR, SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS Difference FROM customers WHERE Segment = 'SME';
SELECT c.CustomerID, c.Segment, c.Currency, ym.Consumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Segment = 'LAM' AND c.Currency = 'Euro' AND ym.Date = '201310' ORDER BY ym.Consumption DESC LIMIT 1;
SELECT c.CustomerID, SUM(ym.Consumption) AS TotalConsumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Segment = 'KAM' GROUP BY c.CustomerID ORDER BY TotalConsumption DESC LIMIT 1;
SELECT SUM(y.Consumption) AS TotalConsumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Segment = 'KAM' AND y.Date = '201305';
SELECT (CAST( (SELECT COUNT(DISTINCT ym.CustomerID) FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'LAM' AND ym.Consumption > 46.73 ) AS REAL ) / (SELECT COUNT(*) FROM customers WHERE Segment = 'LAM') ) * 100.0 AS Percentage ;
SELECT Country, COUNT(*) AS TotalValueForMoneyGasStations FROM gasstations WHERE Segment = 'Value for Money' GROUP BY Country ORDER BY TotalValueForMoneyGasStations DESC;
SELECT (CAST(SUM(CASE WHEN Currency = 'Euro' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS PercentageOfKAMUsingEuro FROM customers WHERE Segment = 'KAM';
SELECT (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(*) FROM yearmonth WHERE Date = '201202')) * 100 AS percentage FROM yearmonth WHERE Date = '201202' AND Consumption > 528.3;
SELECT (SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS PercentageOfPremiumGasStations FROM gasstations WHERE Country = 'Slovakia';
SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1;
SELECT c.Segment, SUM(ym.Consumption) AS TotalConsumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE ym.Date = '201309' GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1;
SELECT c.CustomerID, c.Segment, ym.Consumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Segment = 'SME' AND ym.Date = '201206' ORDER BY ym.Consumption ASC LIMIT 1;
SELECT MAX(Consumption) AS HighestMonthlyConsumption FROM yearmonth WHERE substr(Date, 1, 4) = '2012';
SELECT MAX(y.Consumption / 12) AS BiggestMonthlyConsumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'EUR';
SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE strftime('%Y%m', t.Date) = '201309';
SELECT DISTINCT gasstations.Country FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE strftime('%Y%m', transactions_1k.Date) = '201306';
SELECT DISTINCT g.ChainID FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'euro';
SELECT products.Description FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID JOIN products ON transactions_1k.ProductID = products.ProductID WHERE customers.Currency = 'EUR';
SELECT AVG(Amount * Price) AS average_total_price FROM transactions_1k WHERE Date LIKE '2012-01%';
SELECT COUNT(DISTINCT customers.CustomerID) AS NumCustomers FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Currency = 'EUR' AND yearmonth.Consumption > 1000;
SELECT products.Description FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID JOIN products ON transactions_1k.ProductID = products.ProductID WHERE gasstations.Country = 'CZE';
SELECT DISTINCT transactions_1k.Time FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.ChainID = 11;
SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Price > 1000;
SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Date > '2012-01-01';
SELECT AVG(t.Price * t.Amount) AS average_total_price FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE';
SELECT AVG(total_price) AS average_total_price FROM ( SELECT SUM(t.Price) AS total_price FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' GROUP BY t.CustomerID ) AS customer_totals;
SELECT CustomerID, SUM(Price) AS TotalPaid FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY TotalPaid DESC LIMIT 1;
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-25' ORDER BY t.Time ASC LIMIT 1;
SELECT c.Currency FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-24' AND t.Time = '16:25:00';
SELECT customers.Segment FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE transactions_1k.Date = '2012-08-23' AND transactions_1k.Time = '21:20:00';
SELECT COUNT(*) FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' AND t.Date = '2012-08-26' AND t.Time < '13:00:00';
SELECT Segment FROM customers ORDER BY CustomerID ASC LIMIT 1;
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-24' AND t.Time = '12:42:00';
SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00';
error:Error code: 503 - {'error': {'message': '当前分组 企业 下对于模型 o1-mini-2024-09-12 无可用渠道 (request id: 2025012315111242668022ivMlryQJ)', 'type': 'new_api_error'}}
SELECT COUNT(*) AS TransactionCount FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-26' AND t.Time >= '08:00:00' AND t.Time < '09:00:00' AND g.Country = 'CZE';
SELECT c.Currency FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE ym.Date = '201306' AND ym.Consumption = 214582.17;
SELECT DISTINCT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.CardID = 667467;
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-24' GROUP BY t.CustomerID, g.Country HAVING SUM(t.Price) = 548.4;
SELECT (COUNT(DISTINCT c.CustomerID) * 100.0) / (SELECT COUNT(*) FROM customers) AS percentage FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-25' AND c.Currency = 'EUR';
SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID HAVING SUM(Amount * Price) = 634.8 ), consumption_2012 AS ( SELECT CustomerID, SUM(Consumption) AS Consumption2012 FROM yearmonth WHERE substr(Date, 1, 4) = '2012' AND CustomerID IN (SELECT CustomerID FROM target_customer) GROUP BY CustomerID ), consumption_2013 AS ( SELECT CustomerID, SUM(Consumption) AS Consumption2013 FROM yearmonth WHERE substr(Date, 1, 4) = '2013' AND CustomerID IN (SELECT CustomerID FROM target_customer) GROUP BY CustomerID ) SELECT (c2012.Consumption2012 - c2013.Consumption2013) / c2012.Consumption2012 AS ConsumptionDecreaseRate FROM consumption_2012 c2012 JOIN consumption_2013 c2013 ON c2012.CustomerID = c2013.CustomerID
SELECT g.GasStationID, g.ChainID, g.Country, g.Segment, SUM(t.Amount * t.Price) AS TotalRevenue FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID GROUP BY g.GasStationID ORDER BY TotalRevenue DESC LIMIT 1;
SELECT (CAST(SUM(CASE WHEN Segment = 'premium' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS premium_percentage FROM gasstations WHERE Country = 'SVK';
SELECT SUM(Amount) AS TotalAmountSpent, SUM( CASE WHEN strftime('%Y%m', Date) = '201201' THEN Amount ELSE 0 END ) AS January2012Spent FROM transactions_1k WHERE CustomerID = 38508;
SELECT p.Description, SUM(t.Amount) AS TotalSold FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID GROUP BY p.ProductID, p.Description ORDER BY TotalSold DESC LIMIT 5;
SELECT c.CustomerID, SUM(t.Price) AS TotalSpend, AVG(t.Price / t.Amount) AS AvgPricePerItem, c.Currency FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID GROUP BY c.CustomerID ORDER BY TotalSpend DESC LIMIT 1;
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.ProductID = 2 AND t.Price = ( SELECT MAX(Price) FROM transactions_1k WHERE ProductID = 2 );
SELECT DISTINCT y.Consumption FROM transactions_1k t JOIN yearmonth y ON t.CustomerID = y.CustomerID WHERE t.ProductID = 5 AND (t.Price / t.Amount) > 29.00 AND y.Date = '201208';
